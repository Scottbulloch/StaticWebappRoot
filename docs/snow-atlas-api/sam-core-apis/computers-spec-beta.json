{
  "openapi": "3.0.0",
  "info": {
    "title": "Product name: Computers API",
    "description": "API for interacting with computers.",
    "contact": {
      "name": "Snow Software, Inc.",
      "url": "https://www.snowsoftware.com"
    },
    "version": "0.0.0"
  },
  "servers": [
    {
      "url": "https://{region}.snowsoftware.io",
      "variables": {
        "region": {
          "enum": [
            "westeurope",
            "australiasoutheast",
            "eastus2",
            "uksouth"
          ],
          "default": "westeurope"
        }
      }
    }
  ],
  "paths": {
    "/api/sam/estate/v1/computers-metering": {
      "get": {
        "tags": [
          "Computer application metering"
        ],
        "summary": "Get application metering",
        "description": "Returns a collection of metric tracking data.",
        "operationId": "getApplicationMetering",
        "parameters": [
          {
            "name": "page_number",
            "in": "query",
            "description": "The page number.",
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1.0
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The maximum number of items in the response.",
            "schema": {
              "type": "integer",
              "default": 100,
              "minimum": 1.0
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "The fields which you can use to filter the results. Format of the query string parameter:\n```\n?filter=<filter name> <operator> <value>\n```\nFilter name | Description | Data type | Example\n:--- | --- | --- | ---\n\nFor more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).\n",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Your request succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilteredResponseWithLinksOfComputerApplicationMetering"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error: Your request failed due to an internal error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "sam.computer.r"
            ]
          }
        ]
      }
    },
    "/api/sam/estate/v1/computers/{id}/metering": {
      "get": {
        "tags": [
          "Computer application metering"
        ],
        "summary": "Get application metering by computer",
        "description": "Returns a collection of metric tracking data for a given computer.",
        "operationId": "getComputerApplicationMetering",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The unique ID of the computer.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_number",
            "in": "query",
            "description": "The page number.",
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1.0
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The maximum number of items in the response.",
            "schema": {
              "type": "integer",
              "default": 100,
              "minimum": 1.0
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "The fields which you can use to filter the results. Format of the query string parameter:\n```\n?filter=<filter name> <operator> <value>\n```\nFilter name | Description | Data type | Example\n:--- | --- | --- | ---\n\nFor more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).\n",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Your request succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilteredResponseWithLinksOfComputerApplicationMetering"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error: Your request failed due to an internal error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "sam.computer.r"
            ]
          }
        ]
      }
    },
    "/api/sam/estate/v1/computers/{id}/applications": {
      "get": {
        "tags": [
          "Computer applications"
        ],
        "summary": "Get computer's applications",
        "description": "Returns a collection of applications for a given computer.",
        "operationId": "getComputerApplications",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The unique ID of the computer.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_number",
            "in": "query",
            "description": "The page number.",
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1.0
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The maximum number of items in the response.",
            "schema": {
              "type": "integer",
              "default": 100,
              "minimum": 1.0
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "The fields which you can use to filter the results. Format of the query string parameter:\n```\n?filter=<filter name> <operator> <value>\n```\nFilter name | Description | Data type | Example\n:--- | --- | --- | ---\n\nFor more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).\n",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Your request succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilteredResponseWithLinksOfComputerApplications"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error: Your request failed due to an internal error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "sam.computer.r"
            ]
          }
        ]
      }
    },
    "/api/sam/estate/v1/computers/{id}/applications/{applicationid}": {
      "get": {
        "tags": [
          "Computer applications"
        ],
        "summary": "Get computer application's details",
        "description": "Returns the details of an application record for a given computer.",
        "operationId": "getComputerApplicationDetails",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The unique ID of the computer.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "applicationid",
            "in": "path",
            "required": true,
            "description": "The unique ID of the application.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Your request succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ComputerApplicationsDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error: Your request failed due to an internal error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "sam.computer.r"
            ]
          }
        ]
      }
    },
    "/api/sam/estate/v1/computers-applications": {
      "get": {
        "tags": [
          "Computer applications"
        ],
        "summary": "Get all computers' applications",
        "description": "Returns a collection of applications for all computers.",
        "operationId": "getComputersApplications",
        "parameters": [
          {
            "name": "page_number",
            "in": "query",
            "description": "The page number.",
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1.0
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The maximum number of items in the response.",
            "schema": {
              "type": "integer",
              "default": 100,
              "minimum": 1.0
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "The fields which you can use to filter the results. Format of the query string parameter:\n```\n?filter=<filter name> <operator> <value>\n```\nFilter name | Description | Data type | Example\n:--- | --- | --- | ---\n\nFor more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).\n",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Your request succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilteredResponseWithLinksOfComputerApplications"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error: Your request failed due to an internal error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "sam.computer.r"
            ]
          }
        ]
      }
    },
    "/api/sam/estate/v1/computers-application-usage": {
      "get": {
        "tags": [
          "Computer applications"
        ],
        "summary": "Get application usage collection",
        "description": "Returns a collection of application usage data.",
        "operationId": "getApplicationUsages",
        "parameters": [
          {
            "name": "page_number",
            "in": "query",
            "description": "The page number.",
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1.0
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The maximum number of items in the response.",
            "schema": {
              "type": "integer",
              "default": 100,
              "minimum": 1.0
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "The fields which you can use to filter the results. Format of the query string parameter:\n```\n?filter=<filter name> <operator> <value>\n```\nFilter name | Description | Data type | Example\n:--- | --- | --- | ---\n\nFor more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).\n",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Your request succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilteredResponseWithLinksOfComputerApplicationUsage"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error: Your request failed due to an internal error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "sam.computer.r"
            ]
          }
        ]
      }
    },
    "/api/sam/estate/v1/computers-application-user-usage": {
      "get": {
        "tags": [
          "Computer applications"
        ],
        "summary": "Get application user usage",
        "description": "Returns a collection of application usage data.",
        "operationId": "getApplicationUserUsage",
        "parameters": [
          {
            "name": "page_number",
            "in": "query",
            "description": "The page number.",
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1.0
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The maximum number of items in the response.",
            "schema": {
              "type": "integer",
              "default": 100,
              "minimum": 1.0
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "The fields which you can use to filter the results. Format of the query string parameter:\n```\n?filter=<filter name> <operator> <value>\n```\nFilter name | Description | Data type | Example\n:--- | --- | --- | ---\n\nFor more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).\n",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Your request succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilteredResponseWithLinksOfUserApplicationUsage"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error: Your request failed due to an internal error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "sam.computer.r"
            ]
          }
        ]
      }
    },
    "/api/sam/estate/v1/computers-application-usage/summary": {
      "get": {
        "tags": [
          "Computer applications"
        ],
        "summary": "Get application usage summary",
        "description": "Returns a collection of application usage summaries.",
        "operationId": "getApplicationUsageSummary",
        "parameters": [
          {
            "name": "page_number",
            "in": "query",
            "description": "The page number.",
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1.0
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The maximum number of items in the response.",
            "schema": {
              "type": "integer",
              "default": 100,
              "minimum": 1.0
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "The fields which you can use to filter the results. Format of the query string parameter:\n```\n?filter=<filter name> <operator> <value>\n```\nFilter name | Description | Data type | Example\n:--- | --- | --- | ---\n\nFor more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).\n",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Your request succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilteredResponseWithLinksOfComputerApplicationUsageSummary"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error: Your request failed due to an internal error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "sam.computer.r"
            ]
          }
        ]
      }
    },
    "/api/sam/estate/v1/computers/{id}/contracts": {
      "get": {
        "tags": [
          "Computer contracts"
        ],
        "summary": "Get computer's contracts",
        "description": "Returns a collection of contracts for a given computer.",
        "operationId": "getComputerContracts",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The unique ID of the computer.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_number",
            "in": "query",
            "description": "The page number.",
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1.0
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The maximum number of items in the response.",
            "schema": {
              "type": "integer",
              "default": 100,
              "minimum": 1.0
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "The fields which you can use to filter the results. Format of the query string parameter:\n```\n?filter=<filter name> <operator> <value>\n```\nFilter name | Description | Data type | Example\n:--- | --- | --- | ---\n\nFor more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).\n",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Your request succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilteredResponseWithLinksOfComputerContract"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error: Your request failed due to an internal error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "sam.computer.r"
            ]
          }
        ]
      }
    },
    "/api/sam/estate/v1/computers/{id}/costs": {
      "get": {
        "tags": [
          "Computer costs"
        ],
        "summary": "Get computer's costs",
        "description": "Returns the details of a computer's costs.",
        "operationId": "getComputerCosts",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The unique ID of the computer.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Your request succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ComputerCosts"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error: Your request failed due to an internal error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "sam.computer.r"
            ]
          }
        ]
      }
    },
    "/api/sam/estate/v1/computers/{id}/hardware/displayadapters": {
      "get": {
        "tags": [
          "Computer display adapter"
        ],
        "summary": "Get computer display adapters",
        "description": "Returns a collection of display adapter for a given computer.",
        "operationId": "getComputerDisplayAdapters",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The unique ID of the computer.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_number",
            "in": "query",
            "description": "The page number.",
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1.0
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The maximum number of items in the response.",
            "schema": {
              "type": "integer",
              "default": 100,
              "minimum": 1.0
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "The fields which you can use to filter the results. Format of the query string parameter:\n```\n?filter=<filter name> <operator> <value>\n```\nFilter name | Description | Data type | Example\n:--- | --- | --- | ---\n\nFor more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).\n",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Your request succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ComputerDisplayAdapter"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error: Your request failed due to an internal error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "sam.computer.r"
            ]
          }
        ]
      }
    },
    "/api/sam/estate/v1/computers/{id}/hardware/harddrives": {
      "get": {
        "tags": [
          "Computer drives"
        ],
        "summary": "Get computer drives",
        "description": "Returns a collection of hard drives for a given computer.",
        "operationId": "getComputerDrives",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The unique ID of the computer.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_number",
            "in": "query",
            "description": "The page number.",
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1.0
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The maximum number of items in the response.",
            "schema": {
              "type": "integer",
              "default": 100,
              "minimum": 1.0
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "The fields which you can use to filter the results. Format of the query string parameter:\n```\n?filter=<filter name> <operator> <value>\n```\nFilter name | Description | Data type | Example\n:--- | --- | --- | ---\n\nFor more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).\n",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Your request succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilteredResponseWithLinksOfComputerDrive"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error: Your request failed due to an internal error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "sam.computer.r"
            ]
          }
        ]
      }
    },
    "/api/sam/estate/v1/computers/{id}/hardware/opticaldrives": {
      "get": {
        "tags": [
          "Computer drives"
        ],
        "summary": "Get computer optical drives",
        "description": "Returns a collection of optical drives for a given computer.",
        "operationId": "getComputerOpticalDrives",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The unique ID of the computer.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_number",
            "in": "query",
            "description": "The page number.",
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1.0
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The maximum number of items in the response.",
            "schema": {
              "type": "integer",
              "default": 100,
              "minimum": 1.0
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "The fields which you can use to filter the results. Format of the query string parameter:\n```\n?filter=<filter name> <operator> <value>\n```\nFilter name | Description | Data type | Example\n:--- | --- | --- | ---\n\nFor more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).\n",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Your request succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilteredResponseWithLinksOfComputerDrive"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error: Your request failed due to an internal error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "sam.computer.r"
            ]
          }
        ]
      }
    },
    "/api/sam/estate/v1/computers/{id}/hardware": {
      "get": {
        "tags": [
          "Computer hardware"
        ],
        "summary": "Get computer's hardware details",
        "description": "Returns the details of a hardware for a given computer.",
        "operationId": "getComputerHardwareDetails",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The unique ID of the computer.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Your request succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ComputerHardwareDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error: Your request failed due to an internal error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "sam.computer.r"
            ]
          }
        ]
      }
    },
    "/api/sam/estate/v1/computers/{id}/hardware/disks/logical": {
      "get": {
        "tags": [
          "Computer logical disks"
        ],
        "summary": "Get computer's logical disks",
        "description": "Returns a collection of logical disks for a given computer.",
        "operationId": "getComputerLogicalDisks",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The unique ID of the computer.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_number",
            "in": "query",
            "description": "The page number.",
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1.0
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The maximum number of items in the response.",
            "schema": {
              "type": "integer",
              "default": 100,
              "minimum": 1.0
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "The fields which you can use to filter the results. Format of the query string parameter:\n```\n?filter=<filter name> <operator> <value>\n```\nFilter name | Description | Data type | Example\n:--- | --- | --- | ---\n\nFor more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).\n",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Your request succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilteredResponseWithLinksOfComputerLogicalDisk"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error: Your request failed due to an internal error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "sam.computer.r"
            ]
          }
        ]
      }
    },
    "/api/sam/estate/v1/computers/{id}/logonhistory": {
      "get": {
        "tags": [
          "Computer logon history"
        ],
        "summary": "Get computer's logon history",
        "description": "Returns a collection of computer logon histories.",
        "operationId": "getComputerLogonHistory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The unique ID of the computer.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_number",
            "in": "query",
            "description": "The page number.",
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1.0
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The maximum number of items in the response.",
            "schema": {
              "type": "integer",
              "default": 100,
              "minimum": 1.0
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "The fields which you can use to filter the results. Format of the query string parameter:\n```\n?filter=<filter name> <operator> <value>\n```\nFilter name | Description | Data type | Example\n:--- | --- | --- | ---\n\nFor more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).\n",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Your request succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilteredResponseWithLinksOfComputerLogonHistory"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error: Your request failed due to an internal error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "sam.computer.r"
            ]
          }
        ]
      }
    },
    "/api/sam/estate/v1/computers-logonhistory/{userid}": {
      "get": {
        "tags": [
          "Computer logon history"
        ],
        "summary": "Get computer's logon history for a user",
        "description": "Returns a collection of computer logon histories for a given user.",
        "operationId": "getComputerLogonHistoryForUser",
        "parameters": [
          {
            "name": "userid",
            "in": "path",
            "required": true,
            "description": "The unique ID of the user.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_number",
            "in": "query",
            "description": "The page number.",
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1.0
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The maximum number of items in the response.",
            "schema": {
              "type": "integer",
              "default": 100,
              "minimum": 1.0
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "The fields which you can use to filter the results. Format of the query string parameter:\n```\n?filter=<filter name> <operator> <value>\n```\nFilter name | Description | Data type | Example\n:--- | --- | --- | ---\n\nFor more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).\n",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Your request succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilteredResponseWithLinksOfComputerLogonHistory"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error: Your request failed due to an internal error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "sam.computer.r"
            ]
          }
        ]
      }
    },
    "/api/sam/estate/v1/computers/{id}/logonhistory/{userid}": {
      "get": {
        "tags": [
          "Computer logon history"
        ],
        "summary": "Get computer's logon history details",
        "description": "Returns the details of a logon histories for a given computer and user.",
        "operationId": "getComputerLogonHistoryDetails",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The unique ID of the computer.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userid",
            "in": "path",
            "required": true,
            "description": "The unique ID of the user.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Your request succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ComputerLogonHistoryDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error: Your request failed due to an internal error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "sam.computer.r"
            ]
          }
        ]
      }
    },
    "/api/sam/estate/v1/computers/{id}/hardware/monitors": {
      "get": {
        "tags": [
          "Computer monitors"
        ],
        "summary": "Get computer's monitors",
        "description": "Returns a collection of monitors for a given computer.",
        "operationId": "getComputerMonitors",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The unique ID of the computer.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_number",
            "in": "query",
            "description": "The page number.",
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1.0
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The maximum number of items in the response.",
            "schema": {
              "type": "integer",
              "default": 100,
              "minimum": 1.0
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "The fields which you can use to filter the results. Format of the query string parameter:\n```\n?filter=<filter name> <operator> <value>\n```\nFilter name | Description | Data type | Example\n:--- | --- | --- | ---\n\nFor more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).\n",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Your request succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ComputerMonitor"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error: Your request failed due to an internal error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "sam.computer.r"
            ]
          }
        ]
      }
    },
    "/api/sam/estate/v1/computers/{id}/hardware/networkadapters": {
      "get": {
        "tags": [
          "Computer network adapters"
        ],
        "summary": "Get computer's network adapters",
        "description": "Returns a collection of network adapters for a computer.",
        "operationId": "getComputerNetworkAdapters",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The unique ID of the computer.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_number",
            "in": "query",
            "description": "The page number.",
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1.0
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The maximum number of items in the response.",
            "schema": {
              "type": "integer",
              "default": 100,
              "minimum": 1.0
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "The fields which you can use to filter the results. Format of the query string parameter:\n```\n?filter=<filter name> <operator> <value>\n```\nFilter name | Description | Data type | Example\n:--- | --- | --- | ---\n\nFor more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).\n",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Your request succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilteredResponseWithLinksOfComputerNetworkAdapters"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error: Your request failed due to an internal error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "sam.computer.r"
            ]
          }
        ]
      }
    },
    "/api/sam/estate/v1/computers-networkadapters": {
      "get": {
        "tags": [
          "Computer network adapters"
        ],
        "summary": "Get all network adapters",
        "description": "Returns a collection of network adapters.",
        "operationId": "getAllNetworkAdapters",
        "parameters": [
          {
            "name": "page_number",
            "in": "query",
            "description": "The page number.",
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1.0
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The maximum number of items in the response.",
            "schema": {
              "type": "integer",
              "default": 100,
              "minimum": 1.0
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "The fields which you can use to filter the results. Format of the query string parameter:\n```\n?filter=<filter name> <operator> <value>\n```\nFilter name | Description | Data type | Example\n:--- | --- | --- | ---\n\nFor more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).\n",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Your request succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilteredResponseWithLinksOfComputerNetworkAdapters"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error: Your request failed due to an internal error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "sam.computer.r"
            ]
          }
        ]
      }
    },
    "/api/sam/estate/v1/computers/{id}/hardware/cpu": {
      "get": {
        "tags": [
          "Computer processors"
        ],
        "summary": "Get computer's processors",
        "description": "Returns a collection of computer processors.",
        "operationId": "getComputerProcessors",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The unique ID of the computer.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_number",
            "in": "query",
            "description": "The page number.",
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1.0
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The maximum number of items in the response.",
            "schema": {
              "type": "integer",
              "default": 100,
              "minimum": 1.0
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "The fields which you can use to filter the results. Format of the query string parameter:\n```\n?filter=<filter name> <operator> <value>\n```\nFilter name | Description | Data type | Example\n:--- | --- | --- | ---\n\nFor more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).\n",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Your request succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilteredResponseWithLinksOfComputerProcessor"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error: Your request failed due to an internal error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "sam.computer.r"
            ]
          }
        ]
      }
    },
    "/api/sam/estate/v1/computers/{id}/hardware/cpu/socketmap": {
      "get": {
        "tags": [
          "Computer processors"
        ],
        "summary": "Get computer's socket map details",
        "description": "Returns the details of a socket maps for a given computer.",
        "operationId": "getComputerSocketMapDetails",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The unique ID of the computer.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Your request succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ComputerSocketMapDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error: Your request failed due to an internal error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "sam.computer.r"
            ]
          }
        ]
      }
    },
    "/api/sam/estate/v1/computers/{id}/registry": {
      "get": {
        "tags": [
          "Computer registries"
        ],
        "summary": "Get computer's registries",
        "description": "Returns a collection of computer registries.",
        "operationId": "getComputerRegistries",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The unique ID of the computer.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_number",
            "in": "query",
            "description": "The page number.",
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1.0
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The maximum number of items in the response.",
            "schema": {
              "type": "integer",
              "default": 100,
              "minimum": 1.0
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "The fields which you can use to filter the results. Format of the query string parameter:\n```\n?filter=<filter name> <operator> <value>\n```\nFilter name | Description | Data type | Example\n:--- | --- | --- | ---\n\nFor more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).\n",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Your request succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilteredResponseWithLinksOfComputerRegistry"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error: Your request failed due to an internal error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "sam.computer.r"
            ]
          }
        ]
      }
    },
    "/api/sam/estate/v1/computers/{id}": {
      "get": {
        "tags": [
          "Computers"
        ],
        "summary": "Get computer details",
        "description": "Returns the details of a given computer.",
        "operationId": "getComputer",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The unique ID of the computer.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_number",
            "in": "query",
            "description": "The page number.",
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1.0
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The maximum number of items in the response.",
            "schema": {
              "type": "integer",
              "default": 100,
              "minimum": 1.0
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "The fields which you can use to filter the results. Format of the query string parameter:\n```\n?filter=<filter name> <operator> <value>\n```\nFilter name | Description | Data type | Example\n:--- | --- | --- | ---\n\nFor more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).\n",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Your request succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ComputerDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error: Your request failed due to an internal error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "sam.computer.r"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Computers"
        ],
        "summary": "Delete computer",
        "description": "Removes the given computer.",
        "operationId": "deleteComputer",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_number",
            "in": "query",
            "description": "The page number.",
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1.0
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The maximum number of items in the response.",
            "schema": {
              "type": "integer",
              "default": 100,
              "minimum": 1.0
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "The fields which you can use to filter the results. Format of the query string parameter:\n```\n?filter=<filter name> <operator> <value>\n```\nFilter name | Description | Data type | Example\n:--- | --- | --- | ---\n\nFor more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).\n",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Your request succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteComputersResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error: Your request failed due to an internal error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Not Allowed - The operation you requested is known, but not currently supported.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "sam.computer.d"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Computers"
        ],
        "summary": "Replace computer",
        "description": "Update computer.",
        "operationId": "replaceComputer",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Your request succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Not Allowed - The operation you requested is known, but not currently supported.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error: Your request failed due to an internal error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "sam.computer.u"
            ]
          }
        ]
      }
    },
    "/api/sam/estate/v1/computers": {
      "get": {
        "tags": [
          "Computers"
        ],
        "summary": "Get computers collection",
        "description": "Returns a collection of computers.",
        "operationId": "getComputers",
        "parameters": [
          {
            "name": "page_number",
            "in": "query",
            "description": "The page number.",
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1.0
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The maximum number of items in the response.",
            "schema": {
              "type": "integer",
              "default": 100,
              "minimum": 1.0
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "The fields which you can use to filter the results. Format of the query string parameter:\n```\n?filter=<filter name> <operator> <value>\n```\nFilter name | Description | Data type | Example\n:--- | --- | --- | ---\n\nFor more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).\n",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Your request succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilteredResponseWithLinksOfComputer"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error: Your request failed due to an internal error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "sam.computer.r"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Computers"
        ],
        "summary": "Delete computers",
        "description": "Removes computers for a given ids.",
        "operationId": "deleteComputers",
        "parameters": [
          {
            "name": "page_number",
            "in": "query",
            "description": "The page number.",
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1.0
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The maximum number of items in the response.",
            "schema": {
              "type": "integer",
              "default": 100,
              "minimum": 1.0
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "The fields which you can use to filter the results. Format of the query string parameter:\n```\n?filter=<filter name> <operator> <value>\n```\nFilter name | Description | Data type | Example\n:--- | --- | --- | ---\n\nFor more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).\n",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Your request succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResponseOfDeleteComputersResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error: Your request failed due to an internal error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Not Allowed - The operation you requested is known, but not currently supported.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "sam.computer.d"
            ]
          }
        ]
      }
    },
    "/api/sam/estate/v1/computers/{id}/archive": {
      "patch": {
        "tags": [
          "Computers"
        ],
        "summary": "Archive computer",
        "description": "Archive single computer.",
        "operationId": "archiveComputer",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The unique ID of the computer.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Your request succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Not Allowed - The operation you requested is known, but not currently supported.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error: Your request failed due to an internal error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "sam.computer.u"
            ]
          }
        ]
      }
    },
    "/api/sam/estate/v1/computers/archive": {
      "patch": {
        "tags": [
          "Computers"
        ],
        "summary": "Archive computers",
        "description": "Archive multiple computers.",
        "operationId": "archiveComputers",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ArchiveComputersRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK: Your request succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Not Allowed - The operation you requested is known, but not currently supported.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error: Your request failed due to an internal error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "sam.computer.u"
            ]
          }
        ]
      }
    },
    "/api/sam/estate/v1/computers/{id}/environment-variables": {
      "get": {
        "tags": [
          "Computer environment variables"
        ],
        "summary": "Get computer's environment variables",
        "description": "Returns a collection of environment variable for a given computer.",
        "operationId": "getEnvironmentVariablesForComputer",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The unique ID of the computer.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_number",
            "in": "query",
            "description": "The page number.",
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1.0
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The maximum number of items in the response.",
            "schema": {
              "type": "integer",
              "default": 100,
              "minimum": 1.0
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "The fields which you can use to filter the results. Format of the query string parameter:\n```\n?filter=<filter name> <operator> <value>\n```\nFilter name | Description | Data type | Example\n:--- | --- | --- | ---\n\nFor more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).\n",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Your request succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilteredResponseWithLinksOfComputerEnvironmentVariables"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error: Your request failed due to an internal error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "sam.computer.r"
            ]
          }
        ]
      }
    },
    "/api/sam/estate/v1/computers-environment-variables": {
      "get": {
        "tags": [
          "Computer environment variables"
        ],
        "summary": "Get computer environment variables",
        "description": "Returns a collection of computer environment variables.",
        "operationId": "getComputerEnvironmentVariables",
        "parameters": [
          {
            "name": "page_number",
            "in": "query",
            "description": "The page number.",
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1.0
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The maximum number of items in the response.",
            "schema": {
              "type": "integer",
              "default": 100,
              "minimum": 1.0
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "The fields which you can use to filter the results. Format of the query string parameter:\n```\n?filter=<filter name> <operator> <value>\n```\nFilter name | Description | Data type | Example\n:--- | --- | --- | ---\n\nFor more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).\n",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Your request succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilteredResponseWithLinksOfComputerEnvironmentVariables"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error: Your request failed due to an internal error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "sam.computer.r"
            ]
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "PaginationResponse": {
        "type": "object",
        "description": "Generic response class for the pagination part.\nProperties are annotated using DataMemberAttribute so that we're aligned with REST style guide regarding the json payload.",
        "additionalProperties": false,
        "required": [
          "page_size",
          "page_number"
        ],
        "properties": {
          "page_size": {
            "type": "integer",
            "description": "The page size you requested.",
            "format": "int32",
            "example": 25
          },
          "page_number": {
            "type": "integer",
            "description": "The page number you requested.",
            "format": "int32",
            "example": 1
          },
          "total_pages": {
            "type": "integer",
            "description": "The total number of pages.",
            "format": "int32",
            "nullable": true,
            "example": 10
          },
          "total_items": {
            "type": "integer",
            "description": "The total number of items.",
            "format": "int32",
            "nullable": true,
            "example": 120
          }
        }
      },
      "Link": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "href": {
            "type": "string",
            "nullable": true
          },
          "rel": {
            "type": "string",
            "nullable": true
          },
          "method": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "BaseResponse": {
        "type": "object",
        "description": "Base response class.",
        "x-abstract": true,
        "additionalProperties": false,
        "required": [
          "_links"
        ],
        "properties": {
          "_links": {
            "type": "array",
            "description": "A collection of links to related resources.",
            "items": {
              "$ref": "#/components/schemas/Link"
            }
          }
        }
      },
      "ComputerApplicationMetering": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          },
          {
            "type": "object",
            "description": "Response class for Computer application metric tracking.",
            "additionalProperties": false,
            "required": [
              "computerId",
              "metricId",
              "applicationId"
            ],
            "properties": {
              "computerId": {
                "type": "string",
                "description": "The unique ID of the computer.",
                "format": "guid",
                "minLength": 1,
                "example": "a2c8ef89-cb18-49ea-b3c0-122d40fc0ba7"
              },
              "metricId": {
                "type": "string",
                "description": "The unique ID of the metric used.",
                "format": "guid",
                "minLength": 1,
                "example": "ca90b444-dcd0-43ce-9190-0e51af24613c"
              },
              "applicationId": {
                "type": "string",
                "description": "The unique ID of the application.",
                "format": "guid",
                "minLength": 1,
                "example": "6f1cbfb3-ecc2-4e1b-8376-537ace3503c2"
              },
              "initialRequirement": {
                "type": "integer",
                "description": "The initial requirement of the metric.",
                "format": "int32",
                "example": 5
              },
              "includedInBundle": {
                "type": "integer",
                "description": "The number of applications included in the bundle.",
                "format": "int32",
                "example": 5
              },
              "outsideMetricPeriod": {
                "type": "integer",
                "description": "The number of computers outside of the metric period.",
                "format": "int32",
                "example": 5
              },
              "secondaryUseRightsDesktopLaptop": {
                "type": "integer",
                "description": "The number of computers with secondary use rights for a desktop or laptop.",
                "format": "int32",
                "example": 5
              },
              "secondaryUseRightsDevice": {
                "type": "integer",
                "description": "The number of computers with secondary use rights for a device.",
                "format": "int32",
                "example": 5
              },
              "extendedCoverageForDcc": {
                "type": "integer",
                "description": "The number of computers with extended coverage for DCC.",
                "format": "int32",
                "example": 5
              },
              "extendedCoverageForHost": {
                "type": "integer",
                "description": "The number of computers with extended coverage for host.",
                "format": "int32",
                "example": 5
              },
              "multipleVersionEdition": {
                "type": "integer",
                "description": "The number of computers with multiple version editions.",
                "format": "int32",
                "example": 5
              },
              "virtualDesktopInfrastructure": {
                "type": "integer",
                "description": "The number of computers with virtual desktop infrastructure.",
                "format": "int32",
                "example": 5
              },
              "minimumRequirement": {
                "type": "integer",
                "description": "The minimum requirement for the metric.",
                "format": "int32",
                "example": 5
              },
              "coreFactor": {
                "type": "integer",
                "description": "The core factor for the metric.",
                "format": "int32",
                "example": 5
              },
              "physicalHost": {
                "type": "integer",
                "description": "The physical host for the metric.",
                "format": "int32",
                "example": 5
              },
              "requirement": {
                "type": "integer",
                "description": "The requirement for the metric.",
                "format": "int32",
                "example": 5
              },
              "computerAppExclusions": {
                "type": "integer",
                "description": "The number of computers which have application exclusions.",
                "format": "int32",
                "example": 5
              },
              "windowsServer": {
                "type": "integer",
                "description": "The number of computers which are Windows servers.",
                "format": "int32",
                "example": 5
              },
              "virtualMachine": {
                "type": "integer",
                "description": "The number of computers which are virtual machines.",
                "format": "int32",
                "example": 5
              },
              "unknownPhysicalHost": {
                "type": "integer",
                "description": "The number of computers with an unknown physical host.",
                "format": "int32",
                "example": 5
              },
              "manuallyExcluded": {
                "type": "integer",
                "description": "The number of computers manually excluded.",
                "format": "int32",
                "example": 5
              },
              "requirementMoved": {
                "type": "integer",
                "description": "The number of computers with the requirements moved.",
                "format": "int32",
                "example": 5
              },
              "windowsServerFlag": {
                "type": "integer",
                "description": "The number of computers with the Windows server flag.",
                "format": "int32",
                "example": 5
              },
              "sqlServer": {
                "type": "integer",
                "description": "The number of computers with the SQL server flag.",
                "format": "int32",
                "example": 5
              }
            }
          }
        ]
      },
      "FilteredResponseWithLinksOfComputerApplicationMetering": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          },
          {
            "type": "object",
            "description": "Generic response class supporting filtering and including links.",
            "additionalProperties": false,
            "required": [
              "items",
              "pagination"
            ],
            "properties": {
              "items": {
                "type": "array",
                "description": "A collection of items returned in the response.",
                "items": {
                  "$ref": "#/components/schemas/ComputerApplicationMetering"
                }
              },
              "pagination": {
                "description": "The pagination details.",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/PaginationResponse"
                  }
                ]
              }
            }
          }
        ]
      },
      "ErrorContent": {
        "type": "object",
        "description": "Details of error.",
        "additionalProperties": false,
        "properties": {
          "code": {
            "type": "integer",
            "description": "Http error code.",
            "format": "int32",
            "example": 400
          },
          "message": {
            "type": "string",
            "description": "Additional error message.",
            "nullable": true
          }
        }
      },
      "ErrorResponse": {
        "type": "object",
        "description": "Response representing error.",
        "additionalProperties": false,
        "required": [
          "error"
        ],
        "properties": {
          "error": {
            "description": "The error details.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ErrorContent"
              }
            ]
          }
        }
      },
      "ComputerApplications": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          },
          {
            "type": "object",
            "description": "Response class for computer applications.",
            "additionalProperties": false,
            "properties": {
              "computerId": {
                "type": "string",
                "description": "The unique ID of the computer.",
                "format": "guid",
                "example": "29ce62ac-d575-4ff1-90e8-b84eaed0f5d8"
              },
              "applicationId": {
                "type": "string",
                "description": "The unique ID of the application.",
                "format": "guid",
                "example": "29ce62ac-d575-4ff1-90e8-b84eaed0f5d8"
              },
              "bundleApplicationId": {
                "type": "string",
                "description": "The unique ID of the application bundle, or product suite, for a given application.",
                "format": "guid",
                "nullable": true,
                "example": "29ce62ac-d575-4ff1-90e8-b84eaed0f5d8"
              },
              "firstDiscovered": {
                "type": "string",
                "description": "The date when the application was first discovered on the computer.",
                "format": "date-time",
                "nullable": true,
                "example": "2024-03-24T12:52:20Z"
              },
              "lastUsed": {
                "type": "string",
                "description": "The date when the application was last used on the computer.",
                "format": "date-time",
                "nullable": true,
                "example": "2024-03-24T12:52:20Z"
              },
              "usedCount": {
                "type": "integer",
                "description": "The number of times the application was used on the computer.",
                "format": "int32",
                "example": 10
              },
              "averageUsedTime": {
                "type": "string",
                "description": "The average time the application was used in hours.",
                "nullable": true,
                "example": "01:24"
              },
              "isVirtual": {
                "type": "boolean",
                "description": "```true``` if the application is virtual; otherwise, ```false```.",
                "nullable": true,
                "example": true
              },
              "isInstalled": {
                "type": "boolean",
                "description": "```true``` if the application is installed on the computer; otherwise, ```false```.",
                "nullable": true,
                "example": true
              },
              "bundleUsagePercentage": {
                "type": "integer",
                "description": "How much of the application bundle is used in percentage.",
                "format": "int32",
                "nullable": true,
                "example": 20
              },
              "unbundled": {
                "type": "boolean",
                "description": "```true``` if the application is unbundled; otherwise, ```false```.",
                "example": true
              }
            }
          }
        ]
      },
      "FilteredResponseWithLinksOfComputerApplications": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          },
          {
            "type": "object",
            "description": "Generic response class supporting filtering and including links.",
            "additionalProperties": false,
            "required": [
              "items",
              "pagination"
            ],
            "properties": {
              "items": {
                "type": "array",
                "description": "A collection of items returned in the response.",
                "items": {
                  "$ref": "#/components/schemas/ComputerApplications"
                }
              },
              "pagination": {
                "description": "The pagination details.",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/PaginationResponse"
                  }
                ]
              }
            }
          }
        ]
      },
      "ComputerApplicationsDetails": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          },
          {
            "type": "object",
            "description": "Response class for computer application details.",
            "additionalProperties": false,
            "properties": {
              "computerId": {
                "type": "string",
                "description": "The unique ID of the computer.",
                "format": "guid",
                "example": "c1d617ff-2104-411c-9c20-682017a9fefd"
              },
              "applicationId": {
                "type": "string",
                "description": "The unique ID of the application.",
                "format": "guid",
                "example": "c1d617ff-2104-411c-9c20-682017a9fefd"
              },
              "bundleApplicationId": {
                "type": "string",
                "description": "The unique ID of the application bundle, or product suite, for a given application.",
                "format": "guid",
                "nullable": true,
                "example": "c1d617ff-2104-411c-9c20-682017a9fefd"
              },
              "firstDiscovered": {
                "type": "string",
                "description": "The date when the application was first discovered on the computer.",
                "format": "date-time",
                "nullable": true,
                "example": "2024-03-24T12:52:20Z"
              },
              "firstUsed": {
                "type": "string",
                "description": "The date when the application was first used on the computer.",
                "format": "date-time",
                "nullable": true,
                "example": "2024-03-24T12:52:20Z"
              },
              "lastUsed": {
                "type": "string",
                "description": "The date when the application was last used on the computer.",
                "format": "date-time",
                "nullable": true,
                "example": "2024-03-24T12:52:20Z"
              },
              "usedCount": {
                "type": "integer",
                "description": "The number of times the application was used on the computer.",
                "format": "int32",
                "example": 10
              },
              "usedUser": {
                "type": "integer",
                "description": "The number of users who used the application on the computer.",
                "format": "int32",
                "example": 10
              },
              "usedMinutes": {
                "type": "integer",
                "description": "The number of minutes the application was used on the computer.",
                "format": "int64",
                "example": 10
              },
              "usedDays": {
                "type": "integer",
                "description": "The number of days the application was used on the computer.",
                "format": "int32",
                "nullable": true,
                "example": 10
              },
              "isInstalled": {
                "type": "boolean",
                "description": "```true``` if the application is installed on the computer; otherwise, ```false```.",
                "nullable": true,
                "example": true
              },
              "isOEM": {
                "type": "boolean",
                "description": "```true``` if the application is OEM; otherwise, ```false```.",
                "nullable": true,
                "example": true
              },
              "isMSDN": {
                "type": "boolean",
                "description": "```true``` if the application is MSDN; otherwise, ```false```.",
                "nullable": true,
                "example": true
              },
              "isVirtual": {
                "type": "boolean",
                "description": "```true``` if the application is virtual; otherwise, ```false```.",
                "nullable": true,
                "example": true
              },
              "isOverridden": {
                "type": "boolean",
                "description": "```true``` if the application is overridden; otherwise, ```false```.",
                "nullable": true,
                "example": true
              },
              "packageGUID": {
                "type": "string",
                "description": "The unique ID of the application package.",
                "format": "guid",
                "nullable": true,
                "example": "640b16bb-447f-430f-87ee-49bfe940e308"
              },
              "isRecognized": {
                "type": "boolean",
                "description": "```true``` if the application is recognized; otherwise, ```false```.",
                "nullable": true,
                "example": true
              },
              "isRegistry": {
                "type": "boolean",
                "description": "```true``` if the application is in the registry; otherwise, ```false```.",
                "nullable": true,
                "example": true
              },
              "averageUsedTime": {
                "type": "string",
                "description": "The average time the application is used in hours.",
                "nullable": true,
                "example": "01:24"
              },
              "unbundled": {
                "type": "boolean",
                "description": "```true``` if the application is licenced individualy; otherwise, ```false```.",
                "example": true
              }
            }
          }
        ]
      },
      "ComputerApplicationUsage": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          },
          {
            "type": "object",
            "description": "Response for computer application usage.",
            "additionalProperties": false,
            "properties": {
              "computerId": {
                "type": "string",
                "description": "The unique ID of the computer.",
                "format": "guid",
                "example": "743ba97e-3425-4f46-99b0-9a9c791ceb3a"
              },
              "userId": {
                "type": "string",
                "description": "The unique ID of the user.",
                "format": "guid",
                "example": "743ba97e-3425-4f46-99b0-9a9c791ceb3a"
              },
              "bundleApplicationId": {
                "type": "string",
                "description": "The unique ID of the application bundle, or product suite, for a given application.",
                "format": "guid",
                "nullable": true,
                "example": "743ba97e-3425-4f46-99b0-9a9c791ceb3a"
              },
              "applicationId": {
                "type": "string",
                "description": "The unique ID of the application.",
                "format": "guid",
                "example": "743ba97e-3425-4f46-99b0-9a9c791ceb3a"
              },
              "firstUsed": {
                "type": "string",
                "description": "The date when the application was first used on the computer.",
                "format": "date-time",
                "nullable": true,
                "example": "2024-03-24T12:52:20Z"
              },
              "lastUsedDate": {
                "type": "string",
                "description": "The date when the application was last used on the computer.",
                "nullable": true,
                "example": "2024-03-24T12:52:20Z"
              },
              "usedCount": {
                "type": "integer",
                "description": "The number of times the application was used on the computer.",
                "format": "int32",
                "example": 10
              },
              "usedMinutes": {
                "type": "integer",
                "description": "The number of minutes the application was used on the computer.",
                "format": "int64",
                "example": 10
              },
              "usedDays": {
                "type": "integer",
                "description": "The number of days the application was used on the computer.",
                "format": "int32",
                "nullable": true,
                "example": 10
              },
              "isInstalled": {
                "type": "boolean",
                "description": "```true``` if the application is installed on the computer; otherwise, ```false```.",
                "nullable": true,
                "example": true
              }
            }
          }
        ]
      },
      "FilteredResponseWithLinksOfComputerApplicationUsage": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          },
          {
            "type": "object",
            "description": "Generic response class supporting filtering and including links.",
            "additionalProperties": false,
            "required": [
              "items",
              "pagination"
            ],
            "properties": {
              "items": {
                "type": "array",
                "description": "A collection of items returned in the response.",
                "items": {
                  "$ref": "#/components/schemas/ComputerApplicationUsage"
                }
              },
              "pagination": {
                "description": "The pagination details.",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/PaginationResponse"
                  }
                ]
              }
            }
          }
        ]
      },
      "UserApplicationUsage": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          },
          {
            "type": "object",
            "description": "Represents usage of an application by a specific user.",
            "additionalProperties": false,
            "properties": {
              "userId": {
                "type": "string",
                "description": "The unique ID of the user.",
                "format": "guid",
                "example": "29ce62ac-d575-4ff1-90e8-b84eaed0f5d8"
              },
              "applicationId": {
                "type": "string",
                "description": "The unique ID of the application.",
                "format": "guid",
                "example": "29ce62ac-d575-4ff1-90e8-b84eaed0f5d8"
              },
              "bundleApplicationId": {
                "type": "string",
                "description": "The unique ID of the application bundle, or product suite, for a given application.",
                "format": "guid",
                "nullable": true,
                "example": "29ce62ac-d575-4ff1-90e8-b84eaed0f5d8"
              },
              "lastUsedDate": {
                "type": "string",
                "description": "The application last used date on the computer as a string with no time component.",
                "nullable": true,
                "example": "2024-03-22"
              }
            }
          }
        ]
      },
      "FilteredResponseWithLinksOfUserApplicationUsage": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          },
          {
            "type": "object",
            "description": "Generic response class supporting filtering and including links.",
            "additionalProperties": false,
            "required": [
              "items",
              "pagination"
            ],
            "properties": {
              "items": {
                "type": "array",
                "description": "A collection of items returned in the response.",
                "items": {
                  "$ref": "#/components/schemas/UserApplicationUsage"
                }
              },
              "pagination": {
                "description": "The pagination details.",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/PaginationResponse"
                  }
                ]
              }
            }
          }
        ]
      },
      "ComputerApplicationUsageSummary": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          },
          {
            "type": "object",
            "description": "Response class for application usage summary.",
            "additionalProperties": false,
            "properties": {
              "applicationId": {
                "type": "string",
                "description": "The unique ID of the application.",
                "format": "guid",
                "example": "1ce2bdde-b68f-429d-aff5-bad93f544689"
              },
              "computers": {
                "type": "integer",
                "description": "The number of computers on which the application was used.",
                "format": "int32",
                "example": 10
              },
              "users": {
                "type": "integer",
                "description": "The number of users who used the application.",
                "format": "int32",
                "example": 10
              },
              "installations": {
                "type": "integer",
                "description": "The number of installations of the application.",
                "format": "int32",
                "example": 10
              }
            }
          }
        ]
      },
      "FilteredResponseWithLinksOfComputerApplicationUsageSummary": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          },
          {
            "type": "object",
            "description": "Generic response class supporting filtering and including links.",
            "additionalProperties": false,
            "required": [
              "items",
              "pagination"
            ],
            "properties": {
              "items": {
                "type": "array",
                "description": "A collection of items returned in the response.",
                "items": {
                  "$ref": "#/components/schemas/ComputerApplicationUsageSummary"
                }
              },
              "pagination": {
                "description": "The pagination details.",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/PaginationResponse"
                  }
                ]
              }
            }
          }
        ]
      },
      "ComputerContract": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          },
          {
            "type": "object",
            "description": "Response representing connection between computer and contract.",
            "additionalProperties": false,
            "properties": {
              "computerId": {
                "type": "string",
                "description": "The unique ID of the computer.",
                "format": "guid",
                "example": "95c1d359-8d89-4a51-a8ed-444e0ab01f71"
              },
              "contractId": {
                "type": "string",
                "description": "The unique ID of the contract.",
                "format": "guid",
                "example": "95c1d359-8d89-4a51-a8ed-444e0ab01f71"
              }
            }
          }
        ]
      },
      "FilteredResponseWithLinksOfComputerContract": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          },
          {
            "type": "object",
            "description": "Generic response class supporting filtering and including links.",
            "additionalProperties": false,
            "required": [
              "items",
              "pagination"
            ],
            "properties": {
              "items": {
                "type": "array",
                "description": "A collection of items returned in the response.",
                "items": {
                  "$ref": "#/components/schemas/ComputerContract"
                }
              },
              "pagination": {
                "description": "The pagination details.",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/PaginationResponse"
                  }
                ]
              }
            }
          }
        ]
      },
      "ComputerCosts": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          },
          {
            "type": "object",
            "description": "Response representing costs associated with a computer.",
            "additionalProperties": false,
            "properties": {
              "computerId": {
                "type": "string",
                "description": "The unique ID of the computer.",
                "format": "guid",
                "example": "4f2403da-3ab5-48f8-9114-73304cfeb017"
              },
              "vendor": {
                "type": "string",
                "description": "The vendor of the computer.",
                "nullable": true,
                "example": "Dell Inc."
              },
              "purchaseDate": {
                "type": "string",
                "description": "The date on which the computer was purchased.",
                "format": "date-time",
                "nullable": true,
                "example": "2024-03-24T12:52:20Z"
              },
              "purchasePrice": {
                "type": "number",
                "description": "The price for which the computer was purchased.",
                "format": "decimal",
                "nullable": true,
                "example": 2521.32
              },
              "purchaseValueBase": {
                "type": "number",
                "description": "The value base of the purchase of the computer.",
                "format": "decimal",
                "nullable": true,
                "example": 2500.32
              },
              "purchaseCurrency": {
                "type": "string",
                "description": "The currency in which the computer was purchased.",
                "nullable": true,
                "example": "EUR"
              },
              "invoiceReference": {
                "type": "string",
                "description": "The invoice reference for the purchase of the computer.",
                "nullable": true,
                "example": "2024/03/63729P"
              },
              "totalCostOfInstalledApplications": {
                "type": "number",
                "description": "The total cost of all applications installed on the computer.",
                "format": "decimal",
                "nullable": true,
                "example": 1452.28
              },
              "totalCost": {
                "type": "number",
                "description": "The total cost of the computer and installed applications.",
                "format": "decimal",
                "nullable": true,
                "example": 3973.6
              }
            }
          }
        ]
      },
      "ComputerDisplayAdapter": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          },
          {
            "type": "object",
            "description": "Response representing display adapter of a computer.",
            "additionalProperties": false,
            "properties": {
              "computerId": {
                "type": "string",
                "description": "The unique ID of the computer.",
                "format": "guid",
                "example": "66a6b2b7-2ff1-403f-add3-60ed14a0233a"
              },
              "name": {
                "type": "string",
                "description": "The name of the display adapter.",
                "nullable": true,
                "example": "NVIDIA T1200 Laptop GPU"
              },
              "currentResolution": {
                "type": "string",
                "description": "The current resolution of the display adapter of the computer.",
                "nullable": true,
                "example": "1920 x 1200"
              },
              "maxResolution": {
                "type": "string",
                "description": "The maximum resolution of the display adapter of the computer.",
                "nullable": true,
                "example": "2560x1440"
              },
              "isUpdated": {
                "type": "boolean",
                "description": "```true``` if the display adapter is updated; otherwise, ```false```.",
                "example": true
              }
            }
          }
        ]
      },
      "ComputerDrive": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          },
          {
            "type": "object",
            "description": "Response representing computer storage.",
            "additionalProperties": false,
            "properties": {
              "computerId": {
                "type": "string",
                "description": "The unique ID of the computer.",
                "format": "guid",
                "example": "6b8f2c7a-101e-4187-b07e-ebb4b815ef28"
              },
              "name": {
                "type": "string",
                "description": "The name of the drive of the computer.",
                "nullable": true,
                "example": "Virtual HD ATA Device"
              },
              "diskSizeMB": {
                "type": "integer",
                "description": "The size of the drive of the computer in megabytes.",
                "format": "int32",
                "example": 102398
              },
              "isUpdated": {
                "type": "boolean",
                "description": "```true``` if the drive of the computer is updated; otherwise, ```false```.",
                "example": true
              }
            }
          }
        ]
      },
      "FilteredResponseWithLinksOfComputerDrive": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          },
          {
            "type": "object",
            "description": "Generic response class supporting filtering and including links.",
            "additionalProperties": false,
            "required": [
              "items",
              "pagination"
            ],
            "properties": {
              "items": {
                "type": "array",
                "description": "A collection of items returned in the response.",
                "items": {
                  "$ref": "#/components/schemas/ComputerDrive"
                }
              },
              "pagination": {
                "description": "The pagination details.",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/PaginationResponse"
                  }
                ]
              }
            }
          }
        ]
      },
      "ComputerHardwareDetails": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          },
          {
            "type": "object",
            "description": "Response representing details of hardware of a computer.",
            "additionalProperties": false,
            "properties": {
              "computerId": {
                "type": "string",
                "description": "The unique ID of the computer.",
                "format": "guid",
                "example": "990b4de8-f11f-4904-9e86-d8a435835574"
              },
              "processorCount": {
                "type": "integer",
                "description": "The number of processors in the computer.",
                "format": "int32",
                "nullable": true,
                "example": 2
              },
              "coreCount": {
                "type": "integer",
                "description": "The number of cores in the computer.",
                "format": "int32",
                "nullable": true,
                "example": 8
              },
              "processorType": {
                "type": "string",
                "description": "The type of processors in the computer.",
                "nullable": true,
                "example": "11th Gen Intel Core i7-1185G7 @ 3.00GHz (3.00 GHz)"
              },
              "processorSpeed": {
                "type": "integer",
                "description": "The speed of the processor in the computer in MHz.",
                "format": "int32",
                "nullable": true,
                "example": 2995
              },
              "memorySlots": {
                "type": "integer",
                "description": "The total number of memory slots in the computer.",
                "format": "int32",
                "nullable": true,
                "example": 8
              },
              "memorySlotsAvailable": {
                "type": "integer",
                "description": "The number of available memory slots in the computer.",
                "format": "int32",
                "nullable": true,
                "example": 2
              },
              "physicalMemory": {
                "type": "integer",
                "description": "The amount of physical memory in the computer.",
                "format": "int32",
                "nullable": true,
                "example": 16384
              },
              "systemDiskSpace": {
                "type": "integer",
                "description": "The total amount of system disk space in the computer in MB.",
                "format": "int64",
                "nullable": true,
                "example": 957534
              },
              "systemDiskSpaceAvailable": {
                "type": "integer",
                "description": "The amount of available system disk space in the computer in MB.",
                "format": "int64",
                "nullable": true,
                "example": 552150
              },
              "totalDiskSpace": {
                "type": "integer",
                "description": "The total amount of total disk space in the computer in MB.",
                "format": "int64",
                "nullable": true,
                "example": 957534
              },
              "totalDiskSpaceAvailable": {
                "type": "integer",
                "description": "The amount of available disk space in the computer in MB.",
                "format": "int64",
                "nullable": true,
                "example": 552150
              },
              "totalDiskSpaceUsed": {
                "type": "integer",
                "description": "The total amount of disk space used in the computer in MB.",
                "format": "int64",
                "nullable": true,
                "example": 405384
              },
              "socketCount": {
                "type": "integer",
                "description": "The number of sockets in the computer.",
                "format": "byte",
                "nullable": true,
                "example": 2
              },
              "isSocketCountManualOverrideEnabled": {
                "type": "boolean",
                "description": "```true``` if the socket count manual override of the computer is enabled; otherwise, ```false```.",
                "example": true
              },
              "chipModulesPerProcessor": {
                "type": "integer",
                "description": "The number of chip modules per processor.",
                "format": "byte",
                "nullable": true,
                "example": 2
              },
              "processorManufacturer": {
                "type": "string",
                "description": "The manufacturer of the processors of the computer.",
                "nullable": true,
                "example": "Intel"
              },
              "logicalProcessorCount": {
                "type": "integer",
                "description": "The number of logical processors in the computer.",
                "format": "int32",
                "nullable": true,
                "example": 12
              }
            }
          }
        ]
      },
      "ComputerLogicalDisk": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          },
          {
            "type": "object",
            "description": "Response representing a logical disks of a computer.",
            "additionalProperties": false,
            "properties": {
              "computerId": {
                "type": "string",
                "description": "The unique ID of the computer.",
                "format": "guid",
                "example": "14783145-7ead-4f6a-8f56-b7c3969bfc16"
              },
              "name": {
                "type": "string",
                "description": "The name of the logical disk.",
                "nullable": true,
                "example": "C:"
              },
              "volumeName": {
                "type": "string",
                "description": "The name of the volume of the logical disk.",
                "nullable": true,
                "example": "SYSTEM"
              },
              "isSystemDisk": {
                "type": "boolean",
                "description": "```true``` if the logical disk is a system disk; otherwise, ```false```.",
                "example": true
              },
              "diskSizeMB": {
                "type": "integer",
                "description": "The size of the logical disk in MB.",
                "format": "int32",
                "example": 61087
              },
              "freeSpaceMB": {
                "type": "integer",
                "description": "The free space on the logical disk in MB.",
                "format": "int32",
                "example": 6243
              },
              "isUpdated": {
                "type": "boolean",
                "description": "```true``` if the logical disk is updated; otherwise, ```false```.",
                "example": true
              }
            }
          }
        ]
      },
      "FilteredResponseWithLinksOfComputerLogicalDisk": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          },
          {
            "type": "object",
            "description": "Generic response class supporting filtering and including links.",
            "additionalProperties": false,
            "required": [
              "items",
              "pagination"
            ],
            "properties": {
              "items": {
                "type": "array",
                "description": "A collection of items returned in the response.",
                "items": {
                  "$ref": "#/components/schemas/ComputerLogicalDisk"
                }
              },
              "pagination": {
                "description": "The pagination details.",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/PaginationResponse"
                  }
                ]
              }
            }
          }
        ]
      },
      "ComputerLogonHistoryDetails": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          },
          {
            "type": "object",
            "description": "Response representing computer logon history for a given computer and user.",
            "additionalProperties": false,
            "properties": {
              "computerId": {
                "type": "string",
                "description": "The unique ID of the computer.",
                "format": "guid",
                "example": "0d779524-e2cf-4636-a701-65ce7c3f5763"
              },
              "userId": {
                "type": "string",
                "description": "The unique ID of the user.",
                "format": "guid",
                "example": "c5a87d81-b035-4b38-88f8-13fabd790764"
              },
              "lastLogon": {
                "type": "string",
                "description": "The last logon of the given user on the given computer.",
                "format": "date-time",
                "example": "2024-03-24T12:52:20Z"
              },
              "logonCount": {
                "type": "integer",
                "description": "The logon count for a user on one computer.",
                "format": "int32",
                "example": 10
              }
            }
          }
        ]
      },
      "ComputerLogonHistory": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ComputerLogonHistoryDetails"
          },
          {
            "type": "object",
            "description": "Response representing computer logon history for a given computer and user.",
            "additionalProperties": false
          }
        ]
      },
      "FilteredResponseWithLinksOfComputerLogonHistory": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          },
          {
            "type": "object",
            "description": "Generic response class supporting filtering and including links.",
            "additionalProperties": false,
            "required": [
              "items",
              "pagination"
            ],
            "properties": {
              "items": {
                "type": "array",
                "description": "A collection of items returned in the response.",
                "items": {
                  "$ref": "#/components/schemas/ComputerLogonHistory"
                }
              },
              "pagination": {
                "description": "The pagination details.",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/PaginationResponse"
                  }
                ]
              }
            }
          }
        ]
      },
      "ComputerMonitor": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          },
          {
            "type": "object",
            "description": "Response representing a monitor of a computer.",
            "additionalProperties": false,
            "properties": {
              "computerId": {
                "type": "string",
                "description": "The unique ID of the computer.",
                "format": "guid",
                "example": "636d9b38-1afd-4b96-8998-01d475cc0f36"
              },
              "name": {
                "type": "string",
                "description": "The name of the computer monitor.",
                "nullable": true,
                "example": "Intel UHD Graphics"
              },
              "maxResolution": {
                "type": "string",
                "description": "The max resolution of the monitor.",
                "nullable": true,
                "example": "2560 x 1600"
              },
              "isUpdated": {
                "type": "boolean",
                "description": "```true``` if the computer monitor is updated; otherwise, ```false```."
              }
            }
          }
        ]
      },
      "ComputerNetworkAdapters": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          },
          {
            "type": "object",
            "description": "Response representing network adapter of a computer.",
            "additionalProperties": false,
            "properties": {
              "computerId": {
                "type": "string",
                "description": "The unique ID of the computer.",
                "format": "guid",
                "example": "62991e94-b8c3-4227-a7cb-a853f2e6e4cc"
              },
              "name": {
                "type": "string",
                "description": "The name of the computer network adapter.",
                "nullable": true,
                "example": "Intel 82574L Gigabit Network Connection"
              },
              "ipAddress": {
                "type": "string",
                "description": "The IP address of the network adapter.",
                "nullable": true,
                "example": "10.20.19.130"
              },
              "macAddress": {
                "type": "string",
                "description": "The Mac address of the network adapter.",
                "nullable": true,
                "example": "00-50-56-8D-5D-B8"
              }
            }
          }
        ]
      },
      "FilteredResponseWithLinksOfComputerNetworkAdapters": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          },
          {
            "type": "object",
            "description": "Generic response class supporting filtering and including links.",
            "additionalProperties": false,
            "required": [
              "items",
              "pagination"
            ],
            "properties": {
              "items": {
                "type": "array",
                "description": "A collection of items returned in the response.",
                "items": {
                  "$ref": "#/components/schemas/ComputerNetworkAdapters"
                }
              },
              "pagination": {
                "description": "The pagination details.",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/PaginationResponse"
                  }
                ]
              }
            }
          }
        ]
      },
      "ComputerProcessor": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          },
          {
            "type": "object",
            "description": "Response representing processor of a computer.",
            "additionalProperties": false,
            "properties": {
              "computerId": {
                "type": "string",
                "description": "The unique ID of the computer.",
                "format": "guid",
                "example": "94cdfe57-81e2-4af6-99f4-44d15b3b6fb6"
              },
              "processorCount": {
                "type": "integer",
                "description": "The number of processors in the computer.",
                "format": "int32",
                "example": 2
              },
              "coreCount": {
                "type": "integer",
                "description": "The number of cores in the computer.",
                "format": "int32",
                "example": 8
              },
              "processorType": {
                "type": "string",
                "description": "The type of processors in the computer.",
                "nullable": true,
                "example": "11th Gen Intel Core i7-1185G7 @ 3.00GHz (3.00 GHz)"
              },
              "processorSpeed": {
                "type": "integer",
                "description": "The speed of the processor in the computer in MHz.",
                "format": "int32",
                "example": 2995
              },
              "processorManufacturer": {
                "type": "string",
                "description": "The manufacturer of the processors of the computer.",
                "nullable": true,
                "example": "Intel"
              }
            }
          }
        ]
      },
      "FilteredResponseWithLinksOfComputerProcessor": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          },
          {
            "type": "object",
            "description": "Generic response class supporting filtering and including links.",
            "additionalProperties": false,
            "required": [
              "items",
              "pagination"
            ],
            "properties": {
              "items": {
                "type": "array",
                "description": "A collection of items returned in the response.",
                "items": {
                  "$ref": "#/components/schemas/ComputerProcessor"
                }
              },
              "pagination": {
                "description": "The pagination details.",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/PaginationResponse"
                  }
                ]
              }
            }
          }
        ]
      },
      "ComputerSocketMapDetails": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          },
          {
            "type": "object",
            "description": "Response representing socket map for a computer.",
            "additionalProperties": false,
            "properties": {
              "computerId": {
                "type": "string",
                "description": "The unique ID of the computer.",
                "format": "guid",
                "example": "cf5be788-06be-4496-91b0-bfaa8c239e96"
              },
              "manufacturer": {
                "type": "string",
                "description": "The manufacturer of the sockets in the computer.",
                "nullable": true,
                "example": "Intel"
              },
              "model": {
                "type": "string",
                "description": "The model of the sockets in the computer.",
                "nullable": true,
                "example": "LGA 1151"
              },
              "socketCount": {
                "type": "integer",
                "description": "The number of sockets in the computer.",
                "format": "int32",
                "example": 2
              }
            }
          }
        ]
      },
      "ComputerRegistry": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          },
          {
            "type": "object",
            "description": "Response representing registry content of a computer.",
            "additionalProperties": false,
            "properties": {
              "computerId": {
                "type": "string",
                "description": "The unique ID of the computer.",
                "format": "guid",
                "nullable": true,
                "example": "81a160b4-75cc-4732-8d30-d8d5bd623969"
              },
              "registryKeyName": {
                "type": "string",
                "description": "The name of the registry key on the computer.",
                "nullable": true,
                "example": "HKEY_USERS\\Software\\Adobe\\Adobe Acrobat\\DC\\AVEntitlement"
              },
              "registryValueName": {
                "type": "string",
                "description": "The value name of the record in registry key on the computer.",
                "nullable": true,
                "example": "bAppInitialized"
              },
              "registryValueData": {
                "type": "string",
                "description": "The value data of the record in registry key on the computer.",
                "nullable": true,
                "example": "1"
              }
            }
          }
        ]
      },
      "FilteredResponseWithLinksOfComputerRegistry": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          },
          {
            "type": "object",
            "description": "Generic response class supporting filtering and including links.",
            "additionalProperties": false,
            "required": [
              "items",
              "pagination"
            ],
            "properties": {
              "items": {
                "type": "array",
                "description": "A collection of items returned in the response.",
                "items": {
                  "$ref": "#/components/schemas/ComputerRegistry"
                }
              },
              "pagination": {
                "description": "The pagination details.",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/PaginationResponse"
                  }
                ]
              }
            }
          }
        ]
      },
      "ComputerDetails": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          },
          {
            "type": "object",
            "description": "Response representing details of a computer.",
            "additionalProperties": false,
            "required": [
              "id"
            ],
            "properties": {
              "id": {
                "type": "string",
                "description": "The unique ID of the computer.",
                "format": "guid",
                "minLength": 1,
                "example": "5043cc04-3ef2-4882-a3be-8d08b4f402c7"
              },
              "scanIdentifier": {
                "type": "string",
                "description": "The identifier used by the scan.",
                "nullable": true,
                "example": "MAC-C02GD9DUML7H"
              },
              "hostName": {
                "type": "string",
                "description": "The host name of the computer.",
                "nullable": true,
                "example": "AM21-S42MONITOR"
              },
              "domain": {
                "type": "string",
                "description": "The domain of the computer.",
                "nullable": true,
                "example": "APAC"
              },
              "lastScanDate": {
                "type": "string",
                "description": "The last date that the computer was scanned.",
                "format": "date-time",
                "example": "2024-03-24T12:52:20Z"
              },
              "biosSerialNumber": {
                "type": "string",
                "description": "The BIOS serial number of the computer.",
                "nullable": true,
                "example": "43-01-10-TX"
              },
              "biosVersion": {
                "type": "string",
                "description": "The BIOS version of the computer.",
                "nullable": true,
                "example": "1.26.0"
              },
              "biosDate": {
                "type": "string",
                "description": "The BIOS date of the computer.",
                "format": "date-time",
                "nullable": true,
                "example": "2024-03-24T12:52:20Z"
              },
              "manufacturer": {
                "type": "string",
                "description": "The manufacturer of the computer.",
                "nullable": true,
                "example": "Lenovo"
              },
              "manufacturerWebsite": {
                "type": "string",
                "description": "Website of the computer's manufacturer.",
                "nullable": true,
                "example": "https://www.lenovo.com"
              },
              "model": {
                "type": "string",
                "description": "The model of the computer.",
                "nullable": true,
                "example": "T480s"
              },
              "isPortable": {
                "type": "boolean",
                "description": "```true``` if the computer is portable; otherwise, ```false```.",
                "nullable": true,
                "example": true
              },
              "infoTransferDate": {
                "type": "string",
                "description": "The date of information transfer for the computer.",
                "format": "date-time",
                "example": "2024-03-24T12:52:20Z"
              },
              "clientInstallDate": {
                "type": "string",
                "description": "The date the client was installed on the computer.",
                "format": "date-time",
                "nullable": true,
                "example": "2024-03-24T12:52:20Z"
              },
              "clientVersion": {
                "type": "string",
                "description": "The version of the client on the computer.",
                "nullable": true,
                "example": "6.14.3"
              },
              "clientSiteName": {
                "type": "string",
                "description": "The site name of the client on the computer.",
                "nullable": true,
                "example": "snow"
              },
              "clientConfigurationName": {
                "type": "string",
                "description": "The configuration name of the client on the computer.",
                "nullable": true,
                "example": "SnowAtlas"
              },
              "scannerVersion": {
                "type": "string",
                "description": "The version of the scanner for the computer.",
                "nullable": true,
                "example": "7.0.0"
              },
              "quarantineDate": {
                "type": "string",
                "description": "The quarantine date of the computer, if computer was quarantined.",
                "format": "date-time",
                "nullable": true,
                "example": "2024-03-24T12:52:20Z"
              },
              "isQuarantineManagementDisabled": {
                "type": "boolean",
                "description": "```true``` if the computer has quarantine management disabled; otherwise, ```false```.",
                "nullable": true,
                "example": true
              },
              "operatingSystem": {
                "type": "string",
                "description": "The operating system of the computer.",
                "nullable": true,
                "example": "Microsoft Windows 11 Pro"
              },
              "operatingSystemId": {
                "type": "string",
                "description": "The unique ID of the operating system of the computer.",
                "format": "guid",
                "nullable": true,
                "example": "c27c14a7-dcec-4f8e-b08e-cdb7263b5378"
              },
              "operatingSystemServicePack": {
                "type": "string",
                "description": "The service pack of the operating system of the computer.",
                "nullable": true,
                "example": "SP1"
              },
              "operatingSystemSerialNumber": {
                "type": "string",
                "description": "The serial number of the operating system of the computer.",
                "nullable": true,
                "example": "V6E3X-S6J5H-L5F5P-M4M2Y"
              },
              "ipAddress": {
                "type": "string",
                "description": "The IP address of the computer.",
                "nullable": true,
                "example": "10.20.20.77"
              },
              "isVirtual": {
                "type": "boolean",
                "description": "```true``` if the computer is virtual; otherwise, ```false```.",
                "nullable": true,
                "example": true
              },
              "hostComputerId": {
                "type": "string",
                "description": "The unique ID of the host computer if present.",
                "format": "guid",
                "nullable": true,
                "example": "037e6448-6ad3-4279-800d-010677485bbb"
              },
              "siblingComputerId": {
                "type": "string",
                "description": "The unique ID of the sibling computer if present.",
                "format": "guid",
                "nullable": true,
                "example": "687e2c50-6900-463a-b470-8c12e3677be8"
              },
              "isUpdated": {
                "type": "boolean",
                "description": "```true``` if the computer is updated; otherwise, ```false```.",
                "nullable": true,
                "example": true
              },
              "is64bit": {
                "type": "boolean",
                "description": "```true``` if the computer is 64 bit; otherwise, ```false```.",
                "example": true
              },
              "isServer": {
                "type": "boolean",
                "description": "```true``` if the computer is a server; otherwise, ```false```.",
                "nullable": true,
                "example": true
              },
              "hypervisorName": {
                "type": "string",
                "description": "The hypervisor name of the computer.",
                "nullable": true,
                "example": "VMware Virtual Platform"
              },
              "isVdi": {
                "type": "boolean",
                "description": "```true``` if the computer uses virtual desktop infrastructure; otherwise, ```false```.",
                "nullable": true,
                "example": true
              },
              "processorValueUnit": {
                "type": "integer",
                "description": "The process value unit of the computer.",
                "format": "int32",
                "nullable": true,
                "example": 32
              },
              "reportingDate": {
                "type": "string",
                "description": "The reporting date of the computer.",
                "format": "date-time",
                "nullable": true,
                "example": "2024-03-24T12:52:20Z"
              },
              "architecture": {
                "type": "string",
                "description": "The architecture of the computer.",
                "nullable": true,
                "example": "64-bit"
              },
              "organizationId": {
                "type": "string",
                "description": "The unique ID of the organization to which the computer belongs.",
                "format": "guid",
                "nullable": true,
                "example": "293cf227-bf7f-4919-b664-791f3f49e1ef"
              },
              "status": {
                "type": "string",
                "description": "The status of the computer.",
                "nullable": true,
                "example": "Active"
              },
              "isAutoEditingDisabled": {
                "type": "boolean",
                "description": "```true``` if the auto editing is disabled for the computer; otherwise, ```false```.",
                "nullable": true,
                "example": true
              },
              "purchaseDate": {
                "type": "string",
                "description": "The date on which the computer was purchased.",
                "format": "date-time",
                "nullable": true,
                "example": "2024-03-24T12:52:20Z"
              },
              "purchaseValue": {
                "type": "number",
                "description": "The amount for which the computer was purchased.",
                "format": "decimal",
                "nullable": true,
                "example": 2461.32
              },
              "purchaseCurrency": {
                "type": "string",
                "description": "The currency in which the computer was purchased.",
                "nullable": true,
                "example": "EUR"
              },
              "purchaseValueBase": {
                "type": "number",
                "description": "The value base of the purchase of the computer.",
                "format": "decimal",
                "nullable": true,
                "example": 2500.32
              },
              "invoiceReference": {
                "type": "string",
                "description": "The invoice reference for the purchase of the computer.",
                "nullable": true,
                "example": "2024/03/63729P"
              },
              "notes": {
                "type": "string",
                "description": "The notes associated with the purchase of the computer.",
                "nullable": true,
                "example": "Purchased in a set with printer"
              },
              "securityCode": {
                "type": "string",
                "description": "The security code for the computer.",
                "nullable": true,
                "example": "A563Z"
              },
              "updatedDate": {
                "type": "string",
                "description": "The date the computer was updated.",
                "format": "date-time",
                "nullable": true,
                "example": "2024-03-24T12:52:20Z"
              },
              "isIncludedInWindowsServerRequirement": {
                "type": "boolean",
                "description": "```true``` if the computer is included in the Windows Server requirement; otherwise, ```false```.",
                "nullable": true,
                "example": true
              },
              "mostRecentUser": {
                "type": "string",
                "description": "The unique ID of the most recent user of the computer.",
                "format": "guid",
                "nullable": true,
                "example": "77f8f11f-e4f8-4bed-8e44-b78d66244302"
              },
              "mostFrequentUser": {
                "type": "string",
                "description": "The unique ID of the most frequent user of the computer.",
                "format": "guid",
                "nullable": true,
                "example": "f2c35e21-aba4-4e0d-8c14-f3033e7b1fb7"
              },
              "vendor": {
                "type": "string",
                "description": "The vendor of the computer.",
                "nullable": true,
                "example": "Dell Inc."
              }
            }
          }
        ]
      },
      "Computer": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          },
          {
            "type": "object",
            "description": "Response representing a computer.",
            "additionalProperties": false,
            "required": [
              "id",
              "hostName",
              "lastScanDate",
              "status"
            ],
            "properties": {
              "id": {
                "type": "string",
                "description": "The unique ID of the computer.",
                "format": "guid",
                "minLength": 1,
                "example": "5043cc04-3ef2-4882-a3be-8d08b4f402c7"
              },
              "hostName": {
                "type": "string",
                "description": "The host name of the computer.",
                "minLength": 1,
                "example": "AM21-S42MONITOR"
              },
              "hostComputerId": {
                "type": "string",
                "description": "The unique ID of the host computer.",
                "format": "guid",
                "nullable": true,
                "example": "035613f6-26a5-4929-94f0-ed10a991438a"
              },
              "mostFrequentUser": {
                "type": "string",
                "description": "The unique ID of the most frequent user of the computer.",
                "format": "guid",
                "nullable": true,
                "example": "f2c35e21-aba4-4e0d-8c14-f3033e7b1fb7"
              },
              "mostRecentUser": {
                "type": "string",
                "description": "The unique ID of the most recent user of the computer.",
                "format": "guid",
                "nullable": true,
                "example": "77f8f11f-e4f8-4bed-8e44-b78d66244302"
              },
              "manufacturer": {
                "type": "string",
                "description": "The manufacturer of the computer.",
                "nullable": true,
                "example": "Lenovo"
              },
              "isPortable": {
                "type": "boolean",
                "description": "```true``` if the computer is portable; otherwise, ```false```.",
                "nullable": true,
                "example": true
              },
              "isVirtual": {
                "type": "boolean",
                "description": "```true``` if the computer is virtual; otherwise, ```false```.",
                "nullable": true,
                "example": true
              },
              "isServer": {
                "type": "boolean",
                "description": "```true``` if the computer is a server; otherwise, ```false```.",
                "nullable": true,
                "example": true
              },
              "model": {
                "type": "string",
                "description": "The model of the computer.",
                "nullable": true,
                "example": "T480s"
              },
              "operatingSystem": {
                "type": "string",
                "description": "The operating system of the computer.",
                "nullable": true,
                "example": "Microsoft Windows 11 Pro"
              },
              "vendor": {
                "type": "string",
                "description": "The vendor of the computer.",
                "nullable": true,
                "example": "Dell Inc."
              },
              "domain": {
                "type": "string",
                "description": "The domain of the computer.",
                "nullable": true,
                "example": "APAC"
              },
              "ipAddress": {
                "type": "string",
                "description": "The IP address of the computer.",
                "nullable": true,
                "example": "10.20.20.77"
              },
              "isVDI": {
                "type": "boolean",
                "description": "```true``` if the computer uses virtual desktop infrastructure; otherwise, ```false```.",
                "nullable": true,
                "example": true
              },
              "lastScanDate": {
                "type": "string",
                "description": "The last date that the computer was scanned.",
                "format": "date-time",
                "minLength": 1,
                "example": "2024-03-24T12:52:20Z"
              },
              "status": {
                "type": "string",
                "description": "The status of the computer.",
                "minLength": 1,
                "example": "Active"
              },
              "organizationId": {
                "type": "string",
                "description": "The unique ID of the organization to which the computer belongs.",
                "format": "guid",
                "nullable": true,
                "example": "293cf227-bf7f-4919-b664-791f3f49e1ef"
              }
            }
          }
        ]
      },
      "FilteredResponseWithLinksOfComputer": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          },
          {
            "type": "object",
            "description": "Generic response class supporting filtering and including links.",
            "additionalProperties": false,
            "required": [
              "items",
              "pagination"
            ],
            "properties": {
              "items": {
                "type": "array",
                "description": "A collection of items returned in the response.",
                "items": {
                  "$ref": "#/components/schemas/Computer"
                }
              },
              "pagination": {
                "description": "The pagination details.",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/PaginationResponse"
                  }
                ]
              }
            }
          }
        ]
      },
      "DeleteComputersResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "success": {
            "type": "boolean"
          },
          "message": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "CollectionResponseOfDeleteComputersResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "collection": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/DeleteComputersResponse"
            }
          },
          "totalRowsCount": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ObjectResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "message": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "ArchiveComputersRequest": {
        "type": "object",
        "description": "Request to archive multiple computers.",
        "additionalProperties": false,
        "properties": {
          "computerIds": {
            "type": "array",
            "description": "A collection of unique IDs of computers to archive.",
            "nullable": true,
            "items": {
              "type": "string",
              "format": "guid"
            }
          }
        }
      },
      "ComputerEnvironmentVariables": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          },
          {
            "type": "object",
            "description": "Response representing environment variables present on a computer.",
            "additionalProperties": false,
            "properties": {
              "computerId": {
                "type": "string",
                "description": "The unique ID of the computer.",
                "format": "guid",
                "example": "ae739332-5f44-4c70-aec5-251c841366f1"
              },
              "environmentVariableName": {
                "type": "string",
                "description": "The name of the environment variables.",
                "nullable": true,
                "example": "CommonProgramW6432"
              },
              "environmentVariableValue": {
                "type": "string",
                "description": "The value of the environment variables.",
                "nullable": true,
                "example": "C:\\Program Files\\Common Files"
              }
            }
          }
        ]
      },
      "FilteredResponseWithLinksOfComputerEnvironmentVariables": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          },
          {
            "type": "object",
            "description": "Generic response class supporting filtering and including links.",
            "additionalProperties": false,
            "required": [
              "items",
              "pagination"
            ],
            "properties": {
              "items": {
                "type": "array",
                "description": "A collection of items returned in the response.",
                "items": {
                  "$ref": "#/components/schemas/ComputerEnvironmentVariables"
                }
              },
              "pagination": {
                "description": "The pagination details.",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/PaginationResponse"
                  }
                ]
              }
            }
          }
        ]
      }
    },
    "securitySchemes": {
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  },
  "tags": [
    {
      "name": "Computer application metering"
    },
    {
      "name": "Computer applications"
    },
    {
      "name": "Computer contracts"
    },
    {
      "name": "Computer costs"
    },
    {
      "name": "Computer display adapter"
    },
    {
      "name": "Computer drives"
    },
    {
      "name": "Computer environment variables"
    },
    {
      "name": "Computer hardware"
    },
    {
      "name": "Computer logical disks"
    },
    {
      "name": "Computer logon history"
    },
    {
      "name": "Computer monitors"
    },
    {
      "name": "Computer network adapters"
    },
    {
      "name": "Computer processors"
    },
    {
      "name": "Computer registries"
    },
    {
      "name": "Computers"
    }
  ]
}