{
  "docusaurus-plugin-content-docs": {
    "default": {
      "loadedVersions": [
        {
          "versionName": "current",
          "label": "Next",
          "banner": null,
          "badge": false,
          "noIndex": false,
          "className": "docs-version-current",
          "path": "/",
          "tagsPath": "/tags",
          "isLast": true,
          "routePriority": -1,
          "sidebarFilePath": "/Users/scottbulloch/repositories/StaticWebappRoot/sidebars.js",
          "contentPath": "/Users/scottbulloch/repositories/StaticWebappRoot/docs",
          "contentPathLocalized": "/Users/scottbulloch/repositories/StaticWebappRoot/i18n/en/docusaurus-plugin-content-docs/current",
          "docs": [
            {
              "unversionedId": "snow-atlas-api/example-scripts",
              "id": "snow-atlas-api/example-scripts",
              "title": "Example scripts",
              "description": "Here you can find an example script to authenticate and an example script to export a list of computers using Snow Atlas APIs.",
              "source": "@site/docs/snow-atlas-api/example-scripts.md",
              "sourceDirName": "snow-atlas-api",
              "slug": "/snow-atlas-api/example-scripts",
              "permalink": "/snow-atlas-api/example-scripts",
              "draft": false,
              "editUrl": null,
              "tags": [],
              "version": "current",
              "sidebarPosition": 2,
              "frontMatter": {
                "custom_edit_url": null,
                "sidebar_position": 2
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "Rate limiting",
                "permalink": "/snow-atlas-api/get-started-with-apis/rate-limiting"
              },
              "next": {
                "title": "SAM Core APIs",
                "permalink": "/snow-atlas-api/sam-core-apis/"
              }
            },
            {
              "unversionedId": "snow-atlas-api/get-started-with-apis/api-authentication/authentication-using-postman",
              "id": "snow-atlas-api/get-started-with-apis/api-authentication/authentication-using-postman",
              "title": "Authentication using Postman",
              "description": "Snow Atlas supports authentication with OAuth2 directly in Postman to get an access token to use with Snow Atlas APIs.",
              "source": "@site/docs/snow-atlas-api/get-started-with-apis/api-authentication/authentication-using-postman.mdx",
              "sourceDirName": "snow-atlas-api/get-started-with-apis/api-authentication",
              "slug": "/snow-atlas-api/get-started-with-apis/api-authentication/authentication-using-postman",
              "permalink": "/snow-atlas-api/get-started-with-apis/api-authentication/authentication-using-postman",
              "draft": false,
              "tags": [],
              "version": "current",
              "frontMatter": {},
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "Authentication with client credentials",
                "permalink": "/snow-atlas-api/get-started-with-apis/api-authentication/authentication-with-client-credentials"
              },
              "next": {
                "title": "Work with OpenAPI endpoint definition files",
                "permalink": "/snow-atlas-api/get-started-with-apis/work-with-openapi-endpoint-definition-files"
              }
            },
            {
              "unversionedId": "snow-atlas-api/get-started-with-apis/api-authentication/authentication-with-client-credentials",
              "id": "snow-atlas-api/get-started-with-apis/api-authentication/authentication-with-client-credentials",
              "title": "Authentication with client credentials",
              "description": "You can register an unattended application to create client credentials that you use to obtain a token to access Snow Atlas APIs. This allows you to access the data from Snow Atlas APIs for reporting and visualization using third-party tools or scripts.",
              "source": "@site/docs/snow-atlas-api/get-started-with-apis/api-authentication/authentication-with-client-credentials.md",
              "sourceDirName": "snow-atlas-api/get-started-with-apis/api-authentication",
              "slug": "/snow-atlas-api/get-started-with-apis/api-authentication/authentication-with-client-credentials",
              "permalink": "/snow-atlas-api/get-started-with-apis/api-authentication/authentication-with-client-credentials",
              "draft": false,
              "editUrl": null,
              "tags": [],
              "version": "current",
              "sidebarPosition": 1,
              "frontMatter": {
                "custom_edit_url": null,
                "sidebar_position": 1
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "API authentication",
                "permalink": "/snow-atlas-api/get-started-with-apis/api-authentication/"
              },
              "next": {
                "title": "Authentication using Postman",
                "permalink": "/snow-atlas-api/get-started-with-apis/api-authentication/authentication-using-postman"
              }
            },
            {
              "unversionedId": "snow-atlas-api/get-started-with-apis/api-authentication/index",
              "id": "snow-atlas-api/get-started-with-apis/api-authentication/index",
              "title": "API authentication",
              "description": "Snow Atlas authentication is governed by the Snow Atlas Identity Provider (IDP). Snow Atlas APIs are protected by access tokens issued by the IDP.",
              "source": "@site/docs/snow-atlas-api/get-started-with-apis/api-authentication/index.md",
              "sourceDirName": "snow-atlas-api/get-started-with-apis/api-authentication",
              "slug": "/snow-atlas-api/get-started-with-apis/api-authentication/",
              "permalink": "/snow-atlas-api/get-started-with-apis/api-authentication/",
              "draft": false,
              "editUrl": null,
              "tags": [],
              "version": "current",
              "sidebarPosition": 2,
              "frontMatter": {
                "custom_edit_url": null,
                "sidebar_position": 2
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "API conventions",
                "permalink": "/snow-atlas-api/get-started-with-apis/api-conventions"
              },
              "next": {
                "title": "Authentication with client credentials",
                "permalink": "/snow-atlas-api/get-started-with-apis/api-authentication/authentication-with-client-credentials"
              }
            },
            {
              "unversionedId": "snow-atlas-api/get-started-with-apis/api-conventions",
              "id": "snow-atlas-api/get-started-with-apis/api-conventions",
              "title": "API conventions",
              "description": "There are certain conventions that apply to all Snow Atlas APIs. The following sections describe the conventions and provide some examples.",
              "source": "@site/docs/snow-atlas-api/get-started-with-apis/api-conventions.md",
              "sourceDirName": "snow-atlas-api/get-started-with-apis",
              "slug": "/snow-atlas-api/get-started-with-apis/api-conventions",
              "permalink": "/snow-atlas-api/get-started-with-apis/api-conventions",
              "draft": false,
              "editUrl": null,
              "tags": [],
              "version": "current",
              "sidebarPosition": 1,
              "frontMatter": {
                "custom_edit_url": null,
                "sidebar_position": 1
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "Get started with APIs",
                "permalink": "/snow-atlas-api/get-started-with-apis/"
              },
              "next": {
                "title": "API authentication",
                "permalink": "/snow-atlas-api/get-started-with-apis/api-authentication/"
              }
            },
            {
              "unversionedId": "snow-atlas-api/get-started-with-apis/index",
              "id": "snow-atlas-api/get-started-with-apis/index",
              "title": "Get started with APIs",
              "description": "This guide is intended to provide a basic overview of how the Snow Atlas APIs operate and how you can use them in your environment.",
              "source": "@site/docs/snow-atlas-api/get-started-with-apis/index.md",
              "sourceDirName": "snow-atlas-api/get-started-with-apis",
              "slug": "/snow-atlas-api/get-started-with-apis/",
              "permalink": "/snow-atlas-api/get-started-with-apis/",
              "draft": false,
              "editUrl": null,
              "tags": [],
              "version": "current",
              "sidebarPosition": 1,
              "frontMatter": {
                "custom_edit_url": null,
                "sidebar_position": 1
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "Snow Atlas Beta API resources",
                "permalink": "/snow-atlas-api/"
              },
              "next": {
                "title": "API conventions",
                "permalink": "/snow-atlas-api/get-started-with-apis/api-conventions"
              }
            },
            {
              "unversionedId": "snow-atlas-api/get-started-with-apis/rate-limiting",
              "id": "snow-atlas-api/get-started-with-apis/rate-limiting",
              "title": "Rate limiting",
              "description": "Policy based rate limiting is used to throttle the number of requests against Snow Atlas APIs. Rate limiting policies are primarily based on IP addresses, clients and users, and any combinations of those.",
              "source": "@site/docs/snow-atlas-api/get-started-with-apis/rate-limiting.mdx",
              "sourceDirName": "snow-atlas-api/get-started-with-apis",
              "slug": "/snow-atlas-api/get-started-with-apis/rate-limiting",
              "permalink": "/snow-atlas-api/get-started-with-apis/rate-limiting",
              "draft": false,
              "tags": [],
              "version": "current",
              "sidebarPosition": 4,
              "frontMatter": {
                "sidebar_position": 4
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "Work with OpenAPI endpoint definition files",
                "permalink": "/snow-atlas-api/get-started-with-apis/work-with-openapi-endpoint-definition-files"
              },
              "next": {
                "title": "Example scripts",
                "permalink": "/snow-atlas-api/example-scripts"
              }
            },
            {
              "unversionedId": "snow-atlas-api/get-started-with-apis/work-with-openapi-endpoint-definition-files",
              "id": "snow-atlas-api/get-started-with-apis/work-with-openapi-endpoint-definition-files",
              "title": "Work with OpenAPI endpoint definition files",
              "description": "OpenAPI is a standard method of defining REST endpoints. You can import the OpenAPI into your favorite REST tool to explore the endpoints and execute calls. Postman is one of several possible REST tools that can be used for this purpose.",
              "source": "@site/docs/snow-atlas-api/get-started-with-apis/work-with-openapi-endpoint-definition-files.mdx",
              "sourceDirName": "snow-atlas-api/get-started-with-apis",
              "slug": "/snow-atlas-api/get-started-with-apis/work-with-openapi-endpoint-definition-files",
              "permalink": "/snow-atlas-api/get-started-with-apis/work-with-openapi-endpoint-definition-files",
              "draft": false,
              "tags": [],
              "version": "current",
              "sidebarPosition": 3,
              "frontMatter": {
                "sidebar_position": 3
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "Authentication using Postman",
                "permalink": "/snow-atlas-api/get-started-with-apis/api-authentication/authentication-using-postman"
              },
              "next": {
                "title": "Rate limiting",
                "permalink": "/snow-atlas-api/get-started-with-apis/rate-limiting"
              }
            },
            {
              "unversionedId": "snow-atlas-api/index",
              "id": "snow-atlas-api/index",
              "title": "Snow Atlas Beta API resources",
              "description": "Snow Atlas is a cloud-native technology intelligence platform providing Snow products as SaaS solutions.",
              "source": "@site/docs/snow-atlas-api/index.md",
              "sourceDirName": "snow-atlas-api",
              "slug": "/snow-atlas-api/",
              "permalink": "/snow-atlas-api/",
              "draft": false,
              "editUrl": null,
              "tags": [],
              "version": "current",
              "sidebarPosition": 1,
              "frontMatter": {
                "custom_edit_url": null,
                "sidebar_position": 1
              },
              "sidebar": "tutorialSidebar",
              "next": {
                "title": "Get started with APIs",
                "permalink": "/snow-atlas-api/get-started-with-apis/"
              }
            },
            {
              "unversionedId": "snow-atlas-api/sam-core-apis/computers",
              "id": "snow-atlas-api/sam-core-apis/computers",
              "title": "Computers - Beta",
              "description": "",
              "source": "@site/docs/snow-atlas-api/sam-core-apis/computers.mdx",
              "sourceDirName": "snow-atlas-api/sam-core-apis",
              "slug": "/snow-atlas-api/sam-core-apis/computers",
              "permalink": "/snow-atlas-api/sam-core-apis/computers",
              "draft": false,
              "tags": [],
              "version": "current",
              "sidebarPosition": 1,
              "frontMatter": {
                "title": "Computers - Beta",
                "hide_table_of_contents": true,
                "sidebar_position": 1
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "SAM Core APIs",
                "permalink": "/snow-atlas-api/sam-core-apis/"
              },
              "next": {
                "title": "Custom Fields - Beta",
                "permalink": "/snow-atlas-api/sam-core-apis/custom-fields"
              }
            },
            {
              "unversionedId": "snow-atlas-api/sam-core-apis/custom-fields",
              "id": "snow-atlas-api/sam-core-apis/custom-fields",
              "title": "Custom Fields - Beta",
              "description": "",
              "source": "@site/docs/snow-atlas-api/sam-core-apis/custom-fields.mdx",
              "sourceDirName": "snow-atlas-api/sam-core-apis",
              "slug": "/snow-atlas-api/sam-core-apis/custom-fields",
              "permalink": "/snow-atlas-api/sam-core-apis/custom-fields",
              "draft": false,
              "tags": [],
              "version": "current",
              "sidebarPosition": 2,
              "frontMatter": {
                "title": "Custom Fields - Beta",
                "hide_table_of_contents": true,
                "sidebar_position": 2
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "Computers - Beta",
                "permalink": "/snow-atlas-api/sam-core-apis/computers"
              },
              "next": {
                "title": "Users - Beta",
                "permalink": "/snow-atlas-api/sam-core-apis/user-accounts"
              }
            },
            {
              "unversionedId": "snow-atlas-api/sam-core-apis/index",
              "id": "snow-atlas-api/sam-core-apis/index",
              "title": "SAM Core APIs",
              "description": "SAM Core on Snow Atlas enables you to manage and control your organization's software assets and licenses to optimize their use.",
              "source": "@site/docs/snow-atlas-api/sam-core-apis/index.md",
              "sourceDirName": "snow-atlas-api/sam-core-apis",
              "slug": "/snow-atlas-api/sam-core-apis/",
              "permalink": "/snow-atlas-api/sam-core-apis/",
              "draft": false,
              "editUrl": null,
              "tags": [],
              "version": "current",
              "frontMatter": {
                "custom_edit_url": null
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "Example scripts",
                "permalink": "/snow-atlas-api/example-scripts"
              },
              "next": {
                "title": "Computers - Beta",
                "permalink": "/snow-atlas-api/sam-core-apis/computers"
              }
            },
            {
              "unversionedId": "snow-atlas-api/sam-core-apis/licenses",
              "id": "snow-atlas-api/sam-core-apis/licenses",
              "title": "Licenses - Beta",
              "description": "",
              "source": "@site/docs/snow-atlas-api/sam-core-apis/licenses.mdx",
              "sourceDirName": "snow-atlas-api/sam-core-apis",
              "slug": "/snow-atlas-api/sam-core-apis/licenses",
              "permalink": "/snow-atlas-api/sam-core-apis/licenses",
              "draft": false,
              "tags": [],
              "version": "current",
              "sidebarPosition": 6,
              "frontMatter": {
                "title": "Licenses - Beta",
                "hide_table_of_contents": true,
                "sidebar_position": 6
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "Users Views - Beta",
                "permalink": "/snow-atlas-api/sam-core-apis/user-accounts-views"
              }
            },
            {
              "unversionedId": "snow-atlas-api/sam-core-apis/user-accounts",
              "id": "snow-atlas-api/sam-core-apis/user-accounts",
              "title": "Users - Beta",
              "description": "",
              "source": "@site/docs/snow-atlas-api/sam-core-apis/user-accounts.mdx",
              "sourceDirName": "snow-atlas-api/sam-core-apis",
              "slug": "/snow-atlas-api/sam-core-apis/user-accounts",
              "permalink": "/snow-atlas-api/sam-core-apis/user-accounts",
              "draft": false,
              "tags": [],
              "version": "current",
              "sidebarPosition": 3,
              "frontMatter": {
                "title": "Users - Beta",
                "hide_table_of_contents": true,
                "sidebar_position": 3
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "Custom Fields - Beta",
                "permalink": "/snow-atlas-api/sam-core-apis/custom-fields"
              },
              "next": {
                "title": "Users Views - Beta",
                "permalink": "/snow-atlas-api/sam-core-apis/user-accounts-views"
              }
            },
            {
              "unversionedId": "snow-atlas-api/sam-core-apis/user-accounts-views",
              "id": "snow-atlas-api/sam-core-apis/user-accounts-views",
              "title": "Users Views - Beta",
              "description": "",
              "source": "@site/docs/snow-atlas-api/sam-core-apis/user-accounts-views.mdx",
              "sourceDirName": "snow-atlas-api/sam-core-apis",
              "slug": "/snow-atlas-api/sam-core-apis/user-accounts-views",
              "permalink": "/snow-atlas-api/sam-core-apis/user-accounts-views",
              "draft": false,
              "tags": [],
              "version": "current",
              "sidebarPosition": 4,
              "frontMatter": {
                "title": "Users Views - Beta",
                "hide_table_of_contents": true,
                "sidebar_position": 4
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "Users - Beta",
                "permalink": "/snow-atlas-api/sam-core-apis/user-accounts"
              },
              "next": {
                "title": "Licenses - Beta",
                "permalink": "/snow-atlas-api/sam-core-apis/licenses"
              }
            }
          ],
          "drafts": [],
          "sidebars": {
            "tutorialSidebar": [
              {
                "type": "category",
                "label": "Snow Atlas Beta API resources",
                "collapsible": true,
                "collapsed": true,
                "items": [
                  {
                    "type": "category",
                    "label": "Get started with APIs",
                    "collapsible": true,
                    "collapsed": true,
                    "items": [
                      {
                        "type": "doc",
                        "id": "snow-atlas-api/get-started-with-apis/api-conventions"
                      },
                      {
                        "type": "category",
                        "label": "API authentication",
                        "collapsible": true,
                        "collapsed": true,
                        "items": [
                          {
                            "type": "doc",
                            "id": "snow-atlas-api/get-started-with-apis/api-authentication/authentication-with-client-credentials"
                          },
                          {
                            "type": "doc",
                            "id": "snow-atlas-api/get-started-with-apis/api-authentication/authentication-using-postman"
                          }
                        ],
                        "link": {
                          "type": "doc",
                          "id": "snow-atlas-api/get-started-with-apis/api-authentication/index"
                        }
                      },
                      {
                        "type": "doc",
                        "id": "snow-atlas-api/get-started-with-apis/work-with-openapi-endpoint-definition-files"
                      },
                      {
                        "type": "doc",
                        "id": "snow-atlas-api/get-started-with-apis/rate-limiting"
                      }
                    ],
                    "link": {
                      "type": "doc",
                      "id": "snow-atlas-api/get-started-with-apis/index"
                    }
                  },
                  {
                    "type": "doc",
                    "id": "snow-atlas-api/example-scripts"
                  },
                  {
                    "type": "category",
                    "label": "SAM Core APIs",
                    "collapsible": true,
                    "collapsed": true,
                    "items": [
                      {
                        "type": "doc",
                        "id": "snow-atlas-api/sam-core-apis/computers"
                      },
                      {
                        "type": "doc",
                        "id": "snow-atlas-api/sam-core-apis/custom-fields"
                      },
                      {
                        "type": "doc",
                        "id": "snow-atlas-api/sam-core-apis/user-accounts"
                      },
                      {
                        "type": "doc",
                        "id": "snow-atlas-api/sam-core-apis/user-accounts-views"
                      },
                      {
                        "type": "doc",
                        "id": "snow-atlas-api/sam-core-apis/licenses"
                      }
                    ],
                    "link": {
                      "type": "doc",
                      "id": "snow-atlas-api/sam-core-apis/index"
                    }
                  }
                ],
                "link": {
                  "type": "doc",
                  "id": "snow-atlas-api/index"
                }
              }
            ]
          }
        }
      ]
    }
  },
  "docusaurus-plugin-content-blog": {
    "default": {
      "blogSidebarTitle": "Recent posts",
      "blogPosts": [
        {
          "id": "welcome",
          "metadata": {
            "permalink": "/blog/welcome",
            "source": "@site/blog/2021-08-26-welcome/index.md",
            "title": "Welcome",
            "description": "Docusaurus blogging features are powered by the blog plugin.",
            "date": "2021-08-26T00:00:00.000Z",
            "formattedDate": "August 26, 2021",
            "tags": [
              {
                "label": "facebook",
                "permalink": "/blog/tags/facebook"
              },
              {
                "label": "hello",
                "permalink": "/blog/tags/hello"
              },
              {
                "label": "docusaurus",
                "permalink": "/blog/tags/docusaurus"
              }
            ],
            "readingTime": 0.405,
            "hasTruncateMarker": false,
            "authors": [
              {
                "name": "Sébastien Lorber",
                "title": "Docusaurus maintainer",
                "url": "https://sebastienlorber.com",
                "imageURL": "https://github.com/slorber.png",
                "key": "slorber"
              },
              {
                "name": "Yangshun Tay",
                "title": "Front End Engineer @ Facebook",
                "url": "https://github.com/yangshun",
                "imageURL": "https://github.com/yangshun.png",
                "key": "yangshun"
              }
            ],
            "frontMatter": {
              "slug": "welcome",
              "title": "Welcome",
              "authors": [
                "slorber",
                "yangshun"
              ],
              "tags": [
                "facebook",
                "hello",
                "docusaurus"
              ]
            },
            "nextItem": {
              "title": "MDX Blog Post",
              "permalink": "/blog/mdx-blog-post"
            }
          },
          "content": "[Docusaurus blogging features](https://docusaurus.io/docs/blog) are powered by the [blog plugin](https://docusaurus.io/docs/api/plugins/@docusaurus/plugin-content-blog).\n\nSimply add Markdown files (or folders) to the `blog` directory.\n\nRegular blog authors can be added to `authors.yml`.\n\nThe blog post date can be extracted from filenames, such as:\n\n- `2019-05-30-welcome.md`\n- `2019-05-30-welcome/index.md`\n\nA blog post folder can be convenient to co-locate blog post images:\n\n![Docusaurus Plushie](./docusaurus-plushie-banner.jpeg)\n\nThe blog supports tags as well!\n\n**And if you don't want a blog**: just delete this directory, and use `blog: false` in your Docusaurus config."
        },
        {
          "id": "mdx-blog-post",
          "metadata": {
            "permalink": "/blog/mdx-blog-post",
            "source": "@site/blog/2021-08-01-mdx-blog-post.mdx",
            "title": "MDX Blog Post",
            "description": "Blog posts support Docusaurus Markdown features, such as MDX.",
            "date": "2021-08-01T00:00:00.000Z",
            "formattedDate": "August 1, 2021",
            "tags": [
              {
                "label": "docusaurus",
                "permalink": "/blog/tags/docusaurus"
              }
            ],
            "readingTime": 0.175,
            "hasTruncateMarker": false,
            "authors": [
              {
                "name": "Sébastien Lorber",
                "title": "Docusaurus maintainer",
                "url": "https://sebastienlorber.com",
                "imageURL": "https://github.com/slorber.png",
                "key": "slorber"
              }
            ],
            "frontMatter": {
              "slug": "mdx-blog-post",
              "title": "MDX Blog Post",
              "authors": [
                "slorber"
              ],
              "tags": [
                "docusaurus"
              ]
            },
            "prevItem": {
              "title": "Welcome",
              "permalink": "/blog/welcome"
            },
            "nextItem": {
              "title": "Long Blog Post",
              "permalink": "/blog/long-blog-post"
            }
          },
          "content": "Blog posts support [Docusaurus Markdown features](https://docusaurus.io/docs/markdown-features), such as [MDX](https://mdxjs.com/).\n\n:::tip\n\nUse the power of React to create interactive blog posts.\n\n```js\n<button onClick={() => alert(\"button clicked!\")}>Click me!</button>\n```\n\n<button onClick={() => alert(\"button clicked!\")}>Click me!</button>\n\n:::"
        },
        {
          "id": "long-blog-post",
          "metadata": {
            "permalink": "/blog/long-blog-post",
            "source": "@site/blog/2019-05-29-long-blog-post.md",
            "title": "Long Blog Post",
            "description": "This is the summary of a very long blog post,",
            "date": "2019-05-29T00:00:00.000Z",
            "formattedDate": "May 29, 2019",
            "tags": [
              {
                "label": "hello",
                "permalink": "/blog/tags/hello"
              },
              {
                "label": "docusaurus",
                "permalink": "/blog/tags/docusaurus"
              }
            ],
            "readingTime": 2.05,
            "hasTruncateMarker": true,
            "authors": [
              {
                "name": "Endilie Yacop Sucipto",
                "title": "Maintainer of Docusaurus",
                "url": "https://github.com/endiliey",
                "imageURL": "https://github.com/endiliey.png",
                "key": "endi"
              }
            ],
            "frontMatter": {
              "slug": "long-blog-post",
              "title": "Long Blog Post",
              "authors": "endi",
              "tags": [
                "hello",
                "docusaurus"
              ]
            },
            "prevItem": {
              "title": "MDX Blog Post",
              "permalink": "/blog/mdx-blog-post"
            },
            "nextItem": {
              "title": "First Blog Post",
              "permalink": "/blog/first-blog-post"
            }
          },
          "content": "This is the summary of a very long blog post,\n\nUse a `<!--` `truncate` `-->` comment to limit blog post size in the list view.\n\n<!--truncate-->\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet"
        },
        {
          "id": "first-blog-post",
          "metadata": {
            "permalink": "/blog/first-blog-post",
            "source": "@site/blog/2019-05-28-first-blog-post.md",
            "title": "First Blog Post",
            "description": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet",
            "date": "2019-05-28T00:00:00.000Z",
            "formattedDate": "May 28, 2019",
            "tags": [
              {
                "label": "hola",
                "permalink": "/blog/tags/hola"
              },
              {
                "label": "docusaurus",
                "permalink": "/blog/tags/docusaurus"
              }
            ],
            "readingTime": 0.12,
            "hasTruncateMarker": false,
            "authors": [
              {
                "name": "Gao Wei",
                "title": "Docusaurus Core Team",
                "url": "https://github.com/wgao19",
                "image_url": "https://github.com/wgao19.png",
                "imageURL": "https://github.com/wgao19.png"
              }
            ],
            "frontMatter": {
              "slug": "first-blog-post",
              "title": "First Blog Post",
              "authors": {
                "name": "Gao Wei",
                "title": "Docusaurus Core Team",
                "url": "https://github.com/wgao19",
                "image_url": "https://github.com/wgao19.png",
                "imageURL": "https://github.com/wgao19.png"
              },
              "tags": [
                "hola",
                "docusaurus"
              ]
            },
            "prevItem": {
              "title": "Long Blog Post",
              "permalink": "/blog/long-blog-post"
            }
          },
          "content": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet"
        }
      ],
      "blogListPaginated": [
        {
          "items": [
            "welcome",
            "mdx-blog-post",
            "long-blog-post",
            "first-blog-post"
          ],
          "metadata": {
            "permalink": "/blog",
            "page": 1,
            "postsPerPage": 10,
            "totalPages": 1,
            "totalCount": 4,
            "blogDescription": "Blog",
            "blogTitle": "Blog"
          }
        }
      ],
      "blogTags": {
        "/blog/tags/facebook": {
          "label": "facebook",
          "items": [
            "welcome"
          ],
          "permalink": "/blog/tags/facebook",
          "pages": [
            {
              "items": [
                "welcome"
              ],
              "metadata": {
                "permalink": "/blog/tags/facebook",
                "page": 1,
                "postsPerPage": 10,
                "totalPages": 1,
                "totalCount": 1,
                "blogDescription": "Blog",
                "blogTitle": "Blog"
              }
            }
          ]
        },
        "/blog/tags/hello": {
          "label": "hello",
          "items": [
            "welcome",
            "long-blog-post"
          ],
          "permalink": "/blog/tags/hello",
          "pages": [
            {
              "items": [
                "welcome",
                "long-blog-post"
              ],
              "metadata": {
                "permalink": "/blog/tags/hello",
                "page": 1,
                "postsPerPage": 10,
                "totalPages": 1,
                "totalCount": 2,
                "blogDescription": "Blog",
                "blogTitle": "Blog"
              }
            }
          ]
        },
        "/blog/tags/docusaurus": {
          "label": "docusaurus",
          "items": [
            "welcome",
            "mdx-blog-post",
            "long-blog-post",
            "first-blog-post"
          ],
          "permalink": "/blog/tags/docusaurus",
          "pages": [
            {
              "items": [
                "welcome",
                "mdx-blog-post",
                "long-blog-post",
                "first-blog-post"
              ],
              "metadata": {
                "permalink": "/blog/tags/docusaurus",
                "page": 1,
                "postsPerPage": 10,
                "totalPages": 1,
                "totalCount": 4,
                "blogDescription": "Blog",
                "blogTitle": "Blog"
              }
            }
          ]
        },
        "/blog/tags/hola": {
          "label": "hola",
          "items": [
            "first-blog-post"
          ],
          "permalink": "/blog/tags/hola",
          "pages": [
            {
              "items": [
                "first-blog-post"
              ],
              "metadata": {
                "permalink": "/blog/tags/hola",
                "page": 1,
                "postsPerPage": 10,
                "totalPages": 1,
                "totalCount": 1,
                "blogDescription": "Blog",
                "blogTitle": "Blog"
              }
            }
          ]
        }
      },
      "blogTagsListPath": "/blog/tags"
    }
  },
  "docusaurus-plugin-content-pages": {
    "default": [
      {
        "type": "mdx",
        "permalink": "/hello-markdown",
        "source": "@site/src/pages/hello-markdown.md",
        "title": "Markdown page example",
        "description": "You don't need React to write simple standalone pages.",
        "frontMatter": {
          "title": "Markdown page example"
        }
      },
      {
        "type": "jsx",
        "permalink": "/hello-react",
        "source": "@site/src/pages/hello-react.js"
      },
      {
        "type": "jsx",
        "permalink": "/",
        "source": "@site/src/pages/index.js"
      },
      {
        "type": "mdx",
        "permalink": "/markdown-page",
        "source": "@site/src/pages/markdown-page.md",
        "title": "Markdown page example",
        "description": "You don't need React to write simple standalone pages.",
        "frontMatter": {
          "title": "Markdown page example"
        }
      }
    ]
  },
  "docusaurus-plugin-debug": {},
  "docusaurus-plugin-redoc": {
    "sam_api_computers": {
      "converted": {
        "openapi": "3.0.0",
        "info": {
          "title": "Product name: Computers API",
          "description": "API for interacting with computers.",
          "contact": {
            "name": "Snow Software, Inc.",
            "url": "https://www.snowsoftware.com"
          },
          "version": "0.0.0"
        },
        "servers": [
          {
            "url": "https://{region}.snowsoftware.io",
            "variables": {
              "region": {
                "enum": [
                  "westeurope",
                  "australiasoutheast",
                  "eastus2",
                  "uksouth"
                ],
                "default": "westeurope"
              }
            }
          }
        ],
        "paths": {
          "/api/sam/estate/v1/computers-metering": {
            "get": {
              "tags": [
                "Computer application metering"
              ],
              "summary": "Get application metering",
              "description": "Returns a collection of metric tracking data.",
              "operationId": "getApplicationMetering",
              "parameters": [
                {
                  "name": "page_number",
                  "in": "query",
                  "description": "The page number.",
                  "schema": {
                    "type": "integer",
                    "default": 1,
                    "minimum": 1
                  }
                },
                {
                  "name": "page_size",
                  "in": "query",
                  "description": "The maximum number of items in the response.",
                  "schema": {
                    "type": "integer",
                    "default": 100,
                    "minimum": 1
                  }
                },
                {
                  "name": "filter",
                  "in": "query",
                  "description": "The fields which you can use to filter the results. Format of the query string parameter:\n```\n?filter=<filter name> <operator> <value>\n```\nFilter name | Description | Data type | Example\n:--- | --- | --- | ---\n\nFor more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).\n",
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/FilteredResponseWithLinksOfComputerApplicationMetering"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.computer.r"
                  ]
                }
              ]
            }
          },
          "/api/sam/estate/v1/computers/{id}/metering": {
            "get": {
              "tags": [
                "Computer application metering"
              ],
              "summary": "Get application metering by computer",
              "description": "Returns a collection of metric tracking data for a given computer.",
              "operationId": "getComputerApplicationMetering",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the computer.",
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "page_number",
                  "in": "query",
                  "description": "The page number.",
                  "schema": {
                    "type": "integer",
                    "default": 1,
                    "minimum": 1
                  }
                },
                {
                  "name": "page_size",
                  "in": "query",
                  "description": "The maximum number of items in the response.",
                  "schema": {
                    "type": "integer",
                    "default": 100,
                    "minimum": 1
                  }
                },
                {
                  "name": "filter",
                  "in": "query",
                  "description": "The fields which you can use to filter the results. Format of the query string parameter:\n```\n?filter=<filter name> <operator> <value>\n```\nFilter name | Description | Data type | Example\n:--- | --- | --- | ---\n\nFor more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).\n",
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/FilteredResponseWithLinksOfComputerApplicationMetering"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.computer.r"
                  ]
                }
              ]
            }
          },
          "/api/sam/estate/v1/computers/{id}/applications": {
            "get": {
              "tags": [
                "Computer applications"
              ],
              "summary": "Get computer's applications",
              "description": "Returns a collection of applications for a given computer.",
              "operationId": "getComputerApplications",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the computer.",
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "page_number",
                  "in": "query",
                  "description": "The page number.",
                  "schema": {
                    "type": "integer",
                    "default": 1,
                    "minimum": 1
                  }
                },
                {
                  "name": "page_size",
                  "in": "query",
                  "description": "The maximum number of items in the response.",
                  "schema": {
                    "type": "integer",
                    "default": 100,
                    "minimum": 1
                  }
                },
                {
                  "name": "filter",
                  "in": "query",
                  "description": "The fields which you can use to filter the results. Format of the query string parameter:\n```\n?filter=<filter name> <operator> <value>\n```\nFilter name | Description | Data type | Example\n:--- | --- | --- | ---\n\nFor more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).\n",
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/FilteredResponseWithLinksOfComputerApplications"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.computer.r"
                  ]
                }
              ]
            }
          },
          "/api/sam/estate/v1/computers/{id}/applications/{applicationid}": {
            "get": {
              "tags": [
                "Computer applications"
              ],
              "summary": "Get computer application's details",
              "description": "Returns the details of an application record for a given computer.",
              "operationId": "getComputerApplicationDetails",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the computer.",
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "applicationid",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the application.",
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ComputerApplicationsDetails"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.computer.r"
                  ]
                }
              ]
            }
          },
          "/api/sam/estate/v1/computers-applications": {
            "get": {
              "tags": [
                "Computer applications"
              ],
              "summary": "Get all computers' applications",
              "description": "Returns a collection of applications for all computers.",
              "operationId": "getComputersApplications",
              "parameters": [
                {
                  "name": "page_number",
                  "in": "query",
                  "description": "The page number.",
                  "schema": {
                    "type": "integer",
                    "default": 1,
                    "minimum": 1
                  }
                },
                {
                  "name": "page_size",
                  "in": "query",
                  "description": "The maximum number of items in the response.",
                  "schema": {
                    "type": "integer",
                    "default": 100,
                    "minimum": 1
                  }
                },
                {
                  "name": "filter",
                  "in": "query",
                  "description": "The fields which you can use to filter the results. Format of the query string parameter:\n```\n?filter=<filter name> <operator> <value>\n```\nFilter name | Description | Data type | Example\n:--- | --- | --- | ---\n\nFor more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).\n",
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/FilteredResponseWithLinksOfComputerApplications"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.computer.r"
                  ]
                }
              ]
            }
          },
          "/api/sam/estate/v1/computers-application-usage": {
            "get": {
              "tags": [
                "Computer applications"
              ],
              "summary": "Get application usage collection",
              "description": "Returns a collection of application usage data.",
              "operationId": "getApplicationUsages",
              "parameters": [
                {
                  "name": "page_number",
                  "in": "query",
                  "description": "The page number.",
                  "schema": {
                    "type": "integer",
                    "default": 1,
                    "minimum": 1
                  }
                },
                {
                  "name": "page_size",
                  "in": "query",
                  "description": "The maximum number of items in the response.",
                  "schema": {
                    "type": "integer",
                    "default": 100,
                    "minimum": 1
                  }
                },
                {
                  "name": "filter",
                  "in": "query",
                  "description": "The fields which you can use to filter the results. Format of the query string parameter:\n```\n?filter=<filter name> <operator> <value>\n```\nFilter name | Description | Data type | Example\n:--- | --- | --- | ---\n\nFor more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).\n",
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/FilteredResponseWithLinksOfComputerApplicationUsage"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.computer.r"
                  ]
                }
              ]
            }
          },
          "/api/sam/estate/v1/computers-application-user-usage": {
            "get": {
              "tags": [
                "Computer applications"
              ],
              "summary": "Get application user usage",
              "description": "Returns a collection of application usage data.",
              "operationId": "getApplicationUserUsage",
              "parameters": [
                {
                  "name": "page_number",
                  "in": "query",
                  "description": "The page number.",
                  "schema": {
                    "type": "integer",
                    "default": 1,
                    "minimum": 1
                  }
                },
                {
                  "name": "page_size",
                  "in": "query",
                  "description": "The maximum number of items in the response.",
                  "schema": {
                    "type": "integer",
                    "default": 100,
                    "minimum": 1
                  }
                },
                {
                  "name": "filter",
                  "in": "query",
                  "description": "The fields which you can use to filter the results. Format of the query string parameter:\n```\n?filter=<filter name> <operator> <value>\n```\nFilter name | Description | Data type | Example\n:--- | --- | --- | ---\n\nFor more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).\n",
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/FilteredResponseWithLinksOfUserApplicationUsage"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.computer.r"
                  ]
                }
              ]
            }
          },
          "/api/sam/estate/v1/computers-application-usage/summary": {
            "get": {
              "tags": [
                "Computer applications"
              ],
              "summary": "Get application usage summary",
              "description": "Returns a collection of application usage summaries.",
              "operationId": "getApplicationUsageSummary",
              "parameters": [
                {
                  "name": "page_number",
                  "in": "query",
                  "description": "The page number.",
                  "schema": {
                    "type": "integer",
                    "default": 1,
                    "minimum": 1
                  }
                },
                {
                  "name": "page_size",
                  "in": "query",
                  "description": "The maximum number of items in the response.",
                  "schema": {
                    "type": "integer",
                    "default": 100,
                    "minimum": 1
                  }
                },
                {
                  "name": "filter",
                  "in": "query",
                  "description": "The fields which you can use to filter the results. Format of the query string parameter:\n```\n?filter=<filter name> <operator> <value>\n```\nFilter name | Description | Data type | Example\n:--- | --- | --- | ---\n\nFor more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).\n",
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/FilteredResponseWithLinksOfComputerApplicationUsageSummary"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.computer.r"
                  ]
                }
              ]
            }
          },
          "/api/sam/estate/v1/computers/{id}/contracts": {
            "get": {
              "tags": [
                "Computer contracts"
              ],
              "summary": "Get computer's contracts",
              "description": "Returns a collection of contracts for a given computer.",
              "operationId": "getComputerContracts",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the computer.",
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "page_number",
                  "in": "query",
                  "description": "The page number.",
                  "schema": {
                    "type": "integer",
                    "default": 1,
                    "minimum": 1
                  }
                },
                {
                  "name": "page_size",
                  "in": "query",
                  "description": "The maximum number of items in the response.",
                  "schema": {
                    "type": "integer",
                    "default": 100,
                    "minimum": 1
                  }
                },
                {
                  "name": "filter",
                  "in": "query",
                  "description": "The fields which you can use to filter the results. Format of the query string parameter:\n```\n?filter=<filter name> <operator> <value>\n```\nFilter name | Description | Data type | Example\n:--- | --- | --- | ---\n\nFor more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).\n",
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/FilteredResponseWithLinksOfComputerContract"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.computer.r"
                  ]
                }
              ]
            }
          },
          "/api/sam/estate/v1/computers/{id}/costs": {
            "get": {
              "tags": [
                "Computer costs"
              ],
              "summary": "Get computer's costs",
              "description": "Returns the details of a computer's costs.",
              "operationId": "getComputerCosts",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the computer.",
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ComputerCosts"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.computer.r"
                  ]
                }
              ]
            }
          },
          "/api/sam/estate/v1/computers/{id}/hardware/displayadapters": {
            "get": {
              "tags": [
                "Computer display adapter"
              ],
              "summary": "Get computer display adapters",
              "description": "Returns a collection of display adapter for a given computer.",
              "operationId": "getComputerDisplayAdapters",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the computer.",
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "page_number",
                  "in": "query",
                  "description": "The page number.",
                  "schema": {
                    "type": "integer",
                    "default": 1,
                    "minimum": 1
                  }
                },
                {
                  "name": "page_size",
                  "in": "query",
                  "description": "The maximum number of items in the response.",
                  "schema": {
                    "type": "integer",
                    "default": 100,
                    "minimum": 1
                  }
                },
                {
                  "name": "filter",
                  "in": "query",
                  "description": "The fields which you can use to filter the results. Format of the query string parameter:\n```\n?filter=<filter name> <operator> <value>\n```\nFilter name | Description | Data type | Example\n:--- | --- | --- | ---\n\nFor more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).\n",
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ComputerDisplayAdapter"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.computer.r"
                  ]
                }
              ]
            }
          },
          "/api/sam/estate/v1/computers/{id}/hardware/harddrives": {
            "get": {
              "tags": [
                "Computer drives"
              ],
              "summary": "Get computer drives",
              "description": "Returns a collection of hard drives for a given computer.",
              "operationId": "getComputerDrives",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the computer.",
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "page_number",
                  "in": "query",
                  "description": "The page number.",
                  "schema": {
                    "type": "integer",
                    "default": 1,
                    "minimum": 1
                  }
                },
                {
                  "name": "page_size",
                  "in": "query",
                  "description": "The maximum number of items in the response.",
                  "schema": {
                    "type": "integer",
                    "default": 100,
                    "minimum": 1
                  }
                },
                {
                  "name": "filter",
                  "in": "query",
                  "description": "The fields which you can use to filter the results. Format of the query string parameter:\n```\n?filter=<filter name> <operator> <value>\n```\nFilter name | Description | Data type | Example\n:--- | --- | --- | ---\n\nFor more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).\n",
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/FilteredResponseWithLinksOfComputerDrive"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.computer.r"
                  ]
                }
              ]
            }
          },
          "/api/sam/estate/v1/computers/{id}/hardware/opticaldrives": {
            "get": {
              "tags": [
                "Computer drives"
              ],
              "summary": "Get computer optical drives",
              "description": "Returns a collection of optical drives for a given computer.",
              "operationId": "getComputerOpticalDrives",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the computer.",
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "page_number",
                  "in": "query",
                  "description": "The page number.",
                  "schema": {
                    "type": "integer",
                    "default": 1,
                    "minimum": 1
                  }
                },
                {
                  "name": "page_size",
                  "in": "query",
                  "description": "The maximum number of items in the response.",
                  "schema": {
                    "type": "integer",
                    "default": 100,
                    "minimum": 1
                  }
                },
                {
                  "name": "filter",
                  "in": "query",
                  "description": "The fields which you can use to filter the results. Format of the query string parameter:\n```\n?filter=<filter name> <operator> <value>\n```\nFilter name | Description | Data type | Example\n:--- | --- | --- | ---\n\nFor more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).\n",
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/FilteredResponseWithLinksOfComputerDrive"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.computer.r"
                  ]
                }
              ]
            }
          },
          "/api/sam/estate/v1/computers/{id}/hardware": {
            "get": {
              "tags": [
                "Computer hardware"
              ],
              "summary": "Get computer's hardware details",
              "description": "Returns the details of a hardware for a given computer.",
              "operationId": "getComputerHardwareDetails",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the computer.",
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ComputerHardwareDetails"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.computer.r"
                  ]
                }
              ]
            }
          },
          "/api/sam/estate/v1/computers/{id}/hardware/disks/logical": {
            "get": {
              "tags": [
                "Computer logical disks"
              ],
              "summary": "Get computer's logical disks",
              "description": "Returns a collection of logical disks for a given computer.",
              "operationId": "getComputerLogicalDisks",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the computer.",
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "page_number",
                  "in": "query",
                  "description": "The page number.",
                  "schema": {
                    "type": "integer",
                    "default": 1,
                    "minimum": 1
                  }
                },
                {
                  "name": "page_size",
                  "in": "query",
                  "description": "The maximum number of items in the response.",
                  "schema": {
                    "type": "integer",
                    "default": 100,
                    "minimum": 1
                  }
                },
                {
                  "name": "filter",
                  "in": "query",
                  "description": "The fields which you can use to filter the results. Format of the query string parameter:\n```\n?filter=<filter name> <operator> <value>\n```\nFilter name | Description | Data type | Example\n:--- | --- | --- | ---\n\nFor more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).\n",
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/FilteredResponseWithLinksOfComputerLogicalDisk"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.computer.r"
                  ]
                }
              ]
            }
          },
          "/api/sam/estate/v1/computers/{id}/logonhistory": {
            "get": {
              "tags": [
                "Computer logon history"
              ],
              "summary": "Get computer's logon history",
              "description": "Returns a collection of computer logon histories.",
              "operationId": "getComputerLogonHistory",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the computer.",
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "page_number",
                  "in": "query",
                  "description": "The page number.",
                  "schema": {
                    "type": "integer",
                    "default": 1,
                    "minimum": 1
                  }
                },
                {
                  "name": "page_size",
                  "in": "query",
                  "description": "The maximum number of items in the response.",
                  "schema": {
                    "type": "integer",
                    "default": 100,
                    "minimum": 1
                  }
                },
                {
                  "name": "filter",
                  "in": "query",
                  "description": "The fields which you can use to filter the results. Format of the query string parameter:\n```\n?filter=<filter name> <operator> <value>\n```\nFilter name | Description | Data type | Example\n:--- | --- | --- | ---\n\nFor more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).\n",
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/FilteredResponseWithLinksOfComputerLogonHistory"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.computer.r"
                  ]
                }
              ]
            }
          },
          "/api/sam/estate/v1/computers-logonhistory/{userid}": {
            "get": {
              "tags": [
                "Computer logon history"
              ],
              "summary": "Get computer's logon history for a user",
              "description": "Returns a collection of computer logon histories for a given user.",
              "operationId": "getComputerLogonHistoryForUser",
              "parameters": [
                {
                  "name": "userid",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the user.",
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "page_number",
                  "in": "query",
                  "description": "The page number.",
                  "schema": {
                    "type": "integer",
                    "default": 1,
                    "minimum": 1
                  }
                },
                {
                  "name": "page_size",
                  "in": "query",
                  "description": "The maximum number of items in the response.",
                  "schema": {
                    "type": "integer",
                    "default": 100,
                    "minimum": 1
                  }
                },
                {
                  "name": "filter",
                  "in": "query",
                  "description": "The fields which you can use to filter the results. Format of the query string parameter:\n```\n?filter=<filter name> <operator> <value>\n```\nFilter name | Description | Data type | Example\n:--- | --- | --- | ---\n\nFor more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).\n",
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/FilteredResponseWithLinksOfComputerLogonHistory"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.computer.r"
                  ]
                }
              ]
            }
          },
          "/api/sam/estate/v1/computers/{id}/logonhistory/{userid}": {
            "get": {
              "tags": [
                "Computer logon history"
              ],
              "summary": "Get computer's logon history details",
              "description": "Returns the details of a logon histories for a given computer and user.",
              "operationId": "getComputerLogonHistoryDetails",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the computer.",
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "userid",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the user.",
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ComputerLogonHistoryDetails"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.computer.r"
                  ]
                }
              ]
            }
          },
          "/api/sam/estate/v1/computers/{id}/hardware/monitors": {
            "get": {
              "tags": [
                "Computer monitors"
              ],
              "summary": "Get computer's monitors",
              "description": "Returns a collection of monitors for a given computer.",
              "operationId": "getComputerMonitors",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the computer.",
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "page_number",
                  "in": "query",
                  "description": "The page number.",
                  "schema": {
                    "type": "integer",
                    "default": 1,
                    "minimum": 1
                  }
                },
                {
                  "name": "page_size",
                  "in": "query",
                  "description": "The maximum number of items in the response.",
                  "schema": {
                    "type": "integer",
                    "default": 100,
                    "minimum": 1
                  }
                },
                {
                  "name": "filter",
                  "in": "query",
                  "description": "The fields which you can use to filter the results. Format of the query string parameter:\n```\n?filter=<filter name> <operator> <value>\n```\nFilter name | Description | Data type | Example\n:--- | --- | --- | ---\n\nFor more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).\n",
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ComputerMonitor"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.computer.r"
                  ]
                }
              ]
            }
          },
          "/api/sam/estate/v1/computers/{id}/hardware/networkadapters": {
            "get": {
              "tags": [
                "Computer network adapters"
              ],
              "summary": "Get computer's network adapters",
              "description": "Returns a collection of network adapters for a computer.",
              "operationId": "getComputerNetworkAdapters",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the computer.",
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "page_number",
                  "in": "query",
                  "description": "The page number.",
                  "schema": {
                    "type": "integer",
                    "default": 1,
                    "minimum": 1
                  }
                },
                {
                  "name": "page_size",
                  "in": "query",
                  "description": "The maximum number of items in the response.",
                  "schema": {
                    "type": "integer",
                    "default": 100,
                    "minimum": 1
                  }
                },
                {
                  "name": "filter",
                  "in": "query",
                  "description": "The fields which you can use to filter the results. Format of the query string parameter:\n```\n?filter=<filter name> <operator> <value>\n```\nFilter name | Description | Data type | Example\n:--- | --- | --- | ---\n\nFor more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).\n",
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/FilteredResponseWithLinksOfComputerNetworkAdapters"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.computer.r"
                  ]
                }
              ]
            }
          },
          "/api/sam/estate/v1/computers-networkadapters": {
            "get": {
              "tags": [
                "Computer network adapters"
              ],
              "summary": "Get all network adapters",
              "description": "Returns a collection of network adapters.",
              "operationId": "getAllNetworkAdapters",
              "parameters": [
                {
                  "name": "page_number",
                  "in": "query",
                  "description": "The page number.",
                  "schema": {
                    "type": "integer",
                    "default": 1,
                    "minimum": 1
                  }
                },
                {
                  "name": "page_size",
                  "in": "query",
                  "description": "The maximum number of items in the response.",
                  "schema": {
                    "type": "integer",
                    "default": 100,
                    "minimum": 1
                  }
                },
                {
                  "name": "filter",
                  "in": "query",
                  "description": "The fields which you can use to filter the results. Format of the query string parameter:\n```\n?filter=<filter name> <operator> <value>\n```\nFilter name | Description | Data type | Example\n:--- | --- | --- | ---\n\nFor more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).\n",
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/FilteredResponseWithLinksOfComputerNetworkAdapters"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.computer.r"
                  ]
                }
              ]
            }
          },
          "/api/sam/estate/v1/computers/{id}/hardware/cpu": {
            "get": {
              "tags": [
                "Computer processors"
              ],
              "summary": "Get computer's processors",
              "description": "Returns a collection of computer processors.",
              "operationId": "getComputerProcessors",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the computer.",
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "page_number",
                  "in": "query",
                  "description": "The page number.",
                  "schema": {
                    "type": "integer",
                    "default": 1,
                    "minimum": 1
                  }
                },
                {
                  "name": "page_size",
                  "in": "query",
                  "description": "The maximum number of items in the response.",
                  "schema": {
                    "type": "integer",
                    "default": 100,
                    "minimum": 1
                  }
                },
                {
                  "name": "filter",
                  "in": "query",
                  "description": "The fields which you can use to filter the results. Format of the query string parameter:\n```\n?filter=<filter name> <operator> <value>\n```\nFilter name | Description | Data type | Example\n:--- | --- | --- | ---\n\nFor more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).\n",
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/FilteredResponseWithLinksOfComputerProcessor"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.computer.r"
                  ]
                }
              ]
            }
          },
          "/api/sam/estate/v1/computers/{id}/hardware/cpu/socketmap": {
            "get": {
              "tags": [
                "Computer processors"
              ],
              "summary": "Get computer's socket map details",
              "description": "Returns the details of a socket maps for a given computer.",
              "operationId": "getComputerSocketMapDetails",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the computer.",
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ComputerSocketMapDetails"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.computer.r"
                  ]
                }
              ]
            }
          },
          "/api/sam/estate/v1/computers/{id}/registry": {
            "get": {
              "tags": [
                "Computer registries"
              ],
              "summary": "Get computer's registries",
              "description": "Returns a collection of computer registries.",
              "operationId": "getComputerRegistries",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the computer.",
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "page_number",
                  "in": "query",
                  "description": "The page number.",
                  "schema": {
                    "type": "integer",
                    "default": 1,
                    "minimum": 1
                  }
                },
                {
                  "name": "page_size",
                  "in": "query",
                  "description": "The maximum number of items in the response.",
                  "schema": {
                    "type": "integer",
                    "default": 100,
                    "minimum": 1
                  }
                },
                {
                  "name": "filter",
                  "in": "query",
                  "description": "The fields which you can use to filter the results. Format of the query string parameter:\n```\n?filter=<filter name> <operator> <value>\n```\nFilter name | Description | Data type | Example\n:--- | --- | --- | ---\n\nFor more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).\n",
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/FilteredResponseWithLinksOfComputerRegistry"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.computer.r"
                  ]
                }
              ]
            }
          },
          "/api/sam/estate/v1/computers/{id}": {
            "get": {
              "tags": [
                "Computers"
              ],
              "summary": "Get computer details",
              "description": "Returns the details of a given computer.",
              "operationId": "getComputer",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the computer.",
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "page_number",
                  "in": "query",
                  "description": "The page number.",
                  "schema": {
                    "type": "integer",
                    "default": 1,
                    "minimum": 1
                  }
                },
                {
                  "name": "page_size",
                  "in": "query",
                  "description": "The maximum number of items in the response.",
                  "schema": {
                    "type": "integer",
                    "default": 100,
                    "minimum": 1
                  }
                },
                {
                  "name": "filter",
                  "in": "query",
                  "description": "The fields which you can use to filter the results. Format of the query string parameter:\n```\n?filter=<filter name> <operator> <value>\n```\nFilter name | Description | Data type | Example\n:--- | --- | --- | ---\n\nFor more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).\n",
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ComputerDetails"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.computer.r"
                  ]
                }
              ]
            },
            "delete": {
              "tags": [
                "Computers"
              ],
              "summary": "Delete computer",
              "description": "Removes the given computer.",
              "operationId": "deleteComputer",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "page_number",
                  "in": "query",
                  "description": "The page number.",
                  "schema": {
                    "type": "integer",
                    "default": 1,
                    "minimum": 1
                  }
                },
                {
                  "name": "page_size",
                  "in": "query",
                  "description": "The maximum number of items in the response.",
                  "schema": {
                    "type": "integer",
                    "default": 100,
                    "minimum": 1
                  }
                },
                {
                  "name": "filter",
                  "in": "query",
                  "description": "The fields which you can use to filter the results. Format of the query string parameter:\n```\n?filter=<filter name> <operator> <value>\n```\nFilter name | Description | Data type | Example\n:--- | --- | --- | ---\n\nFor more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).\n",
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/DeleteComputersResponse"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "405": {
                  "description": "Not Allowed - The operation you requested is known, but not currently supported.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.computer.d"
                  ]
                }
              ]
            },
            "put": {
              "tags": [
                "Computers"
              ],
              "summary": "Replace computer",
              "description": "Update computer.",
              "operationId": "replaceComputer",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ObjectResponse"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "405": {
                  "description": "Not Allowed - The operation you requested is known, but not currently supported.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.computer.u"
                  ]
                }
              ]
            }
          },
          "/api/sam/estate/v1/computers": {
            "get": {
              "tags": [
                "Computers"
              ],
              "summary": "Get computers collection",
              "description": "Returns a collection of computers.",
              "operationId": "getComputers",
              "parameters": [
                {
                  "name": "page_number",
                  "in": "query",
                  "description": "The page number.",
                  "schema": {
                    "type": "integer",
                    "default": 1,
                    "minimum": 1
                  }
                },
                {
                  "name": "page_size",
                  "in": "query",
                  "description": "The maximum number of items in the response.",
                  "schema": {
                    "type": "integer",
                    "default": 100,
                    "minimum": 1
                  }
                },
                {
                  "name": "filter",
                  "in": "query",
                  "description": "The fields which you can use to filter the results. Format of the query string parameter:\n```\n?filter=<filter name> <operator> <value>\n```\nFilter name | Description | Data type | Example\n:--- | --- | --- | ---\n\nFor more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).\n",
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/FilteredResponseWithLinksOfComputer"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.computer.r"
                  ]
                }
              ]
            },
            "delete": {
              "tags": [
                "Computers"
              ],
              "summary": "Delete computers",
              "description": "Removes computers for a given ids.",
              "operationId": "deleteComputers",
              "parameters": [
                {
                  "name": "page_number",
                  "in": "query",
                  "description": "The page number.",
                  "schema": {
                    "type": "integer",
                    "default": 1,
                    "minimum": 1
                  }
                },
                {
                  "name": "page_size",
                  "in": "query",
                  "description": "The maximum number of items in the response.",
                  "schema": {
                    "type": "integer",
                    "default": 100,
                    "minimum": 1
                  }
                },
                {
                  "name": "filter",
                  "in": "query",
                  "description": "The fields which you can use to filter the results. Format of the query string parameter:\n```\n?filter=<filter name> <operator> <value>\n```\nFilter name | Description | Data type | Example\n:--- | --- | --- | ---\n\nFor more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).\n",
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CollectionResponseOfDeleteComputersResponse"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "405": {
                  "description": "Not Allowed - The operation you requested is known, but not currently supported.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.computer.d"
                  ]
                }
              ]
            }
          },
          "/api/sam/estate/v1/computers/{id}/archive": {
            "patch": {
              "tags": [
                "Computers"
              ],
              "summary": "Archive computer",
              "description": "Archive single computer.",
              "operationId": "archiveComputer",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the computer.",
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ObjectResponse"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "405": {
                  "description": "Not Allowed - The operation you requested is known, but not currently supported.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.computer.u"
                  ]
                }
              ]
            }
          },
          "/api/sam/estate/v1/computers/archive": {
            "patch": {
              "tags": [
                "Computers"
              ],
              "summary": "Archive computers",
              "description": "Archive multiple computers.",
              "operationId": "archiveComputers",
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/ArchiveComputersRequest"
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ObjectResponse"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "405": {
                  "description": "Not Allowed - The operation you requested is known, but not currently supported.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.computer.u"
                  ]
                }
              ]
            }
          },
          "/api/sam/estate/v1/computers/{id}/environment-variables": {
            "get": {
              "tags": [
                "Computer environment variables"
              ],
              "summary": "Get computer's environment variables",
              "description": "Returns a collection of environment variable for a given computer.",
              "operationId": "getEnvironmentVariablesForComputer",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the computer.",
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "page_number",
                  "in": "query",
                  "description": "The page number.",
                  "schema": {
                    "type": "integer",
                    "default": 1,
                    "minimum": 1
                  }
                },
                {
                  "name": "page_size",
                  "in": "query",
                  "description": "The maximum number of items in the response.",
                  "schema": {
                    "type": "integer",
                    "default": 100,
                    "minimum": 1
                  }
                },
                {
                  "name": "filter",
                  "in": "query",
                  "description": "The fields which you can use to filter the results. Format of the query string parameter:\n```\n?filter=<filter name> <operator> <value>\n```\nFilter name | Description | Data type | Example\n:--- | --- | --- | ---\n\nFor more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).\n",
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/FilteredResponseWithLinksOfComputerEnvironmentVariables"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.computer.r"
                  ]
                }
              ]
            }
          },
          "/api/sam/estate/v1/computers-environment-variables": {
            "get": {
              "tags": [
                "Computer environment variables"
              ],
              "summary": "Get computer environment variables",
              "description": "Returns a collection of computer environment variables.",
              "operationId": "getComputerEnvironmentVariables",
              "parameters": [
                {
                  "name": "page_number",
                  "in": "query",
                  "description": "The page number.",
                  "schema": {
                    "type": "integer",
                    "default": 1,
                    "minimum": 1
                  }
                },
                {
                  "name": "page_size",
                  "in": "query",
                  "description": "The maximum number of items in the response.",
                  "schema": {
                    "type": "integer",
                    "default": 100,
                    "minimum": 1
                  }
                },
                {
                  "name": "filter",
                  "in": "query",
                  "description": "The fields which you can use to filter the results. Format of the query string parameter:\n```\n?filter=<filter name> <operator> <value>\n```\nFilter name | Description | Data type | Example\n:--- | --- | --- | ---\n\nFor more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).\n",
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/FilteredResponseWithLinksOfComputerEnvironmentVariables"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.computer.r"
                  ]
                }
              ]
            }
          }
        },
        "components": {
          "schemas": {
            "PaginationResponse": {
              "type": "object",
              "description": "Generic response class for the pagination part.\nProperties are annotated using DataMemberAttribute so that we're aligned with REST style guide regarding the json payload.",
              "additionalProperties": false,
              "required": [
                "page_size",
                "page_number"
              ],
              "properties": {
                "page_size": {
                  "type": "integer",
                  "description": "The page size you requested.",
                  "format": "int32",
                  "example": 25
                },
                "page_number": {
                  "type": "integer",
                  "description": "The page number you requested.",
                  "format": "int32",
                  "example": 1
                },
                "total_pages": {
                  "type": "integer",
                  "description": "The total number of pages.",
                  "format": "int32",
                  "nullable": true,
                  "example": 10
                },
                "total_items": {
                  "type": "integer",
                  "description": "The total number of items.",
                  "format": "int32",
                  "nullable": true,
                  "example": 120
                }
              }
            },
            "Link": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "href": {
                  "type": "string",
                  "nullable": true
                },
                "rel": {
                  "type": "string",
                  "nullable": true
                },
                "method": {
                  "type": "string",
                  "nullable": true
                }
              }
            },
            "BaseResponse": {
              "type": "object",
              "description": "Base response class.",
              "x-abstract": true,
              "additionalProperties": false,
              "required": [
                "_links"
              ],
              "properties": {
                "_links": {
                  "type": "array",
                  "description": "A collection of links to related resources.",
                  "items": {
                    "$ref": "#/components/schemas/Link"
                  }
                }
              }
            },
            "ComputerApplicationMetering": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/BaseResponse"
                },
                {
                  "type": "object",
                  "description": "Response class for Computer application metric tracking.",
                  "additionalProperties": false,
                  "required": [
                    "computerId",
                    "metricId",
                    "applicationId"
                  ],
                  "properties": {
                    "computerId": {
                      "type": "string",
                      "description": "The unique ID of the computer.",
                      "format": "guid",
                      "minLength": 1,
                      "example": "a2c8ef89-cb18-49ea-b3c0-122d40fc0ba7"
                    },
                    "metricId": {
                      "type": "string",
                      "description": "The unique ID of the metric used.",
                      "format": "guid",
                      "minLength": 1,
                      "example": "ca90b444-dcd0-43ce-9190-0e51af24613c"
                    },
                    "applicationId": {
                      "type": "string",
                      "description": "The unique ID of the application.",
                      "format": "guid",
                      "minLength": 1,
                      "example": "6f1cbfb3-ecc2-4e1b-8376-537ace3503c2"
                    },
                    "initialRequirement": {
                      "type": "integer",
                      "description": "The initial requirement of the metric.",
                      "format": "int32",
                      "example": 5
                    },
                    "includedInBundle": {
                      "type": "integer",
                      "description": "The number of applications included in the bundle.",
                      "format": "int32",
                      "example": 5
                    },
                    "outsideMetricPeriod": {
                      "type": "integer",
                      "description": "The number of computers outside of the metric period.",
                      "format": "int32",
                      "example": 5
                    },
                    "secondaryUseRightsDesktopLaptop": {
                      "type": "integer",
                      "description": "The number of computers with secondary use rights for a desktop or laptop.",
                      "format": "int32",
                      "example": 5
                    },
                    "secondaryUseRightsDevice": {
                      "type": "integer",
                      "description": "The number of computers with secondary use rights for a device.",
                      "format": "int32",
                      "example": 5
                    },
                    "extendedCoverageForDcc": {
                      "type": "integer",
                      "description": "The number of computers with extended coverage for DCC.",
                      "format": "int32",
                      "example": 5
                    },
                    "extendedCoverageForHost": {
                      "type": "integer",
                      "description": "The number of computers with extended coverage for host.",
                      "format": "int32",
                      "example": 5
                    },
                    "multipleVersionEdition": {
                      "type": "integer",
                      "description": "The number of computers with multiple version editions.",
                      "format": "int32",
                      "example": 5
                    },
                    "virtualDesktopInfrastructure": {
                      "type": "integer",
                      "description": "The number of computers with virtual desktop infrastructure.",
                      "format": "int32",
                      "example": 5
                    },
                    "minimumRequirement": {
                      "type": "integer",
                      "description": "The minimum requirement for the metric.",
                      "format": "int32",
                      "example": 5
                    },
                    "coreFactor": {
                      "type": "integer",
                      "description": "The core factor for the metric.",
                      "format": "int32",
                      "example": 5
                    },
                    "physicalHost": {
                      "type": "integer",
                      "description": "The physical host for the metric.",
                      "format": "int32",
                      "example": 5
                    },
                    "requirement": {
                      "type": "integer",
                      "description": "The requirement for the metric.",
                      "format": "int32",
                      "example": 5
                    },
                    "computerAppExclusions": {
                      "type": "integer",
                      "description": "The number of computers which have application exclusions.",
                      "format": "int32",
                      "example": 5
                    },
                    "windowsServer": {
                      "type": "integer",
                      "description": "The number of computers which are Windows servers.",
                      "format": "int32",
                      "example": 5
                    },
                    "virtualMachine": {
                      "type": "integer",
                      "description": "The number of computers which are virtual machines.",
                      "format": "int32",
                      "example": 5
                    },
                    "unknownPhysicalHost": {
                      "type": "integer",
                      "description": "The number of computers with an unknown physical host.",
                      "format": "int32",
                      "example": 5
                    },
                    "manuallyExcluded": {
                      "type": "integer",
                      "description": "The number of computers manually excluded.",
                      "format": "int32",
                      "example": 5
                    },
                    "requirementMoved": {
                      "type": "integer",
                      "description": "The number of computers with the requirements moved.",
                      "format": "int32",
                      "example": 5
                    },
                    "windowsServerFlag": {
                      "type": "integer",
                      "description": "The number of computers with the Windows server flag.",
                      "format": "int32",
                      "example": 5
                    },
                    "sqlServer": {
                      "type": "integer",
                      "description": "The number of computers with the SQL server flag.",
                      "format": "int32",
                      "example": 5
                    }
                  }
                }
              ]
            },
            "FilteredResponseWithLinksOfComputerApplicationMetering": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/BaseResponse"
                },
                {
                  "type": "object",
                  "description": "Generic response class supporting filtering and including links.",
                  "additionalProperties": false,
                  "required": [
                    "items",
                    "pagination"
                  ],
                  "properties": {
                    "items": {
                      "type": "array",
                      "description": "A collection of items returned in the response.",
                      "items": {
                        "$ref": "#/components/schemas/ComputerApplicationMetering"
                      }
                    },
                    "pagination": {
                      "description": "The pagination details.",
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/PaginationResponse"
                        }
                      ]
                    }
                  }
                }
              ]
            },
            "ErrorContent": {
              "type": "object",
              "description": "Details of error.",
              "additionalProperties": false,
              "properties": {
                "code": {
                  "type": "integer",
                  "description": "Http error code.",
                  "format": "int32",
                  "example": 400
                },
                "message": {
                  "type": "string",
                  "description": "Additional error message.",
                  "nullable": true
                }
              }
            },
            "ErrorResponse": {
              "type": "object",
              "description": "Response representing error.",
              "additionalProperties": false,
              "required": [
                "error"
              ],
              "properties": {
                "error": {
                  "description": "The error details.",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorContent"
                    }
                  ]
                }
              }
            },
            "ComputerApplications": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/BaseResponse"
                },
                {
                  "type": "object",
                  "description": "Response class for computer applications.",
                  "additionalProperties": false,
                  "properties": {
                    "computerId": {
                      "type": "string",
                      "description": "The unique ID of the computer.",
                      "format": "guid",
                      "example": "29ce62ac-d575-4ff1-90e8-b84eaed0f5d8"
                    },
                    "applicationId": {
                      "type": "string",
                      "description": "The unique ID of the application.",
                      "format": "guid",
                      "example": "29ce62ac-d575-4ff1-90e8-b84eaed0f5d8"
                    },
                    "bundleApplicationId": {
                      "type": "string",
                      "description": "The unique ID of the application bundle, or product suite, for a given application.",
                      "format": "guid",
                      "nullable": true,
                      "example": "29ce62ac-d575-4ff1-90e8-b84eaed0f5d8"
                    },
                    "firstDiscovered": {
                      "type": "string",
                      "description": "The date when the application was first discovered on the computer.",
                      "format": "date-time",
                      "nullable": true,
                      "example": "2024-03-24T12:52:20Z"
                    },
                    "lastUsed": {
                      "type": "string",
                      "description": "The date when the application was last used on the computer.",
                      "format": "date-time",
                      "nullable": true,
                      "example": "2024-03-24T12:52:20Z"
                    },
                    "usedCount": {
                      "type": "integer",
                      "description": "The number of times the application was used on the computer.",
                      "format": "int32",
                      "example": 10
                    },
                    "averageUsedTime": {
                      "type": "string",
                      "description": "The average time the application was used in hours.",
                      "nullable": true,
                      "example": "01:24"
                    },
                    "isVirtual": {
                      "type": "boolean",
                      "description": "```true``` if the application is virtual; otherwise, ```false```.",
                      "nullable": true,
                      "example": true
                    },
                    "isInstalled": {
                      "type": "boolean",
                      "description": "```true``` if the application is installed on the computer; otherwise, ```false```.",
                      "nullable": true,
                      "example": true
                    },
                    "bundleUsagePercentage": {
                      "type": "integer",
                      "description": "How much of the application bundle is used in percentage.",
                      "format": "int32",
                      "nullable": true,
                      "example": 20
                    },
                    "unbundled": {
                      "type": "boolean",
                      "description": "```true``` if the application is unbundled; otherwise, ```false```.",
                      "example": true
                    }
                  }
                }
              ]
            },
            "FilteredResponseWithLinksOfComputerApplications": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/BaseResponse"
                },
                {
                  "type": "object",
                  "description": "Generic response class supporting filtering and including links.",
                  "additionalProperties": false,
                  "required": [
                    "items",
                    "pagination"
                  ],
                  "properties": {
                    "items": {
                      "type": "array",
                      "description": "A collection of items returned in the response.",
                      "items": {
                        "$ref": "#/components/schemas/ComputerApplications"
                      }
                    },
                    "pagination": {
                      "description": "The pagination details.",
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/PaginationResponse"
                        }
                      ]
                    }
                  }
                }
              ]
            },
            "ComputerApplicationsDetails": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/BaseResponse"
                },
                {
                  "type": "object",
                  "description": "Response class for computer application details.",
                  "additionalProperties": false,
                  "properties": {
                    "computerId": {
                      "type": "string",
                      "description": "The unique ID of the computer.",
                      "format": "guid",
                      "example": "c1d617ff-2104-411c-9c20-682017a9fefd"
                    },
                    "applicationId": {
                      "type": "string",
                      "description": "The unique ID of the application.",
                      "format": "guid",
                      "example": "c1d617ff-2104-411c-9c20-682017a9fefd"
                    },
                    "bundleApplicationId": {
                      "type": "string",
                      "description": "The unique ID of the application bundle, or product suite, for a given application.",
                      "format": "guid",
                      "nullable": true,
                      "example": "c1d617ff-2104-411c-9c20-682017a9fefd"
                    },
                    "firstDiscovered": {
                      "type": "string",
                      "description": "The date when the application was first discovered on the computer.",
                      "format": "date-time",
                      "nullable": true,
                      "example": "2024-03-24T12:52:20Z"
                    },
                    "firstUsed": {
                      "type": "string",
                      "description": "The date when the application was first used on the computer.",
                      "format": "date-time",
                      "nullable": true,
                      "example": "2024-03-24T12:52:20Z"
                    },
                    "lastUsed": {
                      "type": "string",
                      "description": "The date when the application was last used on the computer.",
                      "format": "date-time",
                      "nullable": true,
                      "example": "2024-03-24T12:52:20Z"
                    },
                    "usedCount": {
                      "type": "integer",
                      "description": "The number of times the application was used on the computer.",
                      "format": "int32",
                      "example": 10
                    },
                    "usedUser": {
                      "type": "integer",
                      "description": "The number of users who used the application on the computer.",
                      "format": "int32",
                      "example": 10
                    },
                    "usedMinutes": {
                      "type": "integer",
                      "description": "The number of minutes the application was used on the computer.",
                      "format": "int64",
                      "example": 10
                    },
                    "usedDays": {
                      "type": "integer",
                      "description": "The number of days the application was used on the computer.",
                      "format": "int32",
                      "nullable": true,
                      "example": 10
                    },
                    "isInstalled": {
                      "type": "boolean",
                      "description": "```true``` if the application is installed on the computer; otherwise, ```false```.",
                      "nullable": true,
                      "example": true
                    },
                    "isOEM": {
                      "type": "boolean",
                      "description": "```true``` if the application is OEM; otherwise, ```false```.",
                      "nullable": true,
                      "example": true
                    },
                    "isMSDN": {
                      "type": "boolean",
                      "description": "```true``` if the application is MSDN; otherwise, ```false```.",
                      "nullable": true,
                      "example": true
                    },
                    "isVirtual": {
                      "type": "boolean",
                      "description": "```true``` if the application is virtual; otherwise, ```false```.",
                      "nullable": true,
                      "example": true
                    },
                    "isOverridden": {
                      "type": "boolean",
                      "description": "```true``` if the application is overridden; otherwise, ```false```.",
                      "nullable": true,
                      "example": true
                    },
                    "packageGUID": {
                      "type": "string",
                      "description": "The unique ID of the application package.",
                      "format": "guid",
                      "nullable": true,
                      "example": "640b16bb-447f-430f-87ee-49bfe940e308"
                    },
                    "isRecognized": {
                      "type": "boolean",
                      "description": "```true``` if the application is recognized; otherwise, ```false```.",
                      "nullable": true,
                      "example": true
                    },
                    "isRegistry": {
                      "type": "boolean",
                      "description": "```true``` if the application is in the registry; otherwise, ```false```.",
                      "nullable": true,
                      "example": true
                    },
                    "averageUsedTime": {
                      "type": "string",
                      "description": "The average time the application is used in hours.",
                      "nullable": true,
                      "example": "01:24"
                    },
                    "unbundled": {
                      "type": "boolean",
                      "description": "```true``` if the application is licenced individualy; otherwise, ```false```.",
                      "example": true
                    }
                  }
                }
              ]
            },
            "ComputerApplicationUsage": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/BaseResponse"
                },
                {
                  "type": "object",
                  "description": "Response for computer application usage.",
                  "additionalProperties": false,
                  "properties": {
                    "computerId": {
                      "type": "string",
                      "description": "The unique ID of the computer.",
                      "format": "guid",
                      "example": "743ba97e-3425-4f46-99b0-9a9c791ceb3a"
                    },
                    "userId": {
                      "type": "string",
                      "description": "The unique ID of the user.",
                      "format": "guid",
                      "example": "743ba97e-3425-4f46-99b0-9a9c791ceb3a"
                    },
                    "bundleApplicationId": {
                      "type": "string",
                      "description": "The unique ID of the application bundle, or product suite, for a given application.",
                      "format": "guid",
                      "nullable": true,
                      "example": "743ba97e-3425-4f46-99b0-9a9c791ceb3a"
                    },
                    "applicationId": {
                      "type": "string",
                      "description": "The unique ID of the application.",
                      "format": "guid",
                      "example": "743ba97e-3425-4f46-99b0-9a9c791ceb3a"
                    },
                    "firstUsed": {
                      "type": "string",
                      "description": "The date when the application was first used on the computer.",
                      "format": "date-time",
                      "nullable": true,
                      "example": "2024-03-24T12:52:20Z"
                    },
                    "lastUsedDate": {
                      "type": "string",
                      "description": "The date when the application was last used on the computer.",
                      "nullable": true,
                      "example": "2024-03-24T12:52:20Z"
                    },
                    "usedCount": {
                      "type": "integer",
                      "description": "The number of times the application was used on the computer.",
                      "format": "int32",
                      "example": 10
                    },
                    "usedMinutes": {
                      "type": "integer",
                      "description": "The number of minutes the application was used on the computer.",
                      "format": "int64",
                      "example": 10
                    },
                    "usedDays": {
                      "type": "integer",
                      "description": "The number of days the application was used on the computer.",
                      "format": "int32",
                      "nullable": true,
                      "example": 10
                    },
                    "isInstalled": {
                      "type": "boolean",
                      "description": "```true``` if the application is installed on the computer; otherwise, ```false```.",
                      "nullable": true,
                      "example": true
                    }
                  }
                }
              ]
            },
            "FilteredResponseWithLinksOfComputerApplicationUsage": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/BaseResponse"
                },
                {
                  "type": "object",
                  "description": "Generic response class supporting filtering and including links.",
                  "additionalProperties": false,
                  "required": [
                    "items",
                    "pagination"
                  ],
                  "properties": {
                    "items": {
                      "type": "array",
                      "description": "A collection of items returned in the response.",
                      "items": {
                        "$ref": "#/components/schemas/ComputerApplicationUsage"
                      }
                    },
                    "pagination": {
                      "description": "The pagination details.",
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/PaginationResponse"
                        }
                      ]
                    }
                  }
                }
              ]
            },
            "UserApplicationUsage": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/BaseResponse"
                },
                {
                  "type": "object",
                  "description": "Represents usage of an application by a specific user.",
                  "additionalProperties": false,
                  "properties": {
                    "userId": {
                      "type": "string",
                      "description": "The unique ID of the user.",
                      "format": "guid",
                      "example": "29ce62ac-d575-4ff1-90e8-b84eaed0f5d8"
                    },
                    "applicationId": {
                      "type": "string",
                      "description": "The unique ID of the application.",
                      "format": "guid",
                      "example": "29ce62ac-d575-4ff1-90e8-b84eaed0f5d8"
                    },
                    "bundleApplicationId": {
                      "type": "string",
                      "description": "The unique ID of the application bundle, or product suite, for a given application.",
                      "format": "guid",
                      "nullable": true,
                      "example": "29ce62ac-d575-4ff1-90e8-b84eaed0f5d8"
                    },
                    "lastUsedDate": {
                      "type": "string",
                      "description": "The application last used date on the computer as a string with no time component.",
                      "nullable": true,
                      "example": "2024-03-22"
                    }
                  }
                }
              ]
            },
            "FilteredResponseWithLinksOfUserApplicationUsage": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/BaseResponse"
                },
                {
                  "type": "object",
                  "description": "Generic response class supporting filtering and including links.",
                  "additionalProperties": false,
                  "required": [
                    "items",
                    "pagination"
                  ],
                  "properties": {
                    "items": {
                      "type": "array",
                      "description": "A collection of items returned in the response.",
                      "items": {
                        "$ref": "#/components/schemas/UserApplicationUsage"
                      }
                    },
                    "pagination": {
                      "description": "The pagination details.",
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/PaginationResponse"
                        }
                      ]
                    }
                  }
                }
              ]
            },
            "ComputerApplicationUsageSummary": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/BaseResponse"
                },
                {
                  "type": "object",
                  "description": "Response class for application usage summary.",
                  "additionalProperties": false,
                  "properties": {
                    "applicationId": {
                      "type": "string",
                      "description": "The unique ID of the application.",
                      "format": "guid",
                      "example": "1ce2bdde-b68f-429d-aff5-bad93f544689"
                    },
                    "computers": {
                      "type": "integer",
                      "description": "The number of computers on which the application was used.",
                      "format": "int32",
                      "example": 10
                    },
                    "users": {
                      "type": "integer",
                      "description": "The number of users who used the application.",
                      "format": "int32",
                      "example": 10
                    },
                    "installations": {
                      "type": "integer",
                      "description": "The number of installations of the application.",
                      "format": "int32",
                      "example": 10
                    }
                  }
                }
              ]
            },
            "FilteredResponseWithLinksOfComputerApplicationUsageSummary": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/BaseResponse"
                },
                {
                  "type": "object",
                  "description": "Generic response class supporting filtering and including links.",
                  "additionalProperties": false,
                  "required": [
                    "items",
                    "pagination"
                  ],
                  "properties": {
                    "items": {
                      "type": "array",
                      "description": "A collection of items returned in the response.",
                      "items": {
                        "$ref": "#/components/schemas/ComputerApplicationUsageSummary"
                      }
                    },
                    "pagination": {
                      "description": "The pagination details.",
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/PaginationResponse"
                        }
                      ]
                    }
                  }
                }
              ]
            },
            "ComputerContract": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/BaseResponse"
                },
                {
                  "type": "object",
                  "description": "Response representing connection between computer and contract.",
                  "additionalProperties": false,
                  "properties": {
                    "computerId": {
                      "type": "string",
                      "description": "The unique ID of the computer.",
                      "format": "guid",
                      "example": "95c1d359-8d89-4a51-a8ed-444e0ab01f71"
                    },
                    "contractId": {
                      "type": "string",
                      "description": "The unique ID of the contract.",
                      "format": "guid",
                      "example": "95c1d359-8d89-4a51-a8ed-444e0ab01f71"
                    }
                  }
                }
              ]
            },
            "FilteredResponseWithLinksOfComputerContract": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/BaseResponse"
                },
                {
                  "type": "object",
                  "description": "Generic response class supporting filtering and including links.",
                  "additionalProperties": false,
                  "required": [
                    "items",
                    "pagination"
                  ],
                  "properties": {
                    "items": {
                      "type": "array",
                      "description": "A collection of items returned in the response.",
                      "items": {
                        "$ref": "#/components/schemas/ComputerContract"
                      }
                    },
                    "pagination": {
                      "description": "The pagination details.",
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/PaginationResponse"
                        }
                      ]
                    }
                  }
                }
              ]
            },
            "ComputerCosts": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/BaseResponse"
                },
                {
                  "type": "object",
                  "description": "Response representing costs associated with a computer.",
                  "additionalProperties": false,
                  "properties": {
                    "computerId": {
                      "type": "string",
                      "description": "The unique ID of the computer.",
                      "format": "guid",
                      "example": "4f2403da-3ab5-48f8-9114-73304cfeb017"
                    },
                    "vendor": {
                      "type": "string",
                      "description": "The vendor of the computer.",
                      "nullable": true,
                      "example": "Dell Inc."
                    },
                    "purchaseDate": {
                      "type": "string",
                      "description": "The date on which the computer was purchased.",
                      "format": "date-time",
                      "nullable": true,
                      "example": "2024-03-24T12:52:20Z"
                    },
                    "purchasePrice": {
                      "type": "number",
                      "description": "The price for which the computer was purchased.",
                      "format": "decimal",
                      "nullable": true,
                      "example": 2521.32
                    },
                    "purchaseValueBase": {
                      "type": "number",
                      "description": "The value base of the purchase of the computer.",
                      "format": "decimal",
                      "nullable": true,
                      "example": 2500.32
                    },
                    "purchaseCurrency": {
                      "type": "string",
                      "description": "The currency in which the computer was purchased.",
                      "nullable": true,
                      "example": "EUR"
                    },
                    "invoiceReference": {
                      "type": "string",
                      "description": "The invoice reference for the purchase of the computer.",
                      "nullable": true,
                      "example": "2024/03/63729P"
                    },
                    "totalCostOfInstalledApplications": {
                      "type": "number",
                      "description": "The total cost of all applications installed on the computer.",
                      "format": "decimal",
                      "nullable": true,
                      "example": 1452.28
                    },
                    "totalCost": {
                      "type": "number",
                      "description": "The total cost of the computer and installed applications.",
                      "format": "decimal",
                      "nullable": true,
                      "example": 3973.6
                    }
                  }
                }
              ]
            },
            "ComputerDisplayAdapter": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/BaseResponse"
                },
                {
                  "type": "object",
                  "description": "Response representing display adapter of a computer.",
                  "additionalProperties": false,
                  "properties": {
                    "computerId": {
                      "type": "string",
                      "description": "The unique ID of the computer.",
                      "format": "guid",
                      "example": "66a6b2b7-2ff1-403f-add3-60ed14a0233a"
                    },
                    "name": {
                      "type": "string",
                      "description": "The name of the display adapter.",
                      "nullable": true,
                      "example": "NVIDIA T1200 Laptop GPU"
                    },
                    "currentResolution": {
                      "type": "string",
                      "description": "The current resolution of the display adapter of the computer.",
                      "nullable": true,
                      "example": "1920 x 1200"
                    },
                    "maxResolution": {
                      "type": "string",
                      "description": "The maximum resolution of the display adapter of the computer.",
                      "nullable": true,
                      "example": "2560x1440"
                    },
                    "isUpdated": {
                      "type": "boolean",
                      "description": "```true``` if the display adapter is updated; otherwise, ```false```.",
                      "example": true
                    }
                  }
                }
              ]
            },
            "ComputerDrive": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/BaseResponse"
                },
                {
                  "type": "object",
                  "description": "Response representing computer storage.",
                  "additionalProperties": false,
                  "properties": {
                    "computerId": {
                      "type": "string",
                      "description": "The unique ID of the computer.",
                      "format": "guid",
                      "example": "6b8f2c7a-101e-4187-b07e-ebb4b815ef28"
                    },
                    "name": {
                      "type": "string",
                      "description": "The name of the drive of the computer.",
                      "nullable": true,
                      "example": "Virtual HD ATA Device"
                    },
                    "diskSizeMB": {
                      "type": "integer",
                      "description": "The size of the drive of the computer in megabytes.",
                      "format": "int32",
                      "example": 102398
                    },
                    "isUpdated": {
                      "type": "boolean",
                      "description": "```true``` if the drive of the computer is updated; otherwise, ```false```.",
                      "example": true
                    }
                  }
                }
              ]
            },
            "FilteredResponseWithLinksOfComputerDrive": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/BaseResponse"
                },
                {
                  "type": "object",
                  "description": "Generic response class supporting filtering and including links.",
                  "additionalProperties": false,
                  "required": [
                    "items",
                    "pagination"
                  ],
                  "properties": {
                    "items": {
                      "type": "array",
                      "description": "A collection of items returned in the response.",
                      "items": {
                        "$ref": "#/components/schemas/ComputerDrive"
                      }
                    },
                    "pagination": {
                      "description": "The pagination details.",
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/PaginationResponse"
                        }
                      ]
                    }
                  }
                }
              ]
            },
            "ComputerHardwareDetails": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/BaseResponse"
                },
                {
                  "type": "object",
                  "description": "Response representing details of hardware of a computer.",
                  "additionalProperties": false,
                  "properties": {
                    "computerId": {
                      "type": "string",
                      "description": "The unique ID of the computer.",
                      "format": "guid",
                      "example": "990b4de8-f11f-4904-9e86-d8a435835574"
                    },
                    "processorCount": {
                      "type": "integer",
                      "description": "The number of processors in the computer.",
                      "format": "int32",
                      "nullable": true,
                      "example": 2
                    },
                    "coreCount": {
                      "type": "integer",
                      "description": "The number of cores in the computer.",
                      "format": "int32",
                      "nullable": true,
                      "example": 8
                    },
                    "processorType": {
                      "type": "string",
                      "description": "The type of processors in the computer.",
                      "nullable": true,
                      "example": "11th Gen Intel Core i7-1185G7 @ 3.00GHz (3.00 GHz)"
                    },
                    "processorSpeed": {
                      "type": "integer",
                      "description": "The speed of the processor in the computer in MHz.",
                      "format": "int32",
                      "nullable": true,
                      "example": 2995
                    },
                    "memorySlots": {
                      "type": "integer",
                      "description": "The total number of memory slots in the computer.",
                      "format": "int32",
                      "nullable": true,
                      "example": 8
                    },
                    "memorySlotsAvailable": {
                      "type": "integer",
                      "description": "The number of available memory slots in the computer.",
                      "format": "int32",
                      "nullable": true,
                      "example": 2
                    },
                    "physicalMemory": {
                      "type": "integer",
                      "description": "The amount of physical memory in the computer.",
                      "format": "int32",
                      "nullable": true,
                      "example": 16384
                    },
                    "systemDiskSpace": {
                      "type": "integer",
                      "description": "The total amount of system disk space in the computer in MB.",
                      "format": "int64",
                      "nullable": true,
                      "example": 957534
                    },
                    "systemDiskSpaceAvailable": {
                      "type": "integer",
                      "description": "The amount of available system disk space in the computer in MB.",
                      "format": "int64",
                      "nullable": true,
                      "example": 552150
                    },
                    "totalDiskSpace": {
                      "type": "integer",
                      "description": "The total amount of total disk space in the computer in MB.",
                      "format": "int64",
                      "nullable": true,
                      "example": 957534
                    },
                    "totalDiskSpaceAvailable": {
                      "type": "integer",
                      "description": "The amount of available disk space in the computer in MB.",
                      "format": "int64",
                      "nullable": true,
                      "example": 552150
                    },
                    "totalDiskSpaceUsed": {
                      "type": "integer",
                      "description": "The total amount of disk space used in the computer in MB.",
                      "format": "int64",
                      "nullable": true,
                      "example": 405384
                    },
                    "socketCount": {
                      "type": "integer",
                      "description": "The number of sockets in the computer.",
                      "format": "byte",
                      "nullable": true,
                      "example": 2
                    },
                    "isSocketCountManualOverrideEnabled": {
                      "type": "boolean",
                      "description": "```true``` if the socket count manual override of the computer is enabled; otherwise, ```false```.",
                      "example": true
                    },
                    "chipModulesPerProcessor": {
                      "type": "integer",
                      "description": "The number of chip modules per processor.",
                      "format": "byte",
                      "nullable": true,
                      "example": 2
                    },
                    "processorManufacturer": {
                      "type": "string",
                      "description": "The manufacturer of the processors of the computer.",
                      "nullable": true,
                      "example": "Intel"
                    },
                    "logicalProcessorCount": {
                      "type": "integer",
                      "description": "The number of logical processors in the computer.",
                      "format": "int32",
                      "nullable": true,
                      "example": 12
                    }
                  }
                }
              ]
            },
            "ComputerLogicalDisk": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/BaseResponse"
                },
                {
                  "type": "object",
                  "description": "Response representing a logical disks of a computer.",
                  "additionalProperties": false,
                  "properties": {
                    "computerId": {
                      "type": "string",
                      "description": "The unique ID of the computer.",
                      "format": "guid",
                      "example": "14783145-7ead-4f6a-8f56-b7c3969bfc16"
                    },
                    "name": {
                      "type": "string",
                      "description": "The name of the logical disk.",
                      "nullable": true,
                      "example": "C:"
                    },
                    "volumeName": {
                      "type": "string",
                      "description": "The name of the volume of the logical disk.",
                      "nullable": true,
                      "example": "SYSTEM"
                    },
                    "isSystemDisk": {
                      "type": "boolean",
                      "description": "```true``` if the logical disk is a system disk; otherwise, ```false```.",
                      "example": true
                    },
                    "diskSizeMB": {
                      "type": "integer",
                      "description": "The size of the logical disk in MB.",
                      "format": "int32",
                      "example": 61087
                    },
                    "freeSpaceMB": {
                      "type": "integer",
                      "description": "The free space on the logical disk in MB.",
                      "format": "int32",
                      "example": 6243
                    },
                    "isUpdated": {
                      "type": "boolean",
                      "description": "```true``` if the logical disk is updated; otherwise, ```false```.",
                      "example": true
                    }
                  }
                }
              ]
            },
            "FilteredResponseWithLinksOfComputerLogicalDisk": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/BaseResponse"
                },
                {
                  "type": "object",
                  "description": "Generic response class supporting filtering and including links.",
                  "additionalProperties": false,
                  "required": [
                    "items",
                    "pagination"
                  ],
                  "properties": {
                    "items": {
                      "type": "array",
                      "description": "A collection of items returned in the response.",
                      "items": {
                        "$ref": "#/components/schemas/ComputerLogicalDisk"
                      }
                    },
                    "pagination": {
                      "description": "The pagination details.",
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/PaginationResponse"
                        }
                      ]
                    }
                  }
                }
              ]
            },
            "ComputerLogonHistoryDetails": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/BaseResponse"
                },
                {
                  "type": "object",
                  "description": "Response representing computer logon history for a given computer and user.",
                  "additionalProperties": false,
                  "properties": {
                    "computerId": {
                      "type": "string",
                      "description": "The unique ID of the computer.",
                      "format": "guid",
                      "example": "0d779524-e2cf-4636-a701-65ce7c3f5763"
                    },
                    "userId": {
                      "type": "string",
                      "description": "The unique ID of the user.",
                      "format": "guid",
                      "example": "c5a87d81-b035-4b38-88f8-13fabd790764"
                    },
                    "lastLogon": {
                      "type": "string",
                      "description": "The last logon of the given user on the given computer.",
                      "format": "date-time",
                      "example": "2024-03-24T12:52:20Z"
                    },
                    "logonCount": {
                      "type": "integer",
                      "description": "The logon count for a user on one computer.",
                      "format": "int32",
                      "example": 10
                    }
                  }
                }
              ]
            },
            "ComputerLogonHistory": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ComputerLogonHistoryDetails"
                },
                {
                  "type": "object",
                  "description": "Response representing computer logon history for a given computer and user.",
                  "additionalProperties": false
                }
              ]
            },
            "FilteredResponseWithLinksOfComputerLogonHistory": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/BaseResponse"
                },
                {
                  "type": "object",
                  "description": "Generic response class supporting filtering and including links.",
                  "additionalProperties": false,
                  "required": [
                    "items",
                    "pagination"
                  ],
                  "properties": {
                    "items": {
                      "type": "array",
                      "description": "A collection of items returned in the response.",
                      "items": {
                        "$ref": "#/components/schemas/ComputerLogonHistory"
                      }
                    },
                    "pagination": {
                      "description": "The pagination details.",
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/PaginationResponse"
                        }
                      ]
                    }
                  }
                }
              ]
            },
            "ComputerMonitor": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/BaseResponse"
                },
                {
                  "type": "object",
                  "description": "Response representing a monitor of a computer.",
                  "additionalProperties": false,
                  "properties": {
                    "computerId": {
                      "type": "string",
                      "description": "The unique ID of the computer.",
                      "format": "guid",
                      "example": "636d9b38-1afd-4b96-8998-01d475cc0f36"
                    },
                    "name": {
                      "type": "string",
                      "description": "The name of the computer monitor.",
                      "nullable": true,
                      "example": "Intel UHD Graphics"
                    },
                    "maxResolution": {
                      "type": "string",
                      "description": "The max resolution of the monitor.",
                      "nullable": true,
                      "example": "2560 x 1600"
                    },
                    "isUpdated": {
                      "type": "boolean",
                      "description": "```true``` if the computer monitor is updated; otherwise, ```false```."
                    }
                  }
                }
              ]
            },
            "ComputerNetworkAdapters": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/BaseResponse"
                },
                {
                  "type": "object",
                  "description": "Response representing network adapter of a computer.",
                  "additionalProperties": false,
                  "properties": {
                    "computerId": {
                      "type": "string",
                      "description": "The unique ID of the computer.",
                      "format": "guid",
                      "example": "62991e94-b8c3-4227-a7cb-a853f2e6e4cc"
                    },
                    "name": {
                      "type": "string",
                      "description": "The name of the computer network adapter.",
                      "nullable": true,
                      "example": "Intel 82574L Gigabit Network Connection"
                    },
                    "ipAddress": {
                      "type": "string",
                      "description": "The IP address of the network adapter.",
                      "nullable": true,
                      "example": "10.20.19.130"
                    },
                    "macAddress": {
                      "type": "string",
                      "description": "The Mac address of the network adapter.",
                      "nullable": true,
                      "example": "00-50-56-8D-5D-B8"
                    }
                  }
                }
              ]
            },
            "FilteredResponseWithLinksOfComputerNetworkAdapters": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/BaseResponse"
                },
                {
                  "type": "object",
                  "description": "Generic response class supporting filtering and including links.",
                  "additionalProperties": false,
                  "required": [
                    "items",
                    "pagination"
                  ],
                  "properties": {
                    "items": {
                      "type": "array",
                      "description": "A collection of items returned in the response.",
                      "items": {
                        "$ref": "#/components/schemas/ComputerNetworkAdapters"
                      }
                    },
                    "pagination": {
                      "description": "The pagination details.",
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/PaginationResponse"
                        }
                      ]
                    }
                  }
                }
              ]
            },
            "ComputerProcessor": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/BaseResponse"
                },
                {
                  "type": "object",
                  "description": "Response representing processor of a computer.",
                  "additionalProperties": false,
                  "properties": {
                    "computerId": {
                      "type": "string",
                      "description": "The unique ID of the computer.",
                      "format": "guid",
                      "example": "94cdfe57-81e2-4af6-99f4-44d15b3b6fb6"
                    },
                    "processorCount": {
                      "type": "integer",
                      "description": "The number of processors in the computer.",
                      "format": "int32",
                      "example": 2
                    },
                    "coreCount": {
                      "type": "integer",
                      "description": "The number of cores in the computer.",
                      "format": "int32",
                      "example": 8
                    },
                    "processorType": {
                      "type": "string",
                      "description": "The type of processors in the computer.",
                      "nullable": true,
                      "example": "11th Gen Intel Core i7-1185G7 @ 3.00GHz (3.00 GHz)"
                    },
                    "processorSpeed": {
                      "type": "integer",
                      "description": "The speed of the processor in the computer in MHz.",
                      "format": "int32",
                      "example": 2995
                    },
                    "processorManufacturer": {
                      "type": "string",
                      "description": "The manufacturer of the processors of the computer.",
                      "nullable": true,
                      "example": "Intel"
                    }
                  }
                }
              ]
            },
            "FilteredResponseWithLinksOfComputerProcessor": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/BaseResponse"
                },
                {
                  "type": "object",
                  "description": "Generic response class supporting filtering and including links.",
                  "additionalProperties": false,
                  "required": [
                    "items",
                    "pagination"
                  ],
                  "properties": {
                    "items": {
                      "type": "array",
                      "description": "A collection of items returned in the response.",
                      "items": {
                        "$ref": "#/components/schemas/ComputerProcessor"
                      }
                    },
                    "pagination": {
                      "description": "The pagination details.",
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/PaginationResponse"
                        }
                      ]
                    }
                  }
                }
              ]
            },
            "ComputerSocketMapDetails": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/BaseResponse"
                },
                {
                  "type": "object",
                  "description": "Response representing socket map for a computer.",
                  "additionalProperties": false,
                  "properties": {
                    "computerId": {
                      "type": "string",
                      "description": "The unique ID of the computer.",
                      "format": "guid",
                      "example": "cf5be788-06be-4496-91b0-bfaa8c239e96"
                    },
                    "manufacturer": {
                      "type": "string",
                      "description": "The manufacturer of the sockets in the computer.",
                      "nullable": true,
                      "example": "Intel"
                    },
                    "model": {
                      "type": "string",
                      "description": "The model of the sockets in the computer.",
                      "nullable": true,
                      "example": "LGA 1151"
                    },
                    "socketCount": {
                      "type": "integer",
                      "description": "The number of sockets in the computer.",
                      "format": "int32",
                      "example": 2
                    }
                  }
                }
              ]
            },
            "ComputerRegistry": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/BaseResponse"
                },
                {
                  "type": "object",
                  "description": "Response representing registry content of a computer.",
                  "additionalProperties": false,
                  "properties": {
                    "computerId": {
                      "type": "string",
                      "description": "The unique ID of the computer.",
                      "format": "guid",
                      "nullable": true,
                      "example": "81a160b4-75cc-4732-8d30-d8d5bd623969"
                    },
                    "registryKeyName": {
                      "type": "string",
                      "description": "The name of the registry key on the computer.",
                      "nullable": true,
                      "example": "HKEY_USERS\\Software\\Adobe\\Adobe Acrobat\\DC\\AVEntitlement"
                    },
                    "registryValueName": {
                      "type": "string",
                      "description": "The value name of the record in registry key on the computer.",
                      "nullable": true,
                      "example": "bAppInitialized"
                    },
                    "registryValueData": {
                      "type": "string",
                      "description": "The value data of the record in registry key on the computer.",
                      "nullable": true,
                      "example": "1"
                    }
                  }
                }
              ]
            },
            "FilteredResponseWithLinksOfComputerRegistry": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/BaseResponse"
                },
                {
                  "type": "object",
                  "description": "Generic response class supporting filtering and including links.",
                  "additionalProperties": false,
                  "required": [
                    "items",
                    "pagination"
                  ],
                  "properties": {
                    "items": {
                      "type": "array",
                      "description": "A collection of items returned in the response.",
                      "items": {
                        "$ref": "#/components/schemas/ComputerRegistry"
                      }
                    },
                    "pagination": {
                      "description": "The pagination details.",
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/PaginationResponse"
                        }
                      ]
                    }
                  }
                }
              ]
            },
            "ComputerDetails": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/BaseResponse"
                },
                {
                  "type": "object",
                  "description": "Response representing details of a computer.",
                  "additionalProperties": false,
                  "required": [
                    "id"
                  ],
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The unique ID of the computer.",
                      "format": "guid",
                      "minLength": 1,
                      "example": "5043cc04-3ef2-4882-a3be-8d08b4f402c7"
                    },
                    "scanIdentifier": {
                      "type": "string",
                      "description": "The identifier used by the scan.",
                      "nullable": true,
                      "example": "MAC-C02GD9DUML7H"
                    },
                    "hostName": {
                      "type": "string",
                      "description": "The host name of the computer.",
                      "nullable": true,
                      "example": "AM21-S42MONITOR"
                    },
                    "domain": {
                      "type": "string",
                      "description": "The domain of the computer.",
                      "nullable": true,
                      "example": "APAC"
                    },
                    "lastScanDate": {
                      "type": "string",
                      "description": "The last date that the computer was scanned.",
                      "format": "date-time",
                      "example": "2024-03-24T12:52:20Z"
                    },
                    "biosSerialNumber": {
                      "type": "string",
                      "description": "The BIOS serial number of the computer.",
                      "nullable": true,
                      "example": "43-01-10-TX"
                    },
                    "biosVersion": {
                      "type": "string",
                      "description": "The BIOS version of the computer.",
                      "nullable": true,
                      "example": "1.26.0"
                    },
                    "biosDate": {
                      "type": "string",
                      "description": "The BIOS date of the computer.",
                      "format": "date-time",
                      "nullable": true,
                      "example": "2024-03-24T12:52:20Z"
                    },
                    "manufacturer": {
                      "type": "string",
                      "description": "The manufacturer of the computer.",
                      "nullable": true,
                      "example": "Lenovo"
                    },
                    "manufacturerWebsite": {
                      "type": "string",
                      "description": "Website of the computer's manufacturer.",
                      "nullable": true,
                      "example": "https://www.lenovo.com"
                    },
                    "model": {
                      "type": "string",
                      "description": "The model of the computer.",
                      "nullable": true,
                      "example": "T480s"
                    },
                    "isPortable": {
                      "type": "boolean",
                      "description": "```true``` if the computer is portable; otherwise, ```false```.",
                      "nullable": true,
                      "example": true
                    },
                    "infoTransferDate": {
                      "type": "string",
                      "description": "The date of information transfer for the computer.",
                      "format": "date-time",
                      "example": "2024-03-24T12:52:20Z"
                    },
                    "clientInstallDate": {
                      "type": "string",
                      "description": "The date the client was installed on the computer.",
                      "format": "date-time",
                      "nullable": true,
                      "example": "2024-03-24T12:52:20Z"
                    },
                    "clientVersion": {
                      "type": "string",
                      "description": "The version of the client on the computer.",
                      "nullable": true,
                      "example": "6.14.3"
                    },
                    "clientSiteName": {
                      "type": "string",
                      "description": "The site name of the client on the computer.",
                      "nullable": true,
                      "example": "snow"
                    },
                    "clientConfigurationName": {
                      "type": "string",
                      "description": "The configuration name of the client on the computer.",
                      "nullable": true,
                      "example": "SnowAtlas"
                    },
                    "scannerVersion": {
                      "type": "string",
                      "description": "The version of the scanner for the computer.",
                      "nullable": true,
                      "example": "7.0.0"
                    },
                    "quarantineDate": {
                      "type": "string",
                      "description": "The quarantine date of the computer, if computer was quarantined.",
                      "format": "date-time",
                      "nullable": true,
                      "example": "2024-03-24T12:52:20Z"
                    },
                    "isQuarantineManagementDisabled": {
                      "type": "boolean",
                      "description": "```true``` if the computer has quarantine management disabled; otherwise, ```false```.",
                      "nullable": true,
                      "example": true
                    },
                    "operatingSystem": {
                      "type": "string",
                      "description": "The operating system of the computer.",
                      "nullable": true,
                      "example": "Microsoft Windows 11 Pro"
                    },
                    "operatingSystemId": {
                      "type": "string",
                      "description": "The unique ID of the operating system of the computer.",
                      "format": "guid",
                      "nullable": true,
                      "example": "c27c14a7-dcec-4f8e-b08e-cdb7263b5378"
                    },
                    "operatingSystemServicePack": {
                      "type": "string",
                      "description": "The service pack of the operating system of the computer.",
                      "nullable": true,
                      "example": "SP1"
                    },
                    "operatingSystemSerialNumber": {
                      "type": "string",
                      "description": "The serial number of the operating system of the computer.",
                      "nullable": true,
                      "example": "V6E3X-S6J5H-L5F5P-M4M2Y"
                    },
                    "ipAddress": {
                      "type": "string",
                      "description": "The IP address of the computer.",
                      "nullable": true,
                      "example": "10.20.20.77"
                    },
                    "isVirtual": {
                      "type": "boolean",
                      "description": "```true``` if the computer is virtual; otherwise, ```false```.",
                      "nullable": true,
                      "example": true
                    },
                    "hostComputerId": {
                      "type": "string",
                      "description": "The unique ID of the host computer if present.",
                      "format": "guid",
                      "nullable": true,
                      "example": "037e6448-6ad3-4279-800d-010677485bbb"
                    },
                    "siblingComputerId": {
                      "type": "string",
                      "description": "The unique ID of the sibling computer if present.",
                      "format": "guid",
                      "nullable": true,
                      "example": "687e2c50-6900-463a-b470-8c12e3677be8"
                    },
                    "isUpdated": {
                      "type": "boolean",
                      "description": "```true``` if the computer is updated; otherwise, ```false```.",
                      "nullable": true,
                      "example": true
                    },
                    "is64bit": {
                      "type": "boolean",
                      "description": "```true``` if the computer is 64 bit; otherwise, ```false```.",
                      "example": true
                    },
                    "isServer": {
                      "type": "boolean",
                      "description": "```true``` if the computer is a server; otherwise, ```false```.",
                      "nullable": true,
                      "example": true
                    },
                    "hypervisorName": {
                      "type": "string",
                      "description": "The hypervisor name of the computer.",
                      "nullable": true,
                      "example": "VMware Virtual Platform"
                    },
                    "isVdi": {
                      "type": "boolean",
                      "description": "```true``` if the computer uses virtual desktop infrastructure; otherwise, ```false```.",
                      "nullable": true,
                      "example": true
                    },
                    "processorValueUnit": {
                      "type": "integer",
                      "description": "The process value unit of the computer.",
                      "format": "int32",
                      "nullable": true,
                      "example": 32
                    },
                    "reportingDate": {
                      "type": "string",
                      "description": "The reporting date of the computer.",
                      "format": "date-time",
                      "nullable": true,
                      "example": "2024-03-24T12:52:20Z"
                    },
                    "architecture": {
                      "type": "string",
                      "description": "The architecture of the computer.",
                      "nullable": true,
                      "example": "64-bit"
                    },
                    "organizationId": {
                      "type": "string",
                      "description": "The unique ID of the organization to which the computer belongs.",
                      "format": "guid",
                      "nullable": true,
                      "example": "293cf227-bf7f-4919-b664-791f3f49e1ef"
                    },
                    "status": {
                      "type": "string",
                      "description": "The status of the computer.",
                      "nullable": true,
                      "example": "Active"
                    },
                    "isAutoEditingDisabled": {
                      "type": "boolean",
                      "description": "```true``` if the auto editing is disabled for the computer; otherwise, ```false```.",
                      "nullable": true,
                      "example": true
                    },
                    "purchaseDate": {
                      "type": "string",
                      "description": "The date on which the computer was purchased.",
                      "format": "date-time",
                      "nullable": true,
                      "example": "2024-03-24T12:52:20Z"
                    },
                    "purchaseValue": {
                      "type": "number",
                      "description": "The amount for which the computer was purchased.",
                      "format": "decimal",
                      "nullable": true,
                      "example": 2461.32
                    },
                    "purchaseCurrency": {
                      "type": "string",
                      "description": "The currency in which the computer was purchased.",
                      "nullable": true,
                      "example": "EUR"
                    },
                    "purchaseValueBase": {
                      "type": "number",
                      "description": "The value base of the purchase of the computer.",
                      "format": "decimal",
                      "nullable": true,
                      "example": 2500.32
                    },
                    "invoiceReference": {
                      "type": "string",
                      "description": "The invoice reference for the purchase of the computer.",
                      "nullable": true,
                      "example": "2024/03/63729P"
                    },
                    "notes": {
                      "type": "string",
                      "description": "The notes associated with the purchase of the computer.",
                      "nullable": true,
                      "example": "Purchased in a set with printer"
                    },
                    "securityCode": {
                      "type": "string",
                      "description": "The security code for the computer.",
                      "nullable": true,
                      "example": "A563Z"
                    },
                    "updatedDate": {
                      "type": "string",
                      "description": "The date the computer was updated.",
                      "format": "date-time",
                      "nullable": true,
                      "example": "2024-03-24T12:52:20Z"
                    },
                    "isIncludedInWindowsServerRequirement": {
                      "type": "boolean",
                      "description": "```true``` if the computer is included in the Windows Server requirement; otherwise, ```false```.",
                      "nullable": true,
                      "example": true
                    },
                    "mostRecentUser": {
                      "type": "string",
                      "description": "The unique ID of the most recent user of the computer.",
                      "format": "guid",
                      "nullable": true,
                      "example": "77f8f11f-e4f8-4bed-8e44-b78d66244302"
                    },
                    "mostFrequentUser": {
                      "type": "string",
                      "description": "The unique ID of the most frequent user of the computer.",
                      "format": "guid",
                      "nullable": true,
                      "example": "f2c35e21-aba4-4e0d-8c14-f3033e7b1fb7"
                    },
                    "vendor": {
                      "type": "string",
                      "description": "The vendor of the computer.",
                      "nullable": true,
                      "example": "Dell Inc."
                    }
                  }
                }
              ]
            },
            "Computer": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/BaseResponse"
                },
                {
                  "type": "object",
                  "description": "Response representing a computer.",
                  "additionalProperties": false,
                  "required": [
                    "id",
                    "hostName",
                    "lastScanDate",
                    "status"
                  ],
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The unique ID of the computer.",
                      "format": "guid",
                      "minLength": 1,
                      "example": "5043cc04-3ef2-4882-a3be-8d08b4f402c7"
                    },
                    "hostName": {
                      "type": "string",
                      "description": "The host name of the computer.",
                      "minLength": 1,
                      "example": "AM21-S42MONITOR"
                    },
                    "hostComputerId": {
                      "type": "string",
                      "description": "The unique ID of the host computer.",
                      "format": "guid",
                      "nullable": true,
                      "example": "035613f6-26a5-4929-94f0-ed10a991438a"
                    },
                    "mostFrequentUser": {
                      "type": "string",
                      "description": "The unique ID of the most frequent user of the computer.",
                      "format": "guid",
                      "nullable": true,
                      "example": "f2c35e21-aba4-4e0d-8c14-f3033e7b1fb7"
                    },
                    "mostRecentUser": {
                      "type": "string",
                      "description": "The unique ID of the most recent user of the computer.",
                      "format": "guid",
                      "nullable": true,
                      "example": "77f8f11f-e4f8-4bed-8e44-b78d66244302"
                    },
                    "manufacturer": {
                      "type": "string",
                      "description": "The manufacturer of the computer.",
                      "nullable": true,
                      "example": "Lenovo"
                    },
                    "isPortable": {
                      "type": "boolean",
                      "description": "```true``` if the computer is portable; otherwise, ```false```.",
                      "nullable": true,
                      "example": true
                    },
                    "isVirtual": {
                      "type": "boolean",
                      "description": "```true``` if the computer is virtual; otherwise, ```false```.",
                      "nullable": true,
                      "example": true
                    },
                    "isServer": {
                      "type": "boolean",
                      "description": "```true``` if the computer is a server; otherwise, ```false```.",
                      "nullable": true,
                      "example": true
                    },
                    "model": {
                      "type": "string",
                      "description": "The model of the computer.",
                      "nullable": true,
                      "example": "T480s"
                    },
                    "operatingSystem": {
                      "type": "string",
                      "description": "The operating system of the computer.",
                      "nullable": true,
                      "example": "Microsoft Windows 11 Pro"
                    },
                    "vendor": {
                      "type": "string",
                      "description": "The vendor of the computer.",
                      "nullable": true,
                      "example": "Dell Inc."
                    },
                    "domain": {
                      "type": "string",
                      "description": "The domain of the computer.",
                      "nullable": true,
                      "example": "APAC"
                    },
                    "ipAddress": {
                      "type": "string",
                      "description": "The IP address of the computer.",
                      "nullable": true,
                      "example": "10.20.20.77"
                    },
                    "isVDI": {
                      "type": "boolean",
                      "description": "```true``` if the computer uses virtual desktop infrastructure; otherwise, ```false```.",
                      "nullable": true,
                      "example": true
                    },
                    "lastScanDate": {
                      "type": "string",
                      "description": "The last date that the computer was scanned.",
                      "format": "date-time",
                      "minLength": 1,
                      "example": "2024-03-24T12:52:20Z"
                    },
                    "status": {
                      "type": "string",
                      "description": "The status of the computer.",
                      "minLength": 1,
                      "example": "Active"
                    },
                    "organizationId": {
                      "type": "string",
                      "description": "The unique ID of the organization to which the computer belongs.",
                      "format": "guid",
                      "nullable": true,
                      "example": "293cf227-bf7f-4919-b664-791f3f49e1ef"
                    }
                  }
                }
              ]
            },
            "FilteredResponseWithLinksOfComputer": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/BaseResponse"
                },
                {
                  "type": "object",
                  "description": "Generic response class supporting filtering and including links.",
                  "additionalProperties": false,
                  "required": [
                    "items",
                    "pagination"
                  ],
                  "properties": {
                    "items": {
                      "type": "array",
                      "description": "A collection of items returned in the response.",
                      "items": {
                        "$ref": "#/components/schemas/Computer"
                      }
                    },
                    "pagination": {
                      "description": "The pagination details.",
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/PaginationResponse"
                        }
                      ]
                    }
                  }
                }
              ]
            },
            "DeleteComputersResponse": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "message": {
                  "type": "string",
                  "nullable": true
                }
              }
            },
            "CollectionResponseOfDeleteComputersResponse": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "collection": {
                  "type": "array",
                  "nullable": true,
                  "items": {
                    "$ref": "#/components/schemas/DeleteComputersResponse"
                  }
                },
                "totalRowsCount": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "ObjectResponse": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "message": {
                  "type": "string",
                  "nullable": true
                }
              }
            },
            "ArchiveComputersRequest": {
              "type": "object",
              "description": "Request to archive multiple computers.",
              "additionalProperties": false,
              "properties": {
                "computerIds": {
                  "type": "array",
                  "description": "A collection of unique IDs of computers to archive.",
                  "nullable": true,
                  "items": {
                    "type": "string",
                    "format": "guid"
                  }
                }
              }
            },
            "ComputerEnvironmentVariables": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/BaseResponse"
                },
                {
                  "type": "object",
                  "description": "Response representing environment variables present on a computer.",
                  "additionalProperties": false,
                  "properties": {
                    "computerId": {
                      "type": "string",
                      "description": "The unique ID of the computer.",
                      "format": "guid",
                      "example": "ae739332-5f44-4c70-aec5-251c841366f1"
                    },
                    "environmentVariableName": {
                      "type": "string",
                      "description": "The name of the environment variables.",
                      "nullable": true,
                      "example": "CommonProgramW6432"
                    },
                    "environmentVariableValue": {
                      "type": "string",
                      "description": "The value of the environment variables.",
                      "nullable": true,
                      "example": "C:\\Program Files\\Common Files"
                    }
                  }
                }
              ]
            },
            "FilteredResponseWithLinksOfComputerEnvironmentVariables": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/BaseResponse"
                },
                {
                  "type": "object",
                  "description": "Generic response class supporting filtering and including links.",
                  "additionalProperties": false,
                  "required": [
                    "items",
                    "pagination"
                  ],
                  "properties": {
                    "items": {
                      "type": "array",
                      "description": "A collection of items returned in the response.",
                      "items": {
                        "$ref": "#/components/schemas/ComputerEnvironmentVariables"
                      }
                    },
                    "pagination": {
                      "description": "The pagination details.",
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/PaginationResponse"
                        }
                      ]
                    }
                  }
                }
              ]
            }
          },
          "securitySchemes": {
            "BearerAuth": {
              "type": "http",
              "scheme": "bearer",
              "bearerFormat": "JWT"
            }
          }
        },
        "tags": [
          {
            "name": "Computer application metering"
          },
          {
            "name": "Computer applications"
          },
          {
            "name": "Computer contracts"
          },
          {
            "name": "Computer costs"
          },
          {
            "name": "Computer display adapter"
          },
          {
            "name": "Computer drives"
          },
          {
            "name": "Computer environment variables"
          },
          {
            "name": "Computer hardware"
          },
          {
            "name": "Computer logical disks"
          },
          {
            "name": "Computer logon history"
          },
          {
            "name": "Computer monitors"
          },
          {
            "name": "Computer network adapters"
          },
          {
            "name": "Computer processors"
          },
          {
            "name": "Computer registries"
          },
          {
            "name": "Computers"
          }
        ]
      },
      "bundle": {
        "openapi": "3.0.0",
        "info": {
          "title": "Product name: Computers API",
          "description": "API for interacting with computers.",
          "contact": {
            "name": "Snow Software, Inc.",
            "url": "https://www.snowsoftware.com"
          },
          "version": "0.0.0"
        },
        "servers": [
          {
            "url": "https://{region}.snowsoftware.io",
            "variables": {
              "region": {
                "enum": [
                  "westeurope",
                  "australiasoutheast",
                  "eastus2",
                  "uksouth"
                ],
                "default": "westeurope"
              }
            }
          }
        ],
        "paths": {
          "/api/sam/estate/v1/computers-metering": {
            "get": {
              "tags": [
                "Computer application metering"
              ],
              "summary": "Get application metering",
              "description": "Returns a collection of metric tracking data.",
              "operationId": "getApplicationMetering",
              "parameters": [
                {
                  "name": "page_number",
                  "in": "query",
                  "description": "The page number.",
                  "schema": {
                    "type": "integer",
                    "default": 1,
                    "minimum": 1
                  }
                },
                {
                  "name": "page_size",
                  "in": "query",
                  "description": "The maximum number of items in the response.",
                  "schema": {
                    "type": "integer",
                    "default": 100,
                    "minimum": 1
                  }
                },
                {
                  "name": "filter",
                  "in": "query",
                  "description": "The fields which you can use to filter the results. Format of the query string parameter:\n```\n?filter=<filter name> <operator> <value>\n```\nFilter name | Description | Data type | Example\n:--- | --- | --- | ---\n\nFor more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).\n",
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/FilteredResponseWithLinksOfComputerApplicationMetering"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.computer.r"
                  ]
                }
              ]
            }
          },
          "/api/sam/estate/v1/computers/{id}/metering": {
            "get": {
              "tags": [
                "Computer application metering"
              ],
              "summary": "Get application metering by computer",
              "description": "Returns a collection of metric tracking data for a given computer.",
              "operationId": "getComputerApplicationMetering",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the computer.",
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "page_number",
                  "in": "query",
                  "description": "The page number.",
                  "schema": {
                    "type": "integer",
                    "default": 1,
                    "minimum": 1
                  }
                },
                {
                  "name": "page_size",
                  "in": "query",
                  "description": "The maximum number of items in the response.",
                  "schema": {
                    "type": "integer",
                    "default": 100,
                    "minimum": 1
                  }
                },
                {
                  "name": "filter",
                  "in": "query",
                  "description": "The fields which you can use to filter the results. Format of the query string parameter:\n```\n?filter=<filter name> <operator> <value>\n```\nFilter name | Description | Data type | Example\n:--- | --- | --- | ---\n\nFor more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).\n",
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/FilteredResponseWithLinksOfComputerApplicationMetering"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.computer.r"
                  ]
                }
              ]
            }
          },
          "/api/sam/estate/v1/computers/{id}/applications": {
            "get": {
              "tags": [
                "Computer applications"
              ],
              "summary": "Get computer's applications",
              "description": "Returns a collection of applications for a given computer.",
              "operationId": "getComputerApplications",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the computer.",
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "page_number",
                  "in": "query",
                  "description": "The page number.",
                  "schema": {
                    "type": "integer",
                    "default": 1,
                    "minimum": 1
                  }
                },
                {
                  "name": "page_size",
                  "in": "query",
                  "description": "The maximum number of items in the response.",
                  "schema": {
                    "type": "integer",
                    "default": 100,
                    "minimum": 1
                  }
                },
                {
                  "name": "filter",
                  "in": "query",
                  "description": "The fields which you can use to filter the results. Format of the query string parameter:\n```\n?filter=<filter name> <operator> <value>\n```\nFilter name | Description | Data type | Example\n:--- | --- | --- | ---\n\nFor more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).\n",
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/FilteredResponseWithLinksOfComputerApplications"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.computer.r"
                  ]
                }
              ]
            }
          },
          "/api/sam/estate/v1/computers/{id}/applications/{applicationid}": {
            "get": {
              "tags": [
                "Computer applications"
              ],
              "summary": "Get computer application's details",
              "description": "Returns the details of an application record for a given computer.",
              "operationId": "getComputerApplicationDetails",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the computer.",
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "applicationid",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the application.",
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ComputerApplicationsDetails"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.computer.r"
                  ]
                }
              ]
            }
          },
          "/api/sam/estate/v1/computers-applications": {
            "get": {
              "tags": [
                "Computer applications"
              ],
              "summary": "Get all computers' applications",
              "description": "Returns a collection of applications for all computers.",
              "operationId": "getComputersApplications",
              "parameters": [
                {
                  "name": "page_number",
                  "in": "query",
                  "description": "The page number.",
                  "schema": {
                    "type": "integer",
                    "default": 1,
                    "minimum": 1
                  }
                },
                {
                  "name": "page_size",
                  "in": "query",
                  "description": "The maximum number of items in the response.",
                  "schema": {
                    "type": "integer",
                    "default": 100,
                    "minimum": 1
                  }
                },
                {
                  "name": "filter",
                  "in": "query",
                  "description": "The fields which you can use to filter the results. Format of the query string parameter:\n```\n?filter=<filter name> <operator> <value>\n```\nFilter name | Description | Data type | Example\n:--- | --- | --- | ---\n\nFor more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).\n",
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/FilteredResponseWithLinksOfComputerApplications"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.computer.r"
                  ]
                }
              ]
            }
          },
          "/api/sam/estate/v1/computers-application-usage": {
            "get": {
              "tags": [
                "Computer applications"
              ],
              "summary": "Get application usage collection",
              "description": "Returns a collection of application usage data.",
              "operationId": "getApplicationUsages",
              "parameters": [
                {
                  "name": "page_number",
                  "in": "query",
                  "description": "The page number.",
                  "schema": {
                    "type": "integer",
                    "default": 1,
                    "minimum": 1
                  }
                },
                {
                  "name": "page_size",
                  "in": "query",
                  "description": "The maximum number of items in the response.",
                  "schema": {
                    "type": "integer",
                    "default": 100,
                    "minimum": 1
                  }
                },
                {
                  "name": "filter",
                  "in": "query",
                  "description": "The fields which you can use to filter the results. Format of the query string parameter:\n```\n?filter=<filter name> <operator> <value>\n```\nFilter name | Description | Data type | Example\n:--- | --- | --- | ---\n\nFor more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).\n",
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/FilteredResponseWithLinksOfComputerApplicationUsage"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.computer.r"
                  ]
                }
              ]
            }
          },
          "/api/sam/estate/v1/computers-application-user-usage": {
            "get": {
              "tags": [
                "Computer applications"
              ],
              "summary": "Get application user usage",
              "description": "Returns a collection of application usage data.",
              "operationId": "getApplicationUserUsage",
              "parameters": [
                {
                  "name": "page_number",
                  "in": "query",
                  "description": "The page number.",
                  "schema": {
                    "type": "integer",
                    "default": 1,
                    "minimum": 1
                  }
                },
                {
                  "name": "page_size",
                  "in": "query",
                  "description": "The maximum number of items in the response.",
                  "schema": {
                    "type": "integer",
                    "default": 100,
                    "minimum": 1
                  }
                },
                {
                  "name": "filter",
                  "in": "query",
                  "description": "The fields which you can use to filter the results. Format of the query string parameter:\n```\n?filter=<filter name> <operator> <value>\n```\nFilter name | Description | Data type | Example\n:--- | --- | --- | ---\n\nFor more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).\n",
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/FilteredResponseWithLinksOfUserApplicationUsage"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.computer.r"
                  ]
                }
              ]
            }
          },
          "/api/sam/estate/v1/computers-application-usage/summary": {
            "get": {
              "tags": [
                "Computer applications"
              ],
              "summary": "Get application usage summary",
              "description": "Returns a collection of application usage summaries.",
              "operationId": "getApplicationUsageSummary",
              "parameters": [
                {
                  "name": "page_number",
                  "in": "query",
                  "description": "The page number.",
                  "schema": {
                    "type": "integer",
                    "default": 1,
                    "minimum": 1
                  }
                },
                {
                  "name": "page_size",
                  "in": "query",
                  "description": "The maximum number of items in the response.",
                  "schema": {
                    "type": "integer",
                    "default": 100,
                    "minimum": 1
                  }
                },
                {
                  "name": "filter",
                  "in": "query",
                  "description": "The fields which you can use to filter the results. Format of the query string parameter:\n```\n?filter=<filter name> <operator> <value>\n```\nFilter name | Description | Data type | Example\n:--- | --- | --- | ---\n\nFor more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).\n",
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/FilteredResponseWithLinksOfComputerApplicationUsageSummary"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.computer.r"
                  ]
                }
              ]
            }
          },
          "/api/sam/estate/v1/computers/{id}/contracts": {
            "get": {
              "tags": [
                "Computer contracts"
              ],
              "summary": "Get computer's contracts",
              "description": "Returns a collection of contracts for a given computer.",
              "operationId": "getComputerContracts",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the computer.",
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "page_number",
                  "in": "query",
                  "description": "The page number.",
                  "schema": {
                    "type": "integer",
                    "default": 1,
                    "minimum": 1
                  }
                },
                {
                  "name": "page_size",
                  "in": "query",
                  "description": "The maximum number of items in the response.",
                  "schema": {
                    "type": "integer",
                    "default": 100,
                    "minimum": 1
                  }
                },
                {
                  "name": "filter",
                  "in": "query",
                  "description": "The fields which you can use to filter the results. Format of the query string parameter:\n```\n?filter=<filter name> <operator> <value>\n```\nFilter name | Description | Data type | Example\n:--- | --- | --- | ---\n\nFor more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).\n",
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/FilteredResponseWithLinksOfComputerContract"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.computer.r"
                  ]
                }
              ]
            }
          },
          "/api/sam/estate/v1/computers/{id}/costs": {
            "get": {
              "tags": [
                "Computer costs"
              ],
              "summary": "Get computer's costs",
              "description": "Returns the details of a computer's costs.",
              "operationId": "getComputerCosts",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the computer.",
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ComputerCosts"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.computer.r"
                  ]
                }
              ]
            }
          },
          "/api/sam/estate/v1/computers/{id}/hardware/displayadapters": {
            "get": {
              "tags": [
                "Computer display adapter"
              ],
              "summary": "Get computer display adapters",
              "description": "Returns a collection of display adapter for a given computer.",
              "operationId": "getComputerDisplayAdapters",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the computer.",
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "page_number",
                  "in": "query",
                  "description": "The page number.",
                  "schema": {
                    "type": "integer",
                    "default": 1,
                    "minimum": 1
                  }
                },
                {
                  "name": "page_size",
                  "in": "query",
                  "description": "The maximum number of items in the response.",
                  "schema": {
                    "type": "integer",
                    "default": 100,
                    "minimum": 1
                  }
                },
                {
                  "name": "filter",
                  "in": "query",
                  "description": "The fields which you can use to filter the results. Format of the query string parameter:\n```\n?filter=<filter name> <operator> <value>\n```\nFilter name | Description | Data type | Example\n:--- | --- | --- | ---\n\nFor more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).\n",
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ComputerDisplayAdapter"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.computer.r"
                  ]
                }
              ]
            }
          },
          "/api/sam/estate/v1/computers/{id}/hardware/harddrives": {
            "get": {
              "tags": [
                "Computer drives"
              ],
              "summary": "Get computer drives",
              "description": "Returns a collection of hard drives for a given computer.",
              "operationId": "getComputerDrives",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the computer.",
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "page_number",
                  "in": "query",
                  "description": "The page number.",
                  "schema": {
                    "type": "integer",
                    "default": 1,
                    "minimum": 1
                  }
                },
                {
                  "name": "page_size",
                  "in": "query",
                  "description": "The maximum number of items in the response.",
                  "schema": {
                    "type": "integer",
                    "default": 100,
                    "minimum": 1
                  }
                },
                {
                  "name": "filter",
                  "in": "query",
                  "description": "The fields which you can use to filter the results. Format of the query string parameter:\n```\n?filter=<filter name> <operator> <value>\n```\nFilter name | Description | Data type | Example\n:--- | --- | --- | ---\n\nFor more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).\n",
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/FilteredResponseWithLinksOfComputerDrive"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.computer.r"
                  ]
                }
              ]
            }
          },
          "/api/sam/estate/v1/computers/{id}/hardware/opticaldrives": {
            "get": {
              "tags": [
                "Computer drives"
              ],
              "summary": "Get computer optical drives",
              "description": "Returns a collection of optical drives for a given computer.",
              "operationId": "getComputerOpticalDrives",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the computer.",
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "page_number",
                  "in": "query",
                  "description": "The page number.",
                  "schema": {
                    "type": "integer",
                    "default": 1,
                    "minimum": 1
                  }
                },
                {
                  "name": "page_size",
                  "in": "query",
                  "description": "The maximum number of items in the response.",
                  "schema": {
                    "type": "integer",
                    "default": 100,
                    "minimum": 1
                  }
                },
                {
                  "name": "filter",
                  "in": "query",
                  "description": "The fields which you can use to filter the results. Format of the query string parameter:\n```\n?filter=<filter name> <operator> <value>\n```\nFilter name | Description | Data type | Example\n:--- | --- | --- | ---\n\nFor more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).\n",
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/FilteredResponseWithLinksOfComputerDrive"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.computer.r"
                  ]
                }
              ]
            }
          },
          "/api/sam/estate/v1/computers/{id}/hardware": {
            "get": {
              "tags": [
                "Computer hardware"
              ],
              "summary": "Get computer's hardware details",
              "description": "Returns the details of a hardware for a given computer.",
              "operationId": "getComputerHardwareDetails",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the computer.",
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ComputerHardwareDetails"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.computer.r"
                  ]
                }
              ]
            }
          },
          "/api/sam/estate/v1/computers/{id}/hardware/disks/logical": {
            "get": {
              "tags": [
                "Computer logical disks"
              ],
              "summary": "Get computer's logical disks",
              "description": "Returns a collection of logical disks for a given computer.",
              "operationId": "getComputerLogicalDisks",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the computer.",
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "page_number",
                  "in": "query",
                  "description": "The page number.",
                  "schema": {
                    "type": "integer",
                    "default": 1,
                    "minimum": 1
                  }
                },
                {
                  "name": "page_size",
                  "in": "query",
                  "description": "The maximum number of items in the response.",
                  "schema": {
                    "type": "integer",
                    "default": 100,
                    "minimum": 1
                  }
                },
                {
                  "name": "filter",
                  "in": "query",
                  "description": "The fields which you can use to filter the results. Format of the query string parameter:\n```\n?filter=<filter name> <operator> <value>\n```\nFilter name | Description | Data type | Example\n:--- | --- | --- | ---\n\nFor more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).\n",
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/FilteredResponseWithLinksOfComputerLogicalDisk"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.computer.r"
                  ]
                }
              ]
            }
          },
          "/api/sam/estate/v1/computers/{id}/logonhistory": {
            "get": {
              "tags": [
                "Computer logon history"
              ],
              "summary": "Get computer's logon history",
              "description": "Returns a collection of computer logon histories.",
              "operationId": "getComputerLogonHistory",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the computer.",
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "page_number",
                  "in": "query",
                  "description": "The page number.",
                  "schema": {
                    "type": "integer",
                    "default": 1,
                    "minimum": 1
                  }
                },
                {
                  "name": "page_size",
                  "in": "query",
                  "description": "The maximum number of items in the response.",
                  "schema": {
                    "type": "integer",
                    "default": 100,
                    "minimum": 1
                  }
                },
                {
                  "name": "filter",
                  "in": "query",
                  "description": "The fields which you can use to filter the results. Format of the query string parameter:\n```\n?filter=<filter name> <operator> <value>\n```\nFilter name | Description | Data type | Example\n:--- | --- | --- | ---\n\nFor more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).\n",
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/FilteredResponseWithLinksOfComputerLogonHistory"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.computer.r"
                  ]
                }
              ]
            }
          },
          "/api/sam/estate/v1/computers-logonhistory/{userid}": {
            "get": {
              "tags": [
                "Computer logon history"
              ],
              "summary": "Get computer's logon history for a user",
              "description": "Returns a collection of computer logon histories for a given user.",
              "operationId": "getComputerLogonHistoryForUser",
              "parameters": [
                {
                  "name": "userid",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the user.",
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "page_number",
                  "in": "query",
                  "description": "The page number.",
                  "schema": {
                    "type": "integer",
                    "default": 1,
                    "minimum": 1
                  }
                },
                {
                  "name": "page_size",
                  "in": "query",
                  "description": "The maximum number of items in the response.",
                  "schema": {
                    "type": "integer",
                    "default": 100,
                    "minimum": 1
                  }
                },
                {
                  "name": "filter",
                  "in": "query",
                  "description": "The fields which you can use to filter the results. Format of the query string parameter:\n```\n?filter=<filter name> <operator> <value>\n```\nFilter name | Description | Data type | Example\n:--- | --- | --- | ---\n\nFor more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).\n",
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/FilteredResponseWithLinksOfComputerLogonHistory"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.computer.r"
                  ]
                }
              ]
            }
          },
          "/api/sam/estate/v1/computers/{id}/logonhistory/{userid}": {
            "get": {
              "tags": [
                "Computer logon history"
              ],
              "summary": "Get computer's logon history details",
              "description": "Returns the details of a logon histories for a given computer and user.",
              "operationId": "getComputerLogonHistoryDetails",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the computer.",
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "userid",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the user.",
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ComputerLogonHistoryDetails"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.computer.r"
                  ]
                }
              ]
            }
          },
          "/api/sam/estate/v1/computers/{id}/hardware/monitors": {
            "get": {
              "tags": [
                "Computer monitors"
              ],
              "summary": "Get computer's monitors",
              "description": "Returns a collection of monitors for a given computer.",
              "operationId": "getComputerMonitors",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the computer.",
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "page_number",
                  "in": "query",
                  "description": "The page number.",
                  "schema": {
                    "type": "integer",
                    "default": 1,
                    "minimum": 1
                  }
                },
                {
                  "name": "page_size",
                  "in": "query",
                  "description": "The maximum number of items in the response.",
                  "schema": {
                    "type": "integer",
                    "default": 100,
                    "minimum": 1
                  }
                },
                {
                  "name": "filter",
                  "in": "query",
                  "description": "The fields which you can use to filter the results. Format of the query string parameter:\n```\n?filter=<filter name> <operator> <value>\n```\nFilter name | Description | Data type | Example\n:--- | --- | --- | ---\n\nFor more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).\n",
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ComputerMonitor"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.computer.r"
                  ]
                }
              ]
            }
          },
          "/api/sam/estate/v1/computers/{id}/hardware/networkadapters": {
            "get": {
              "tags": [
                "Computer network adapters"
              ],
              "summary": "Get computer's network adapters",
              "description": "Returns a collection of network adapters for a computer.",
              "operationId": "getComputerNetworkAdapters",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the computer.",
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "page_number",
                  "in": "query",
                  "description": "The page number.",
                  "schema": {
                    "type": "integer",
                    "default": 1,
                    "minimum": 1
                  }
                },
                {
                  "name": "page_size",
                  "in": "query",
                  "description": "The maximum number of items in the response.",
                  "schema": {
                    "type": "integer",
                    "default": 100,
                    "minimum": 1
                  }
                },
                {
                  "name": "filter",
                  "in": "query",
                  "description": "The fields which you can use to filter the results. Format of the query string parameter:\n```\n?filter=<filter name> <operator> <value>\n```\nFilter name | Description | Data type | Example\n:--- | --- | --- | ---\n\nFor more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).\n",
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/FilteredResponseWithLinksOfComputerNetworkAdapters"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.computer.r"
                  ]
                }
              ]
            }
          },
          "/api/sam/estate/v1/computers-networkadapters": {
            "get": {
              "tags": [
                "Computer network adapters"
              ],
              "summary": "Get all network adapters",
              "description": "Returns a collection of network adapters.",
              "operationId": "getAllNetworkAdapters",
              "parameters": [
                {
                  "name": "page_number",
                  "in": "query",
                  "description": "The page number.",
                  "schema": {
                    "type": "integer",
                    "default": 1,
                    "minimum": 1
                  }
                },
                {
                  "name": "page_size",
                  "in": "query",
                  "description": "The maximum number of items in the response.",
                  "schema": {
                    "type": "integer",
                    "default": 100,
                    "minimum": 1
                  }
                },
                {
                  "name": "filter",
                  "in": "query",
                  "description": "The fields which you can use to filter the results. Format of the query string parameter:\n```\n?filter=<filter name> <operator> <value>\n```\nFilter name | Description | Data type | Example\n:--- | --- | --- | ---\n\nFor more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).\n",
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/FilteredResponseWithLinksOfComputerNetworkAdapters"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.computer.r"
                  ]
                }
              ]
            }
          },
          "/api/sam/estate/v1/computers/{id}/hardware/cpu": {
            "get": {
              "tags": [
                "Computer processors"
              ],
              "summary": "Get computer's processors",
              "description": "Returns a collection of computer processors.",
              "operationId": "getComputerProcessors",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the computer.",
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "page_number",
                  "in": "query",
                  "description": "The page number.",
                  "schema": {
                    "type": "integer",
                    "default": 1,
                    "minimum": 1
                  }
                },
                {
                  "name": "page_size",
                  "in": "query",
                  "description": "The maximum number of items in the response.",
                  "schema": {
                    "type": "integer",
                    "default": 100,
                    "minimum": 1
                  }
                },
                {
                  "name": "filter",
                  "in": "query",
                  "description": "The fields which you can use to filter the results. Format of the query string parameter:\n```\n?filter=<filter name> <operator> <value>\n```\nFilter name | Description | Data type | Example\n:--- | --- | --- | ---\n\nFor more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).\n",
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/FilteredResponseWithLinksOfComputerProcessor"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.computer.r"
                  ]
                }
              ]
            }
          },
          "/api/sam/estate/v1/computers/{id}/hardware/cpu/socketmap": {
            "get": {
              "tags": [
                "Computer processors"
              ],
              "summary": "Get computer's socket map details",
              "description": "Returns the details of a socket maps for a given computer.",
              "operationId": "getComputerSocketMapDetails",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the computer.",
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ComputerSocketMapDetails"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.computer.r"
                  ]
                }
              ]
            }
          },
          "/api/sam/estate/v1/computers/{id}/registry": {
            "get": {
              "tags": [
                "Computer registries"
              ],
              "summary": "Get computer's registries",
              "description": "Returns a collection of computer registries.",
              "operationId": "getComputerRegistries",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the computer.",
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "page_number",
                  "in": "query",
                  "description": "The page number.",
                  "schema": {
                    "type": "integer",
                    "default": 1,
                    "minimum": 1
                  }
                },
                {
                  "name": "page_size",
                  "in": "query",
                  "description": "The maximum number of items in the response.",
                  "schema": {
                    "type": "integer",
                    "default": 100,
                    "minimum": 1
                  }
                },
                {
                  "name": "filter",
                  "in": "query",
                  "description": "The fields which you can use to filter the results. Format of the query string parameter:\n```\n?filter=<filter name> <operator> <value>\n```\nFilter name | Description | Data type | Example\n:--- | --- | --- | ---\n\nFor more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).\n",
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/FilteredResponseWithLinksOfComputerRegistry"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.computer.r"
                  ]
                }
              ]
            }
          },
          "/api/sam/estate/v1/computers/{id}": {
            "get": {
              "tags": [
                "Computers"
              ],
              "summary": "Get computer details",
              "description": "Returns the details of a given computer.",
              "operationId": "getComputer",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the computer.",
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "page_number",
                  "in": "query",
                  "description": "The page number.",
                  "schema": {
                    "type": "integer",
                    "default": 1,
                    "minimum": 1
                  }
                },
                {
                  "name": "page_size",
                  "in": "query",
                  "description": "The maximum number of items in the response.",
                  "schema": {
                    "type": "integer",
                    "default": 100,
                    "minimum": 1
                  }
                },
                {
                  "name": "filter",
                  "in": "query",
                  "description": "The fields which you can use to filter the results. Format of the query string parameter:\n```\n?filter=<filter name> <operator> <value>\n```\nFilter name | Description | Data type | Example\n:--- | --- | --- | ---\n\nFor more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).\n",
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ComputerDetails"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.computer.r"
                  ]
                }
              ]
            },
            "delete": {
              "tags": [
                "Computers"
              ],
              "summary": "Delete computer",
              "description": "Removes the given computer.",
              "operationId": "deleteComputer",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "page_number",
                  "in": "query",
                  "description": "The page number.",
                  "schema": {
                    "type": "integer",
                    "default": 1,
                    "minimum": 1
                  }
                },
                {
                  "name": "page_size",
                  "in": "query",
                  "description": "The maximum number of items in the response.",
                  "schema": {
                    "type": "integer",
                    "default": 100,
                    "minimum": 1
                  }
                },
                {
                  "name": "filter",
                  "in": "query",
                  "description": "The fields which you can use to filter the results. Format of the query string parameter:\n```\n?filter=<filter name> <operator> <value>\n```\nFilter name | Description | Data type | Example\n:--- | --- | --- | ---\n\nFor more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).\n",
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/DeleteComputersResponse"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "405": {
                  "description": "Not Allowed - The operation you requested is known, but not currently supported.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.computer.d"
                  ]
                }
              ]
            },
            "put": {
              "tags": [
                "Computers"
              ],
              "summary": "Replace computer",
              "description": "Update computer.",
              "operationId": "replaceComputer",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ObjectResponse"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "405": {
                  "description": "Not Allowed - The operation you requested is known, but not currently supported.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.computer.u"
                  ]
                }
              ]
            }
          },
          "/api/sam/estate/v1/computers": {
            "get": {
              "tags": [
                "Computers"
              ],
              "summary": "Get computers collection",
              "description": "Returns a collection of computers.",
              "operationId": "getComputers",
              "parameters": [
                {
                  "name": "page_number",
                  "in": "query",
                  "description": "The page number.",
                  "schema": {
                    "type": "integer",
                    "default": 1,
                    "minimum": 1
                  }
                },
                {
                  "name": "page_size",
                  "in": "query",
                  "description": "The maximum number of items in the response.",
                  "schema": {
                    "type": "integer",
                    "default": 100,
                    "minimum": 1
                  }
                },
                {
                  "name": "filter",
                  "in": "query",
                  "description": "The fields which you can use to filter the results. Format of the query string parameter:\n```\n?filter=<filter name> <operator> <value>\n```\nFilter name | Description | Data type | Example\n:--- | --- | --- | ---\n\nFor more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).\n",
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/FilteredResponseWithLinksOfComputer"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.computer.r"
                  ]
                }
              ]
            },
            "delete": {
              "tags": [
                "Computers"
              ],
              "summary": "Delete computers",
              "description": "Removes computers for a given ids.",
              "operationId": "deleteComputers",
              "parameters": [
                {
                  "name": "page_number",
                  "in": "query",
                  "description": "The page number.",
                  "schema": {
                    "type": "integer",
                    "default": 1,
                    "minimum": 1
                  }
                },
                {
                  "name": "page_size",
                  "in": "query",
                  "description": "The maximum number of items in the response.",
                  "schema": {
                    "type": "integer",
                    "default": 100,
                    "minimum": 1
                  }
                },
                {
                  "name": "filter",
                  "in": "query",
                  "description": "The fields which you can use to filter the results. Format of the query string parameter:\n```\n?filter=<filter name> <operator> <value>\n```\nFilter name | Description | Data type | Example\n:--- | --- | --- | ---\n\nFor more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).\n",
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CollectionResponseOfDeleteComputersResponse"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "405": {
                  "description": "Not Allowed - The operation you requested is known, but not currently supported.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.computer.d"
                  ]
                }
              ]
            }
          },
          "/api/sam/estate/v1/computers/{id}/archive": {
            "patch": {
              "tags": [
                "Computers"
              ],
              "summary": "Archive computer",
              "description": "Archive single computer.",
              "operationId": "archiveComputer",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the computer.",
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ObjectResponse"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "405": {
                  "description": "Not Allowed - The operation you requested is known, but not currently supported.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.computer.u"
                  ]
                }
              ]
            }
          },
          "/api/sam/estate/v1/computers/archive": {
            "patch": {
              "tags": [
                "Computers"
              ],
              "summary": "Archive computers",
              "description": "Archive multiple computers.",
              "operationId": "archiveComputers",
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/ArchiveComputersRequest"
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ObjectResponse"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "405": {
                  "description": "Not Allowed - The operation you requested is known, but not currently supported.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.computer.u"
                  ]
                }
              ]
            }
          },
          "/api/sam/estate/v1/computers/{id}/environment-variables": {
            "get": {
              "tags": [
                "Computer environment variables"
              ],
              "summary": "Get computer's environment variables",
              "description": "Returns a collection of environment variable for a given computer.",
              "operationId": "getEnvironmentVariablesForComputer",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the computer.",
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "page_number",
                  "in": "query",
                  "description": "The page number.",
                  "schema": {
                    "type": "integer",
                    "default": 1,
                    "minimum": 1
                  }
                },
                {
                  "name": "page_size",
                  "in": "query",
                  "description": "The maximum number of items in the response.",
                  "schema": {
                    "type": "integer",
                    "default": 100,
                    "minimum": 1
                  }
                },
                {
                  "name": "filter",
                  "in": "query",
                  "description": "The fields which you can use to filter the results. Format of the query string parameter:\n```\n?filter=<filter name> <operator> <value>\n```\nFilter name | Description | Data type | Example\n:--- | --- | --- | ---\n\nFor more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).\n",
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/FilteredResponseWithLinksOfComputerEnvironmentVariables"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.computer.r"
                  ]
                }
              ]
            }
          },
          "/api/sam/estate/v1/computers-environment-variables": {
            "get": {
              "tags": [
                "Computer environment variables"
              ],
              "summary": "Get computer environment variables",
              "description": "Returns a collection of computer environment variables.",
              "operationId": "getComputerEnvironmentVariables",
              "parameters": [
                {
                  "name": "page_number",
                  "in": "query",
                  "description": "The page number.",
                  "schema": {
                    "type": "integer",
                    "default": 1,
                    "minimum": 1
                  }
                },
                {
                  "name": "page_size",
                  "in": "query",
                  "description": "The maximum number of items in the response.",
                  "schema": {
                    "type": "integer",
                    "default": 100,
                    "minimum": 1
                  }
                },
                {
                  "name": "filter",
                  "in": "query",
                  "description": "The fields which you can use to filter the results. Format of the query string parameter:\n```\n?filter=<filter name> <operator> <value>\n```\nFilter name | Description | Data type | Example\n:--- | --- | --- | ---\n\nFor more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).\n",
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/FilteredResponseWithLinksOfComputerEnvironmentVariables"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.computer.r"
                  ]
                }
              ]
            }
          }
        },
        "components": {
          "schemas": {
            "PaginationResponse": {
              "type": "object",
              "description": "Generic response class for the pagination part.\nProperties are annotated using DataMemberAttribute so that we're aligned with REST style guide regarding the json payload.",
              "additionalProperties": false,
              "required": [
                "page_size",
                "page_number"
              ],
              "properties": {
                "page_size": {
                  "type": "integer",
                  "description": "The page size you requested.",
                  "format": "int32",
                  "example": 25
                },
                "page_number": {
                  "type": "integer",
                  "description": "The page number you requested.",
                  "format": "int32",
                  "example": 1
                },
                "total_pages": {
                  "type": "integer",
                  "description": "The total number of pages.",
                  "format": "int32",
                  "nullable": true,
                  "example": 10
                },
                "total_items": {
                  "type": "integer",
                  "description": "The total number of items.",
                  "format": "int32",
                  "nullable": true,
                  "example": 120
                }
              }
            },
            "Link": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "href": {
                  "type": "string",
                  "nullable": true
                },
                "rel": {
                  "type": "string",
                  "nullable": true
                },
                "method": {
                  "type": "string",
                  "nullable": true
                }
              }
            },
            "BaseResponse": {
              "type": "object",
              "description": "Base response class.",
              "x-abstract": true,
              "additionalProperties": false,
              "required": [
                "_links"
              ],
              "properties": {
                "_links": {
                  "type": "array",
                  "description": "A collection of links to related resources.",
                  "items": {
                    "$ref": "#/components/schemas/Link"
                  }
                }
              }
            },
            "ComputerApplicationMetering": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/BaseResponse"
                },
                {
                  "type": "object",
                  "description": "Response class for Computer application metric tracking.",
                  "additionalProperties": false,
                  "required": [
                    "computerId",
                    "metricId",
                    "applicationId"
                  ],
                  "properties": {
                    "computerId": {
                      "type": "string",
                      "description": "The unique ID of the computer.",
                      "format": "guid",
                      "minLength": 1,
                      "example": "a2c8ef89-cb18-49ea-b3c0-122d40fc0ba7"
                    },
                    "metricId": {
                      "type": "string",
                      "description": "The unique ID of the metric used.",
                      "format": "guid",
                      "minLength": 1,
                      "example": "ca90b444-dcd0-43ce-9190-0e51af24613c"
                    },
                    "applicationId": {
                      "type": "string",
                      "description": "The unique ID of the application.",
                      "format": "guid",
                      "minLength": 1,
                      "example": "6f1cbfb3-ecc2-4e1b-8376-537ace3503c2"
                    },
                    "initialRequirement": {
                      "type": "integer",
                      "description": "The initial requirement of the metric.",
                      "format": "int32",
                      "example": 5
                    },
                    "includedInBundle": {
                      "type": "integer",
                      "description": "The number of applications included in the bundle.",
                      "format": "int32",
                      "example": 5
                    },
                    "outsideMetricPeriod": {
                      "type": "integer",
                      "description": "The number of computers outside of the metric period.",
                      "format": "int32",
                      "example": 5
                    },
                    "secondaryUseRightsDesktopLaptop": {
                      "type": "integer",
                      "description": "The number of computers with secondary use rights for a desktop or laptop.",
                      "format": "int32",
                      "example": 5
                    },
                    "secondaryUseRightsDevice": {
                      "type": "integer",
                      "description": "The number of computers with secondary use rights for a device.",
                      "format": "int32",
                      "example": 5
                    },
                    "extendedCoverageForDcc": {
                      "type": "integer",
                      "description": "The number of computers with extended coverage for DCC.",
                      "format": "int32",
                      "example": 5
                    },
                    "extendedCoverageForHost": {
                      "type": "integer",
                      "description": "The number of computers with extended coverage for host.",
                      "format": "int32",
                      "example": 5
                    },
                    "multipleVersionEdition": {
                      "type": "integer",
                      "description": "The number of computers with multiple version editions.",
                      "format": "int32",
                      "example": 5
                    },
                    "virtualDesktopInfrastructure": {
                      "type": "integer",
                      "description": "The number of computers with virtual desktop infrastructure.",
                      "format": "int32",
                      "example": 5
                    },
                    "minimumRequirement": {
                      "type": "integer",
                      "description": "The minimum requirement for the metric.",
                      "format": "int32",
                      "example": 5
                    },
                    "coreFactor": {
                      "type": "integer",
                      "description": "The core factor for the metric.",
                      "format": "int32",
                      "example": 5
                    },
                    "physicalHost": {
                      "type": "integer",
                      "description": "The physical host for the metric.",
                      "format": "int32",
                      "example": 5
                    },
                    "requirement": {
                      "type": "integer",
                      "description": "The requirement for the metric.",
                      "format": "int32",
                      "example": 5
                    },
                    "computerAppExclusions": {
                      "type": "integer",
                      "description": "The number of computers which have application exclusions.",
                      "format": "int32",
                      "example": 5
                    },
                    "windowsServer": {
                      "type": "integer",
                      "description": "The number of computers which are Windows servers.",
                      "format": "int32",
                      "example": 5
                    },
                    "virtualMachine": {
                      "type": "integer",
                      "description": "The number of computers which are virtual machines.",
                      "format": "int32",
                      "example": 5
                    },
                    "unknownPhysicalHost": {
                      "type": "integer",
                      "description": "The number of computers with an unknown physical host.",
                      "format": "int32",
                      "example": 5
                    },
                    "manuallyExcluded": {
                      "type": "integer",
                      "description": "The number of computers manually excluded.",
                      "format": "int32",
                      "example": 5
                    },
                    "requirementMoved": {
                      "type": "integer",
                      "description": "The number of computers with the requirements moved.",
                      "format": "int32",
                      "example": 5
                    },
                    "windowsServerFlag": {
                      "type": "integer",
                      "description": "The number of computers with the Windows server flag.",
                      "format": "int32",
                      "example": 5
                    },
                    "sqlServer": {
                      "type": "integer",
                      "description": "The number of computers with the SQL server flag.",
                      "format": "int32",
                      "example": 5
                    }
                  }
                }
              ]
            },
            "FilteredResponseWithLinksOfComputerApplicationMetering": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/BaseResponse"
                },
                {
                  "type": "object",
                  "description": "Generic response class supporting filtering and including links.",
                  "additionalProperties": false,
                  "required": [
                    "items",
                    "pagination"
                  ],
                  "properties": {
                    "items": {
                      "type": "array",
                      "description": "A collection of items returned in the response.",
                      "items": {
                        "$ref": "#/components/schemas/ComputerApplicationMetering"
                      }
                    },
                    "pagination": {
                      "description": "The pagination details.",
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/PaginationResponse"
                        }
                      ]
                    }
                  }
                }
              ]
            },
            "ErrorContent": {
              "type": "object",
              "description": "Details of error.",
              "additionalProperties": false,
              "properties": {
                "code": {
                  "type": "integer",
                  "description": "Http error code.",
                  "format": "int32",
                  "example": 400
                },
                "message": {
                  "type": "string",
                  "description": "Additional error message.",
                  "nullable": true
                }
              }
            },
            "ErrorResponse": {
              "type": "object",
              "description": "Response representing error.",
              "additionalProperties": false,
              "required": [
                "error"
              ],
              "properties": {
                "error": {
                  "description": "The error details.",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorContent"
                    }
                  ]
                }
              }
            },
            "ComputerApplications": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/BaseResponse"
                },
                {
                  "type": "object",
                  "description": "Response class for computer applications.",
                  "additionalProperties": false,
                  "properties": {
                    "computerId": {
                      "type": "string",
                      "description": "The unique ID of the computer.",
                      "format": "guid",
                      "example": "29ce62ac-d575-4ff1-90e8-b84eaed0f5d8"
                    },
                    "applicationId": {
                      "type": "string",
                      "description": "The unique ID of the application.",
                      "format": "guid",
                      "example": "29ce62ac-d575-4ff1-90e8-b84eaed0f5d8"
                    },
                    "bundleApplicationId": {
                      "type": "string",
                      "description": "The unique ID of the application bundle, or product suite, for a given application.",
                      "format": "guid",
                      "nullable": true,
                      "example": "29ce62ac-d575-4ff1-90e8-b84eaed0f5d8"
                    },
                    "firstDiscovered": {
                      "type": "string",
                      "description": "The date when the application was first discovered on the computer.",
                      "format": "date-time",
                      "nullable": true,
                      "example": "2024-03-24T12:52:20Z"
                    },
                    "lastUsed": {
                      "type": "string",
                      "description": "The date when the application was last used on the computer.",
                      "format": "date-time",
                      "nullable": true,
                      "example": "2024-03-24T12:52:20Z"
                    },
                    "usedCount": {
                      "type": "integer",
                      "description": "The number of times the application was used on the computer.",
                      "format": "int32",
                      "example": 10
                    },
                    "averageUsedTime": {
                      "type": "string",
                      "description": "The average time the application was used in hours.",
                      "nullable": true,
                      "example": "01:24"
                    },
                    "isVirtual": {
                      "type": "boolean",
                      "description": "```true``` if the application is virtual; otherwise, ```false```.",
                      "nullable": true,
                      "example": true
                    },
                    "isInstalled": {
                      "type": "boolean",
                      "description": "```true``` if the application is installed on the computer; otherwise, ```false```.",
                      "nullable": true,
                      "example": true
                    },
                    "bundleUsagePercentage": {
                      "type": "integer",
                      "description": "How much of the application bundle is used in percentage.",
                      "format": "int32",
                      "nullable": true,
                      "example": 20
                    },
                    "unbundled": {
                      "type": "boolean",
                      "description": "```true``` if the application is unbundled; otherwise, ```false```.",
                      "example": true
                    }
                  }
                }
              ]
            },
            "FilteredResponseWithLinksOfComputerApplications": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/BaseResponse"
                },
                {
                  "type": "object",
                  "description": "Generic response class supporting filtering and including links.",
                  "additionalProperties": false,
                  "required": [
                    "items",
                    "pagination"
                  ],
                  "properties": {
                    "items": {
                      "type": "array",
                      "description": "A collection of items returned in the response.",
                      "items": {
                        "$ref": "#/components/schemas/ComputerApplications"
                      }
                    },
                    "pagination": {
                      "description": "The pagination details.",
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/PaginationResponse"
                        }
                      ]
                    }
                  }
                }
              ]
            },
            "ComputerApplicationsDetails": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/BaseResponse"
                },
                {
                  "type": "object",
                  "description": "Response class for computer application details.",
                  "additionalProperties": false,
                  "properties": {
                    "computerId": {
                      "type": "string",
                      "description": "The unique ID of the computer.",
                      "format": "guid",
                      "example": "c1d617ff-2104-411c-9c20-682017a9fefd"
                    },
                    "applicationId": {
                      "type": "string",
                      "description": "The unique ID of the application.",
                      "format": "guid",
                      "example": "c1d617ff-2104-411c-9c20-682017a9fefd"
                    },
                    "bundleApplicationId": {
                      "type": "string",
                      "description": "The unique ID of the application bundle, or product suite, for a given application.",
                      "format": "guid",
                      "nullable": true,
                      "example": "c1d617ff-2104-411c-9c20-682017a9fefd"
                    },
                    "firstDiscovered": {
                      "type": "string",
                      "description": "The date when the application was first discovered on the computer.",
                      "format": "date-time",
                      "nullable": true,
                      "example": "2024-03-24T12:52:20Z"
                    },
                    "firstUsed": {
                      "type": "string",
                      "description": "The date when the application was first used on the computer.",
                      "format": "date-time",
                      "nullable": true,
                      "example": "2024-03-24T12:52:20Z"
                    },
                    "lastUsed": {
                      "type": "string",
                      "description": "The date when the application was last used on the computer.",
                      "format": "date-time",
                      "nullable": true,
                      "example": "2024-03-24T12:52:20Z"
                    },
                    "usedCount": {
                      "type": "integer",
                      "description": "The number of times the application was used on the computer.",
                      "format": "int32",
                      "example": 10
                    },
                    "usedUser": {
                      "type": "integer",
                      "description": "The number of users who used the application on the computer.",
                      "format": "int32",
                      "example": 10
                    },
                    "usedMinutes": {
                      "type": "integer",
                      "description": "The number of minutes the application was used on the computer.",
                      "format": "int64",
                      "example": 10
                    },
                    "usedDays": {
                      "type": "integer",
                      "description": "The number of days the application was used on the computer.",
                      "format": "int32",
                      "nullable": true,
                      "example": 10
                    },
                    "isInstalled": {
                      "type": "boolean",
                      "description": "```true``` if the application is installed on the computer; otherwise, ```false```.",
                      "nullable": true,
                      "example": true
                    },
                    "isOEM": {
                      "type": "boolean",
                      "description": "```true``` if the application is OEM; otherwise, ```false```.",
                      "nullable": true,
                      "example": true
                    },
                    "isMSDN": {
                      "type": "boolean",
                      "description": "```true``` if the application is MSDN; otherwise, ```false```.",
                      "nullable": true,
                      "example": true
                    },
                    "isVirtual": {
                      "type": "boolean",
                      "description": "```true``` if the application is virtual; otherwise, ```false```.",
                      "nullable": true,
                      "example": true
                    },
                    "isOverridden": {
                      "type": "boolean",
                      "description": "```true``` if the application is overridden; otherwise, ```false```.",
                      "nullable": true,
                      "example": true
                    },
                    "packageGUID": {
                      "type": "string",
                      "description": "The unique ID of the application package.",
                      "format": "guid",
                      "nullable": true,
                      "example": "640b16bb-447f-430f-87ee-49bfe940e308"
                    },
                    "isRecognized": {
                      "type": "boolean",
                      "description": "```true``` if the application is recognized; otherwise, ```false```.",
                      "nullable": true,
                      "example": true
                    },
                    "isRegistry": {
                      "type": "boolean",
                      "description": "```true``` if the application is in the registry; otherwise, ```false```.",
                      "nullable": true,
                      "example": true
                    },
                    "averageUsedTime": {
                      "type": "string",
                      "description": "The average time the application is used in hours.",
                      "nullable": true,
                      "example": "01:24"
                    },
                    "unbundled": {
                      "type": "boolean",
                      "description": "```true``` if the application is licenced individualy; otherwise, ```false```.",
                      "example": true
                    }
                  }
                }
              ]
            },
            "ComputerApplicationUsage": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/BaseResponse"
                },
                {
                  "type": "object",
                  "description": "Response for computer application usage.",
                  "additionalProperties": false,
                  "properties": {
                    "computerId": {
                      "type": "string",
                      "description": "The unique ID of the computer.",
                      "format": "guid",
                      "example": "743ba97e-3425-4f46-99b0-9a9c791ceb3a"
                    },
                    "userId": {
                      "type": "string",
                      "description": "The unique ID of the user.",
                      "format": "guid",
                      "example": "743ba97e-3425-4f46-99b0-9a9c791ceb3a"
                    },
                    "bundleApplicationId": {
                      "type": "string",
                      "description": "The unique ID of the application bundle, or product suite, for a given application.",
                      "format": "guid",
                      "nullable": true,
                      "example": "743ba97e-3425-4f46-99b0-9a9c791ceb3a"
                    },
                    "applicationId": {
                      "type": "string",
                      "description": "The unique ID of the application.",
                      "format": "guid",
                      "example": "743ba97e-3425-4f46-99b0-9a9c791ceb3a"
                    },
                    "firstUsed": {
                      "type": "string",
                      "description": "The date when the application was first used on the computer.",
                      "format": "date-time",
                      "nullable": true,
                      "example": "2024-03-24T12:52:20Z"
                    },
                    "lastUsedDate": {
                      "type": "string",
                      "description": "The date when the application was last used on the computer.",
                      "nullable": true,
                      "example": "2024-03-24T12:52:20Z"
                    },
                    "usedCount": {
                      "type": "integer",
                      "description": "The number of times the application was used on the computer.",
                      "format": "int32",
                      "example": 10
                    },
                    "usedMinutes": {
                      "type": "integer",
                      "description": "The number of minutes the application was used on the computer.",
                      "format": "int64",
                      "example": 10
                    },
                    "usedDays": {
                      "type": "integer",
                      "description": "The number of days the application was used on the computer.",
                      "format": "int32",
                      "nullable": true,
                      "example": 10
                    },
                    "isInstalled": {
                      "type": "boolean",
                      "description": "```true``` if the application is installed on the computer; otherwise, ```false```.",
                      "nullable": true,
                      "example": true
                    }
                  }
                }
              ]
            },
            "FilteredResponseWithLinksOfComputerApplicationUsage": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/BaseResponse"
                },
                {
                  "type": "object",
                  "description": "Generic response class supporting filtering and including links.",
                  "additionalProperties": false,
                  "required": [
                    "items",
                    "pagination"
                  ],
                  "properties": {
                    "items": {
                      "type": "array",
                      "description": "A collection of items returned in the response.",
                      "items": {
                        "$ref": "#/components/schemas/ComputerApplicationUsage"
                      }
                    },
                    "pagination": {
                      "description": "The pagination details.",
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/PaginationResponse"
                        }
                      ]
                    }
                  }
                }
              ]
            },
            "UserApplicationUsage": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/BaseResponse"
                },
                {
                  "type": "object",
                  "description": "Represents usage of an application by a specific user.",
                  "additionalProperties": false,
                  "properties": {
                    "userId": {
                      "type": "string",
                      "description": "The unique ID of the user.",
                      "format": "guid",
                      "example": "29ce62ac-d575-4ff1-90e8-b84eaed0f5d8"
                    },
                    "applicationId": {
                      "type": "string",
                      "description": "The unique ID of the application.",
                      "format": "guid",
                      "example": "29ce62ac-d575-4ff1-90e8-b84eaed0f5d8"
                    },
                    "bundleApplicationId": {
                      "type": "string",
                      "description": "The unique ID of the application bundle, or product suite, for a given application.",
                      "format": "guid",
                      "nullable": true,
                      "example": "29ce62ac-d575-4ff1-90e8-b84eaed0f5d8"
                    },
                    "lastUsedDate": {
                      "type": "string",
                      "description": "The application last used date on the computer as a string with no time component.",
                      "nullable": true,
                      "example": "2024-03-22"
                    }
                  }
                }
              ]
            },
            "FilteredResponseWithLinksOfUserApplicationUsage": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/BaseResponse"
                },
                {
                  "type": "object",
                  "description": "Generic response class supporting filtering and including links.",
                  "additionalProperties": false,
                  "required": [
                    "items",
                    "pagination"
                  ],
                  "properties": {
                    "items": {
                      "type": "array",
                      "description": "A collection of items returned in the response.",
                      "items": {
                        "$ref": "#/components/schemas/UserApplicationUsage"
                      }
                    },
                    "pagination": {
                      "description": "The pagination details.",
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/PaginationResponse"
                        }
                      ]
                    }
                  }
                }
              ]
            },
            "ComputerApplicationUsageSummary": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/BaseResponse"
                },
                {
                  "type": "object",
                  "description": "Response class for application usage summary.",
                  "additionalProperties": false,
                  "properties": {
                    "applicationId": {
                      "type": "string",
                      "description": "The unique ID of the application.",
                      "format": "guid",
                      "example": "1ce2bdde-b68f-429d-aff5-bad93f544689"
                    },
                    "computers": {
                      "type": "integer",
                      "description": "The number of computers on which the application was used.",
                      "format": "int32",
                      "example": 10
                    },
                    "users": {
                      "type": "integer",
                      "description": "The number of users who used the application.",
                      "format": "int32",
                      "example": 10
                    },
                    "installations": {
                      "type": "integer",
                      "description": "The number of installations of the application.",
                      "format": "int32",
                      "example": 10
                    }
                  }
                }
              ]
            },
            "FilteredResponseWithLinksOfComputerApplicationUsageSummary": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/BaseResponse"
                },
                {
                  "type": "object",
                  "description": "Generic response class supporting filtering and including links.",
                  "additionalProperties": false,
                  "required": [
                    "items",
                    "pagination"
                  ],
                  "properties": {
                    "items": {
                      "type": "array",
                      "description": "A collection of items returned in the response.",
                      "items": {
                        "$ref": "#/components/schemas/ComputerApplicationUsageSummary"
                      }
                    },
                    "pagination": {
                      "description": "The pagination details.",
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/PaginationResponse"
                        }
                      ]
                    }
                  }
                }
              ]
            },
            "ComputerContract": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/BaseResponse"
                },
                {
                  "type": "object",
                  "description": "Response representing connection between computer and contract.",
                  "additionalProperties": false,
                  "properties": {
                    "computerId": {
                      "type": "string",
                      "description": "The unique ID of the computer.",
                      "format": "guid",
                      "example": "95c1d359-8d89-4a51-a8ed-444e0ab01f71"
                    },
                    "contractId": {
                      "type": "string",
                      "description": "The unique ID of the contract.",
                      "format": "guid",
                      "example": "95c1d359-8d89-4a51-a8ed-444e0ab01f71"
                    }
                  }
                }
              ]
            },
            "FilteredResponseWithLinksOfComputerContract": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/BaseResponse"
                },
                {
                  "type": "object",
                  "description": "Generic response class supporting filtering and including links.",
                  "additionalProperties": false,
                  "required": [
                    "items",
                    "pagination"
                  ],
                  "properties": {
                    "items": {
                      "type": "array",
                      "description": "A collection of items returned in the response.",
                      "items": {
                        "$ref": "#/components/schemas/ComputerContract"
                      }
                    },
                    "pagination": {
                      "description": "The pagination details.",
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/PaginationResponse"
                        }
                      ]
                    }
                  }
                }
              ]
            },
            "ComputerCosts": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/BaseResponse"
                },
                {
                  "type": "object",
                  "description": "Response representing costs associated with a computer.",
                  "additionalProperties": false,
                  "properties": {
                    "computerId": {
                      "type": "string",
                      "description": "The unique ID of the computer.",
                      "format": "guid",
                      "example": "4f2403da-3ab5-48f8-9114-73304cfeb017"
                    },
                    "vendor": {
                      "type": "string",
                      "description": "The vendor of the computer.",
                      "nullable": true,
                      "example": "Dell Inc."
                    },
                    "purchaseDate": {
                      "type": "string",
                      "description": "The date on which the computer was purchased.",
                      "format": "date-time",
                      "nullable": true,
                      "example": "2024-03-24T12:52:20Z"
                    },
                    "purchasePrice": {
                      "type": "number",
                      "description": "The price for which the computer was purchased.",
                      "format": "decimal",
                      "nullable": true,
                      "example": 2521.32
                    },
                    "purchaseValueBase": {
                      "type": "number",
                      "description": "The value base of the purchase of the computer.",
                      "format": "decimal",
                      "nullable": true,
                      "example": 2500.32
                    },
                    "purchaseCurrency": {
                      "type": "string",
                      "description": "The currency in which the computer was purchased.",
                      "nullable": true,
                      "example": "EUR"
                    },
                    "invoiceReference": {
                      "type": "string",
                      "description": "The invoice reference for the purchase of the computer.",
                      "nullable": true,
                      "example": "2024/03/63729P"
                    },
                    "totalCostOfInstalledApplications": {
                      "type": "number",
                      "description": "The total cost of all applications installed on the computer.",
                      "format": "decimal",
                      "nullable": true,
                      "example": 1452.28
                    },
                    "totalCost": {
                      "type": "number",
                      "description": "The total cost of the computer and installed applications.",
                      "format": "decimal",
                      "nullable": true,
                      "example": 3973.6
                    }
                  }
                }
              ]
            },
            "ComputerDisplayAdapter": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/BaseResponse"
                },
                {
                  "type": "object",
                  "description": "Response representing display adapter of a computer.",
                  "additionalProperties": false,
                  "properties": {
                    "computerId": {
                      "type": "string",
                      "description": "The unique ID of the computer.",
                      "format": "guid",
                      "example": "66a6b2b7-2ff1-403f-add3-60ed14a0233a"
                    },
                    "name": {
                      "type": "string",
                      "description": "The name of the display adapter.",
                      "nullable": true,
                      "example": "NVIDIA T1200 Laptop GPU"
                    },
                    "currentResolution": {
                      "type": "string",
                      "description": "The current resolution of the display adapter of the computer.",
                      "nullable": true,
                      "example": "1920 x 1200"
                    },
                    "maxResolution": {
                      "type": "string",
                      "description": "The maximum resolution of the display adapter of the computer.",
                      "nullable": true,
                      "example": "2560x1440"
                    },
                    "isUpdated": {
                      "type": "boolean",
                      "description": "```true``` if the display adapter is updated; otherwise, ```false```.",
                      "example": true
                    }
                  }
                }
              ]
            },
            "ComputerDrive": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/BaseResponse"
                },
                {
                  "type": "object",
                  "description": "Response representing computer storage.",
                  "additionalProperties": false,
                  "properties": {
                    "computerId": {
                      "type": "string",
                      "description": "The unique ID of the computer.",
                      "format": "guid",
                      "example": "6b8f2c7a-101e-4187-b07e-ebb4b815ef28"
                    },
                    "name": {
                      "type": "string",
                      "description": "The name of the drive of the computer.",
                      "nullable": true,
                      "example": "Virtual HD ATA Device"
                    },
                    "diskSizeMB": {
                      "type": "integer",
                      "description": "The size of the drive of the computer in megabytes.",
                      "format": "int32",
                      "example": 102398
                    },
                    "isUpdated": {
                      "type": "boolean",
                      "description": "```true``` if the drive of the computer is updated; otherwise, ```false```.",
                      "example": true
                    }
                  }
                }
              ]
            },
            "FilteredResponseWithLinksOfComputerDrive": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/BaseResponse"
                },
                {
                  "type": "object",
                  "description": "Generic response class supporting filtering and including links.",
                  "additionalProperties": false,
                  "required": [
                    "items",
                    "pagination"
                  ],
                  "properties": {
                    "items": {
                      "type": "array",
                      "description": "A collection of items returned in the response.",
                      "items": {
                        "$ref": "#/components/schemas/ComputerDrive"
                      }
                    },
                    "pagination": {
                      "description": "The pagination details.",
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/PaginationResponse"
                        }
                      ]
                    }
                  }
                }
              ]
            },
            "ComputerHardwareDetails": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/BaseResponse"
                },
                {
                  "type": "object",
                  "description": "Response representing details of hardware of a computer.",
                  "additionalProperties": false,
                  "properties": {
                    "computerId": {
                      "type": "string",
                      "description": "The unique ID of the computer.",
                      "format": "guid",
                      "example": "990b4de8-f11f-4904-9e86-d8a435835574"
                    },
                    "processorCount": {
                      "type": "integer",
                      "description": "The number of processors in the computer.",
                      "format": "int32",
                      "nullable": true,
                      "example": 2
                    },
                    "coreCount": {
                      "type": "integer",
                      "description": "The number of cores in the computer.",
                      "format": "int32",
                      "nullable": true,
                      "example": 8
                    },
                    "processorType": {
                      "type": "string",
                      "description": "The type of processors in the computer.",
                      "nullable": true,
                      "example": "11th Gen Intel Core i7-1185G7 @ 3.00GHz (3.00 GHz)"
                    },
                    "processorSpeed": {
                      "type": "integer",
                      "description": "The speed of the processor in the computer in MHz.",
                      "format": "int32",
                      "nullable": true,
                      "example": 2995
                    },
                    "memorySlots": {
                      "type": "integer",
                      "description": "The total number of memory slots in the computer.",
                      "format": "int32",
                      "nullable": true,
                      "example": 8
                    },
                    "memorySlotsAvailable": {
                      "type": "integer",
                      "description": "The number of available memory slots in the computer.",
                      "format": "int32",
                      "nullable": true,
                      "example": 2
                    },
                    "physicalMemory": {
                      "type": "integer",
                      "description": "The amount of physical memory in the computer.",
                      "format": "int32",
                      "nullable": true,
                      "example": 16384
                    },
                    "systemDiskSpace": {
                      "type": "integer",
                      "description": "The total amount of system disk space in the computer in MB.",
                      "format": "int64",
                      "nullable": true,
                      "example": 957534
                    },
                    "systemDiskSpaceAvailable": {
                      "type": "integer",
                      "description": "The amount of available system disk space in the computer in MB.",
                      "format": "int64",
                      "nullable": true,
                      "example": 552150
                    },
                    "totalDiskSpace": {
                      "type": "integer",
                      "description": "The total amount of total disk space in the computer in MB.",
                      "format": "int64",
                      "nullable": true,
                      "example": 957534
                    },
                    "totalDiskSpaceAvailable": {
                      "type": "integer",
                      "description": "The amount of available disk space in the computer in MB.",
                      "format": "int64",
                      "nullable": true,
                      "example": 552150
                    },
                    "totalDiskSpaceUsed": {
                      "type": "integer",
                      "description": "The total amount of disk space used in the computer in MB.",
                      "format": "int64",
                      "nullable": true,
                      "example": 405384
                    },
                    "socketCount": {
                      "type": "integer",
                      "description": "The number of sockets in the computer.",
                      "format": "byte",
                      "nullable": true,
                      "example": 2
                    },
                    "isSocketCountManualOverrideEnabled": {
                      "type": "boolean",
                      "description": "```true``` if the socket count manual override of the computer is enabled; otherwise, ```false```.",
                      "example": true
                    },
                    "chipModulesPerProcessor": {
                      "type": "integer",
                      "description": "The number of chip modules per processor.",
                      "format": "byte",
                      "nullable": true,
                      "example": 2
                    },
                    "processorManufacturer": {
                      "type": "string",
                      "description": "The manufacturer of the processors of the computer.",
                      "nullable": true,
                      "example": "Intel"
                    },
                    "logicalProcessorCount": {
                      "type": "integer",
                      "description": "The number of logical processors in the computer.",
                      "format": "int32",
                      "nullable": true,
                      "example": 12
                    }
                  }
                }
              ]
            },
            "ComputerLogicalDisk": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/BaseResponse"
                },
                {
                  "type": "object",
                  "description": "Response representing a logical disks of a computer.",
                  "additionalProperties": false,
                  "properties": {
                    "computerId": {
                      "type": "string",
                      "description": "The unique ID of the computer.",
                      "format": "guid",
                      "example": "14783145-7ead-4f6a-8f56-b7c3969bfc16"
                    },
                    "name": {
                      "type": "string",
                      "description": "The name of the logical disk.",
                      "nullable": true,
                      "example": "C:"
                    },
                    "volumeName": {
                      "type": "string",
                      "description": "The name of the volume of the logical disk.",
                      "nullable": true,
                      "example": "SYSTEM"
                    },
                    "isSystemDisk": {
                      "type": "boolean",
                      "description": "```true``` if the logical disk is a system disk; otherwise, ```false```.",
                      "example": true
                    },
                    "diskSizeMB": {
                      "type": "integer",
                      "description": "The size of the logical disk in MB.",
                      "format": "int32",
                      "example": 61087
                    },
                    "freeSpaceMB": {
                      "type": "integer",
                      "description": "The free space on the logical disk in MB.",
                      "format": "int32",
                      "example": 6243
                    },
                    "isUpdated": {
                      "type": "boolean",
                      "description": "```true``` if the logical disk is updated; otherwise, ```false```.",
                      "example": true
                    }
                  }
                }
              ]
            },
            "FilteredResponseWithLinksOfComputerLogicalDisk": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/BaseResponse"
                },
                {
                  "type": "object",
                  "description": "Generic response class supporting filtering and including links.",
                  "additionalProperties": false,
                  "required": [
                    "items",
                    "pagination"
                  ],
                  "properties": {
                    "items": {
                      "type": "array",
                      "description": "A collection of items returned in the response.",
                      "items": {
                        "$ref": "#/components/schemas/ComputerLogicalDisk"
                      }
                    },
                    "pagination": {
                      "description": "The pagination details.",
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/PaginationResponse"
                        }
                      ]
                    }
                  }
                }
              ]
            },
            "ComputerLogonHistoryDetails": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/BaseResponse"
                },
                {
                  "type": "object",
                  "description": "Response representing computer logon history for a given computer and user.",
                  "additionalProperties": false,
                  "properties": {
                    "computerId": {
                      "type": "string",
                      "description": "The unique ID of the computer.",
                      "format": "guid",
                      "example": "0d779524-e2cf-4636-a701-65ce7c3f5763"
                    },
                    "userId": {
                      "type": "string",
                      "description": "The unique ID of the user.",
                      "format": "guid",
                      "example": "c5a87d81-b035-4b38-88f8-13fabd790764"
                    },
                    "lastLogon": {
                      "type": "string",
                      "description": "The last logon of the given user on the given computer.",
                      "format": "date-time",
                      "example": "2024-03-24T12:52:20Z"
                    },
                    "logonCount": {
                      "type": "integer",
                      "description": "The logon count for a user on one computer.",
                      "format": "int32",
                      "example": 10
                    }
                  }
                }
              ]
            },
            "ComputerLogonHistory": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ComputerLogonHistoryDetails"
                },
                {
                  "type": "object",
                  "description": "Response representing computer logon history for a given computer and user.",
                  "additionalProperties": false
                }
              ]
            },
            "FilteredResponseWithLinksOfComputerLogonHistory": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/BaseResponse"
                },
                {
                  "type": "object",
                  "description": "Generic response class supporting filtering and including links.",
                  "additionalProperties": false,
                  "required": [
                    "items",
                    "pagination"
                  ],
                  "properties": {
                    "items": {
                      "type": "array",
                      "description": "A collection of items returned in the response.",
                      "items": {
                        "$ref": "#/components/schemas/ComputerLogonHistory"
                      }
                    },
                    "pagination": {
                      "description": "The pagination details.",
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/PaginationResponse"
                        }
                      ]
                    }
                  }
                }
              ]
            },
            "ComputerMonitor": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/BaseResponse"
                },
                {
                  "type": "object",
                  "description": "Response representing a monitor of a computer.",
                  "additionalProperties": false,
                  "properties": {
                    "computerId": {
                      "type": "string",
                      "description": "The unique ID of the computer.",
                      "format": "guid",
                      "example": "636d9b38-1afd-4b96-8998-01d475cc0f36"
                    },
                    "name": {
                      "type": "string",
                      "description": "The name of the computer monitor.",
                      "nullable": true,
                      "example": "Intel UHD Graphics"
                    },
                    "maxResolution": {
                      "type": "string",
                      "description": "The max resolution of the monitor.",
                      "nullable": true,
                      "example": "2560 x 1600"
                    },
                    "isUpdated": {
                      "type": "boolean",
                      "description": "```true``` if the computer monitor is updated; otherwise, ```false```."
                    }
                  }
                }
              ]
            },
            "ComputerNetworkAdapters": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/BaseResponse"
                },
                {
                  "type": "object",
                  "description": "Response representing network adapter of a computer.",
                  "additionalProperties": false,
                  "properties": {
                    "computerId": {
                      "type": "string",
                      "description": "The unique ID of the computer.",
                      "format": "guid",
                      "example": "62991e94-b8c3-4227-a7cb-a853f2e6e4cc"
                    },
                    "name": {
                      "type": "string",
                      "description": "The name of the computer network adapter.",
                      "nullable": true,
                      "example": "Intel 82574L Gigabit Network Connection"
                    },
                    "ipAddress": {
                      "type": "string",
                      "description": "The IP address of the network adapter.",
                      "nullable": true,
                      "example": "10.20.19.130"
                    },
                    "macAddress": {
                      "type": "string",
                      "description": "The Mac address of the network adapter.",
                      "nullable": true,
                      "example": "00-50-56-8D-5D-B8"
                    }
                  }
                }
              ]
            },
            "FilteredResponseWithLinksOfComputerNetworkAdapters": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/BaseResponse"
                },
                {
                  "type": "object",
                  "description": "Generic response class supporting filtering and including links.",
                  "additionalProperties": false,
                  "required": [
                    "items",
                    "pagination"
                  ],
                  "properties": {
                    "items": {
                      "type": "array",
                      "description": "A collection of items returned in the response.",
                      "items": {
                        "$ref": "#/components/schemas/ComputerNetworkAdapters"
                      }
                    },
                    "pagination": {
                      "description": "The pagination details.",
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/PaginationResponse"
                        }
                      ]
                    }
                  }
                }
              ]
            },
            "ComputerProcessor": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/BaseResponse"
                },
                {
                  "type": "object",
                  "description": "Response representing processor of a computer.",
                  "additionalProperties": false,
                  "properties": {
                    "computerId": {
                      "type": "string",
                      "description": "The unique ID of the computer.",
                      "format": "guid",
                      "example": "94cdfe57-81e2-4af6-99f4-44d15b3b6fb6"
                    },
                    "processorCount": {
                      "type": "integer",
                      "description": "The number of processors in the computer.",
                      "format": "int32",
                      "example": 2
                    },
                    "coreCount": {
                      "type": "integer",
                      "description": "The number of cores in the computer.",
                      "format": "int32",
                      "example": 8
                    },
                    "processorType": {
                      "type": "string",
                      "description": "The type of processors in the computer.",
                      "nullable": true,
                      "example": "11th Gen Intel Core i7-1185G7 @ 3.00GHz (3.00 GHz)"
                    },
                    "processorSpeed": {
                      "type": "integer",
                      "description": "The speed of the processor in the computer in MHz.",
                      "format": "int32",
                      "example": 2995
                    },
                    "processorManufacturer": {
                      "type": "string",
                      "description": "The manufacturer of the processors of the computer.",
                      "nullable": true,
                      "example": "Intel"
                    }
                  }
                }
              ]
            },
            "FilteredResponseWithLinksOfComputerProcessor": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/BaseResponse"
                },
                {
                  "type": "object",
                  "description": "Generic response class supporting filtering and including links.",
                  "additionalProperties": false,
                  "required": [
                    "items",
                    "pagination"
                  ],
                  "properties": {
                    "items": {
                      "type": "array",
                      "description": "A collection of items returned in the response.",
                      "items": {
                        "$ref": "#/components/schemas/ComputerProcessor"
                      }
                    },
                    "pagination": {
                      "description": "The pagination details.",
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/PaginationResponse"
                        }
                      ]
                    }
                  }
                }
              ]
            },
            "ComputerSocketMapDetails": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/BaseResponse"
                },
                {
                  "type": "object",
                  "description": "Response representing socket map for a computer.",
                  "additionalProperties": false,
                  "properties": {
                    "computerId": {
                      "type": "string",
                      "description": "The unique ID of the computer.",
                      "format": "guid",
                      "example": "cf5be788-06be-4496-91b0-bfaa8c239e96"
                    },
                    "manufacturer": {
                      "type": "string",
                      "description": "The manufacturer of the sockets in the computer.",
                      "nullable": true,
                      "example": "Intel"
                    },
                    "model": {
                      "type": "string",
                      "description": "The model of the sockets in the computer.",
                      "nullable": true,
                      "example": "LGA 1151"
                    },
                    "socketCount": {
                      "type": "integer",
                      "description": "The number of sockets in the computer.",
                      "format": "int32",
                      "example": 2
                    }
                  }
                }
              ]
            },
            "ComputerRegistry": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/BaseResponse"
                },
                {
                  "type": "object",
                  "description": "Response representing registry content of a computer.",
                  "additionalProperties": false,
                  "properties": {
                    "computerId": {
                      "type": "string",
                      "description": "The unique ID of the computer.",
                      "format": "guid",
                      "nullable": true,
                      "example": "81a160b4-75cc-4732-8d30-d8d5bd623969"
                    },
                    "registryKeyName": {
                      "type": "string",
                      "description": "The name of the registry key on the computer.",
                      "nullable": true,
                      "example": "HKEY_USERS\\Software\\Adobe\\Adobe Acrobat\\DC\\AVEntitlement"
                    },
                    "registryValueName": {
                      "type": "string",
                      "description": "The value name of the record in registry key on the computer.",
                      "nullable": true,
                      "example": "bAppInitialized"
                    },
                    "registryValueData": {
                      "type": "string",
                      "description": "The value data of the record in registry key on the computer.",
                      "nullable": true,
                      "example": "1"
                    }
                  }
                }
              ]
            },
            "FilteredResponseWithLinksOfComputerRegistry": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/BaseResponse"
                },
                {
                  "type": "object",
                  "description": "Generic response class supporting filtering and including links.",
                  "additionalProperties": false,
                  "required": [
                    "items",
                    "pagination"
                  ],
                  "properties": {
                    "items": {
                      "type": "array",
                      "description": "A collection of items returned in the response.",
                      "items": {
                        "$ref": "#/components/schemas/ComputerRegistry"
                      }
                    },
                    "pagination": {
                      "description": "The pagination details.",
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/PaginationResponse"
                        }
                      ]
                    }
                  }
                }
              ]
            },
            "ComputerDetails": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/BaseResponse"
                },
                {
                  "type": "object",
                  "description": "Response representing details of a computer.",
                  "additionalProperties": false,
                  "required": [
                    "id"
                  ],
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The unique ID of the computer.",
                      "format": "guid",
                      "minLength": 1,
                      "example": "5043cc04-3ef2-4882-a3be-8d08b4f402c7"
                    },
                    "scanIdentifier": {
                      "type": "string",
                      "description": "The identifier used by the scan.",
                      "nullable": true,
                      "example": "MAC-C02GD9DUML7H"
                    },
                    "hostName": {
                      "type": "string",
                      "description": "The host name of the computer.",
                      "nullable": true,
                      "example": "AM21-S42MONITOR"
                    },
                    "domain": {
                      "type": "string",
                      "description": "The domain of the computer.",
                      "nullable": true,
                      "example": "APAC"
                    },
                    "lastScanDate": {
                      "type": "string",
                      "description": "The last date that the computer was scanned.",
                      "format": "date-time",
                      "example": "2024-03-24T12:52:20Z"
                    },
                    "biosSerialNumber": {
                      "type": "string",
                      "description": "The BIOS serial number of the computer.",
                      "nullable": true,
                      "example": "43-01-10-TX"
                    },
                    "biosVersion": {
                      "type": "string",
                      "description": "The BIOS version of the computer.",
                      "nullable": true,
                      "example": "1.26.0"
                    },
                    "biosDate": {
                      "type": "string",
                      "description": "The BIOS date of the computer.",
                      "format": "date-time",
                      "nullable": true,
                      "example": "2024-03-24T12:52:20Z"
                    },
                    "manufacturer": {
                      "type": "string",
                      "description": "The manufacturer of the computer.",
                      "nullable": true,
                      "example": "Lenovo"
                    },
                    "manufacturerWebsite": {
                      "type": "string",
                      "description": "Website of the computer's manufacturer.",
                      "nullable": true,
                      "example": "https://www.lenovo.com"
                    },
                    "model": {
                      "type": "string",
                      "description": "The model of the computer.",
                      "nullable": true,
                      "example": "T480s"
                    },
                    "isPortable": {
                      "type": "boolean",
                      "description": "```true``` if the computer is portable; otherwise, ```false```.",
                      "nullable": true,
                      "example": true
                    },
                    "infoTransferDate": {
                      "type": "string",
                      "description": "The date of information transfer for the computer.",
                      "format": "date-time",
                      "example": "2024-03-24T12:52:20Z"
                    },
                    "clientInstallDate": {
                      "type": "string",
                      "description": "The date the client was installed on the computer.",
                      "format": "date-time",
                      "nullable": true,
                      "example": "2024-03-24T12:52:20Z"
                    },
                    "clientVersion": {
                      "type": "string",
                      "description": "The version of the client on the computer.",
                      "nullable": true,
                      "example": "6.14.3"
                    },
                    "clientSiteName": {
                      "type": "string",
                      "description": "The site name of the client on the computer.",
                      "nullable": true,
                      "example": "snow"
                    },
                    "clientConfigurationName": {
                      "type": "string",
                      "description": "The configuration name of the client on the computer.",
                      "nullable": true,
                      "example": "SnowAtlas"
                    },
                    "scannerVersion": {
                      "type": "string",
                      "description": "The version of the scanner for the computer.",
                      "nullable": true,
                      "example": "7.0.0"
                    },
                    "quarantineDate": {
                      "type": "string",
                      "description": "The quarantine date of the computer, if computer was quarantined.",
                      "format": "date-time",
                      "nullable": true,
                      "example": "2024-03-24T12:52:20Z"
                    },
                    "isQuarantineManagementDisabled": {
                      "type": "boolean",
                      "description": "```true``` if the computer has quarantine management disabled; otherwise, ```false```.",
                      "nullable": true,
                      "example": true
                    },
                    "operatingSystem": {
                      "type": "string",
                      "description": "The operating system of the computer.",
                      "nullable": true,
                      "example": "Microsoft Windows 11 Pro"
                    },
                    "operatingSystemId": {
                      "type": "string",
                      "description": "The unique ID of the operating system of the computer.",
                      "format": "guid",
                      "nullable": true,
                      "example": "c27c14a7-dcec-4f8e-b08e-cdb7263b5378"
                    },
                    "operatingSystemServicePack": {
                      "type": "string",
                      "description": "The service pack of the operating system of the computer.",
                      "nullable": true,
                      "example": "SP1"
                    },
                    "operatingSystemSerialNumber": {
                      "type": "string",
                      "description": "The serial number of the operating system of the computer.",
                      "nullable": true,
                      "example": "V6E3X-S6J5H-L5F5P-M4M2Y"
                    },
                    "ipAddress": {
                      "type": "string",
                      "description": "The IP address of the computer.",
                      "nullable": true,
                      "example": "10.20.20.77"
                    },
                    "isVirtual": {
                      "type": "boolean",
                      "description": "```true``` if the computer is virtual; otherwise, ```false```.",
                      "nullable": true,
                      "example": true
                    },
                    "hostComputerId": {
                      "type": "string",
                      "description": "The unique ID of the host computer if present.",
                      "format": "guid",
                      "nullable": true,
                      "example": "037e6448-6ad3-4279-800d-010677485bbb"
                    },
                    "siblingComputerId": {
                      "type": "string",
                      "description": "The unique ID of the sibling computer if present.",
                      "format": "guid",
                      "nullable": true,
                      "example": "687e2c50-6900-463a-b470-8c12e3677be8"
                    },
                    "isUpdated": {
                      "type": "boolean",
                      "description": "```true``` if the computer is updated; otherwise, ```false```.",
                      "nullable": true,
                      "example": true
                    },
                    "is64bit": {
                      "type": "boolean",
                      "description": "```true``` if the computer is 64 bit; otherwise, ```false```.",
                      "example": true
                    },
                    "isServer": {
                      "type": "boolean",
                      "description": "```true``` if the computer is a server; otherwise, ```false```.",
                      "nullable": true,
                      "example": true
                    },
                    "hypervisorName": {
                      "type": "string",
                      "description": "The hypervisor name of the computer.",
                      "nullable": true,
                      "example": "VMware Virtual Platform"
                    },
                    "isVdi": {
                      "type": "boolean",
                      "description": "```true``` if the computer uses virtual desktop infrastructure; otherwise, ```false```.",
                      "nullable": true,
                      "example": true
                    },
                    "processorValueUnit": {
                      "type": "integer",
                      "description": "The process value unit of the computer.",
                      "format": "int32",
                      "nullable": true,
                      "example": 32
                    },
                    "reportingDate": {
                      "type": "string",
                      "description": "The reporting date of the computer.",
                      "format": "date-time",
                      "nullable": true,
                      "example": "2024-03-24T12:52:20Z"
                    },
                    "architecture": {
                      "type": "string",
                      "description": "The architecture of the computer.",
                      "nullable": true,
                      "example": "64-bit"
                    },
                    "organizationId": {
                      "type": "string",
                      "description": "The unique ID of the organization to which the computer belongs.",
                      "format": "guid",
                      "nullable": true,
                      "example": "293cf227-bf7f-4919-b664-791f3f49e1ef"
                    },
                    "status": {
                      "type": "string",
                      "description": "The status of the computer.",
                      "nullable": true,
                      "example": "Active"
                    },
                    "isAutoEditingDisabled": {
                      "type": "boolean",
                      "description": "```true``` if the auto editing is disabled for the computer; otherwise, ```false```.",
                      "nullable": true,
                      "example": true
                    },
                    "purchaseDate": {
                      "type": "string",
                      "description": "The date on which the computer was purchased.",
                      "format": "date-time",
                      "nullable": true,
                      "example": "2024-03-24T12:52:20Z"
                    },
                    "purchaseValue": {
                      "type": "number",
                      "description": "The amount for which the computer was purchased.",
                      "format": "decimal",
                      "nullable": true,
                      "example": 2461.32
                    },
                    "purchaseCurrency": {
                      "type": "string",
                      "description": "The currency in which the computer was purchased.",
                      "nullable": true,
                      "example": "EUR"
                    },
                    "purchaseValueBase": {
                      "type": "number",
                      "description": "The value base of the purchase of the computer.",
                      "format": "decimal",
                      "nullable": true,
                      "example": 2500.32
                    },
                    "invoiceReference": {
                      "type": "string",
                      "description": "The invoice reference for the purchase of the computer.",
                      "nullable": true,
                      "example": "2024/03/63729P"
                    },
                    "notes": {
                      "type": "string",
                      "description": "The notes associated with the purchase of the computer.",
                      "nullable": true,
                      "example": "Purchased in a set with printer"
                    },
                    "securityCode": {
                      "type": "string",
                      "description": "The security code for the computer.",
                      "nullable": true,
                      "example": "A563Z"
                    },
                    "updatedDate": {
                      "type": "string",
                      "description": "The date the computer was updated.",
                      "format": "date-time",
                      "nullable": true,
                      "example": "2024-03-24T12:52:20Z"
                    },
                    "isIncludedInWindowsServerRequirement": {
                      "type": "boolean",
                      "description": "```true``` if the computer is included in the Windows Server requirement; otherwise, ```false```.",
                      "nullable": true,
                      "example": true
                    },
                    "mostRecentUser": {
                      "type": "string",
                      "description": "The unique ID of the most recent user of the computer.",
                      "format": "guid",
                      "nullable": true,
                      "example": "77f8f11f-e4f8-4bed-8e44-b78d66244302"
                    },
                    "mostFrequentUser": {
                      "type": "string",
                      "description": "The unique ID of the most frequent user of the computer.",
                      "format": "guid",
                      "nullable": true,
                      "example": "f2c35e21-aba4-4e0d-8c14-f3033e7b1fb7"
                    },
                    "vendor": {
                      "type": "string",
                      "description": "The vendor of the computer.",
                      "nullable": true,
                      "example": "Dell Inc."
                    }
                  }
                }
              ]
            },
            "Computer": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/BaseResponse"
                },
                {
                  "type": "object",
                  "description": "Response representing a computer.",
                  "additionalProperties": false,
                  "required": [
                    "id",
                    "hostName",
                    "lastScanDate",
                    "status"
                  ],
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The unique ID of the computer.",
                      "format": "guid",
                      "minLength": 1,
                      "example": "5043cc04-3ef2-4882-a3be-8d08b4f402c7"
                    },
                    "hostName": {
                      "type": "string",
                      "description": "The host name of the computer.",
                      "minLength": 1,
                      "example": "AM21-S42MONITOR"
                    },
                    "hostComputerId": {
                      "type": "string",
                      "description": "The unique ID of the host computer.",
                      "format": "guid",
                      "nullable": true,
                      "example": "035613f6-26a5-4929-94f0-ed10a991438a"
                    },
                    "mostFrequentUser": {
                      "type": "string",
                      "description": "The unique ID of the most frequent user of the computer.",
                      "format": "guid",
                      "nullable": true,
                      "example": "f2c35e21-aba4-4e0d-8c14-f3033e7b1fb7"
                    },
                    "mostRecentUser": {
                      "type": "string",
                      "description": "The unique ID of the most recent user of the computer.",
                      "format": "guid",
                      "nullable": true,
                      "example": "77f8f11f-e4f8-4bed-8e44-b78d66244302"
                    },
                    "manufacturer": {
                      "type": "string",
                      "description": "The manufacturer of the computer.",
                      "nullable": true,
                      "example": "Lenovo"
                    },
                    "isPortable": {
                      "type": "boolean",
                      "description": "```true``` if the computer is portable; otherwise, ```false```.",
                      "nullable": true,
                      "example": true
                    },
                    "isVirtual": {
                      "type": "boolean",
                      "description": "```true``` if the computer is virtual; otherwise, ```false```.",
                      "nullable": true,
                      "example": true
                    },
                    "isServer": {
                      "type": "boolean",
                      "description": "```true``` if the computer is a server; otherwise, ```false```.",
                      "nullable": true,
                      "example": true
                    },
                    "model": {
                      "type": "string",
                      "description": "The model of the computer.",
                      "nullable": true,
                      "example": "T480s"
                    },
                    "operatingSystem": {
                      "type": "string",
                      "description": "The operating system of the computer.",
                      "nullable": true,
                      "example": "Microsoft Windows 11 Pro"
                    },
                    "vendor": {
                      "type": "string",
                      "description": "The vendor of the computer.",
                      "nullable": true,
                      "example": "Dell Inc."
                    },
                    "domain": {
                      "type": "string",
                      "description": "The domain of the computer.",
                      "nullable": true,
                      "example": "APAC"
                    },
                    "ipAddress": {
                      "type": "string",
                      "description": "The IP address of the computer.",
                      "nullable": true,
                      "example": "10.20.20.77"
                    },
                    "isVDI": {
                      "type": "boolean",
                      "description": "```true``` if the computer uses virtual desktop infrastructure; otherwise, ```false```.",
                      "nullable": true,
                      "example": true
                    },
                    "lastScanDate": {
                      "type": "string",
                      "description": "The last date that the computer was scanned.",
                      "format": "date-time",
                      "minLength": 1,
                      "example": "2024-03-24T12:52:20Z"
                    },
                    "status": {
                      "type": "string",
                      "description": "The status of the computer.",
                      "minLength": 1,
                      "example": "Active"
                    },
                    "organizationId": {
                      "type": "string",
                      "description": "The unique ID of the organization to which the computer belongs.",
                      "format": "guid",
                      "nullable": true,
                      "example": "293cf227-bf7f-4919-b664-791f3f49e1ef"
                    }
                  }
                }
              ]
            },
            "FilteredResponseWithLinksOfComputer": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/BaseResponse"
                },
                {
                  "type": "object",
                  "description": "Generic response class supporting filtering and including links.",
                  "additionalProperties": false,
                  "required": [
                    "items",
                    "pagination"
                  ],
                  "properties": {
                    "items": {
                      "type": "array",
                      "description": "A collection of items returned in the response.",
                      "items": {
                        "$ref": "#/components/schemas/Computer"
                      }
                    },
                    "pagination": {
                      "description": "The pagination details.",
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/PaginationResponse"
                        }
                      ]
                    }
                  }
                }
              ]
            },
            "DeleteComputersResponse": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "message": {
                  "type": "string",
                  "nullable": true
                }
              }
            },
            "CollectionResponseOfDeleteComputersResponse": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "collection": {
                  "type": "array",
                  "nullable": true,
                  "items": {
                    "$ref": "#/components/schemas/DeleteComputersResponse"
                  }
                },
                "totalRowsCount": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "ObjectResponse": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "message": {
                  "type": "string",
                  "nullable": true
                }
              }
            },
            "ArchiveComputersRequest": {
              "type": "object",
              "description": "Request to archive multiple computers.",
              "additionalProperties": false,
              "properties": {
                "computerIds": {
                  "type": "array",
                  "description": "A collection of unique IDs of computers to archive.",
                  "nullable": true,
                  "items": {
                    "type": "string",
                    "format": "guid"
                  }
                }
              }
            },
            "ComputerEnvironmentVariables": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/BaseResponse"
                },
                {
                  "type": "object",
                  "description": "Response representing environment variables present on a computer.",
                  "additionalProperties": false,
                  "properties": {
                    "computerId": {
                      "type": "string",
                      "description": "The unique ID of the computer.",
                      "format": "guid",
                      "example": "ae739332-5f44-4c70-aec5-251c841366f1"
                    },
                    "environmentVariableName": {
                      "type": "string",
                      "description": "The name of the environment variables.",
                      "nullable": true,
                      "example": "CommonProgramW6432"
                    },
                    "environmentVariableValue": {
                      "type": "string",
                      "description": "The value of the environment variables.",
                      "nullable": true,
                      "example": "C:\\Program Files\\Common Files"
                    }
                  }
                }
              ]
            },
            "FilteredResponseWithLinksOfComputerEnvironmentVariables": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/BaseResponse"
                },
                {
                  "type": "object",
                  "description": "Generic response class supporting filtering and including links.",
                  "additionalProperties": false,
                  "required": [
                    "items",
                    "pagination"
                  ],
                  "properties": {
                    "items": {
                      "type": "array",
                      "description": "A collection of items returned in the response.",
                      "items": {
                        "$ref": "#/components/schemas/ComputerEnvironmentVariables"
                      }
                    },
                    "pagination": {
                      "description": "The pagination details.",
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/PaginationResponse"
                        }
                      ]
                    }
                  }
                }
              ]
            }
          },
          "securitySchemes": {
            "BearerAuth": {
              "type": "http",
              "scheme": "bearer",
              "bearerFormat": "JWT"
            }
          }
        },
        "tags": [
          {
            "name": "Computer application metering"
          },
          {
            "name": "Computer applications"
          },
          {
            "name": "Computer contracts"
          },
          {
            "name": "Computer costs"
          },
          {
            "name": "Computer display adapter"
          },
          {
            "name": "Computer drives"
          },
          {
            "name": "Computer environment variables"
          },
          {
            "name": "Computer hardware"
          },
          {
            "name": "Computer logical disks"
          },
          {
            "name": "Computer logon history"
          },
          {
            "name": "Computer monitors"
          },
          {
            "name": "Computer network adapters"
          },
          {
            "name": "Computer processors"
          },
          {
            "name": "Computer registries"
          },
          {
            "name": "Computers"
          }
        ]
      }
    },
    "sam_api_licenses": {
      "converted": {
        "openapi": "3.0.0",
        "info": {
          "title": "SAM: Licenses",
          "contact": {
            "name": "Snow Software, Inc.",
            "url": "https://www.snowsoftware.com"
          },
          "version": "1.6.0"
        },
        "servers": [
          {
            "url": "https://{region}.snowsoftware.io",
            "description": "You can find your **Data region** in the **Snow Atlas settings** menu, in **License details**. Your **Data region** is on the **General information** tab. For further information, see [General information](https://docs.snowsoftware.com/snow-atlas/en/UUID-2d4ce22b-e2a9-b7b0-44b8-0ecc55c2959f.html#UUID-2d4ce22b-e2a9-b7b0-44b8-0ecc55c2959f_section-idm4543865842761633102149279789 \"https://docs.snowsoftware.com/snow-atlas/en/UUID-2d4ce22b-e2a9-b7b0-44b8-0ecc55c2959f.html#UUID-2d4ce22b-e2a9-b7b0-44b8-0ecc55c2959f_section-idm4543865842761633102149279789\").",
            "variables": {
              "region": {
                "enum": [
                  "westeurope",
                  "australiasoutheast",
                  "eastus2",
                  "uksouth"
                ],
                "default": "westeurope"
              }
            }
          }
        ],
        "paths": {
          "/api/sam/v1/licenses/{id}/upgrades": {
            "get": {
              "tags": [
                "Upgrades"
              ],
              "summary": "Get license upgrades",
              "description": "Returns a collection of upgrades for a license.",
              "operationId": "getLicenseUpgradeCollection",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the license.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                },
                {
                  "name": "filter",
                  "in": "query",
                  "description": "For more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).",
                  "schema": {
                    "type": "string"
                  },
                  "example": "filter=status -eq \"active\""
                },
                {
                  "name": "page_number",
                  "in": "query",
                  "description": "The page number.",
                  "schema": {
                    "type": "integer",
                    "default": 1,
                    "minimum": 1
                  }
                },
                {
                  "name": "page_size",
                  "in": "query",
                  "description": "The maximum number of items in the response.",
                  "schema": {
                    "type": "integer",
                    "default": 100,
                    "minimum": 1
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/HateoasCollectionOfLicenseUpgrade"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 404,
                          "message": "Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.r"
                  ]
                }
              ]
            }
          },
          "/api/sam/v1/licenses/{id}/upgrades/{upgradedLicenseId}": {
            "get": {
              "tags": [
                "Upgrades"
              ],
              "summary": "Get the details of a license upgrade",
              "description": "Returns the details of a license upgrade.",
              "operationId": "getLicenseUpgradeDetails",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the license.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                },
                {
                  "name": "upgradedLicenseId",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the upgraded license.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/LicenseUpgrade"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 404,
                          "message": "Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.r"
                  ]
                }
              ]
            }
          },
          "/api/sam/v1/licenses/transfers/{applicationId}/computers": {
            "get": {
              "tags": [
                "Transfers"
              ],
              "summary": "Get application license transfers",
              "description": "Returns a collection of computer license transfers for an application.",
              "operationId": "getComputerTransferCollection",
              "parameters": [
                {
                  "name": "applicationId",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the application.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                },
                {
                  "name": "filter",
                  "in": "query",
                  "description": "For more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).",
                  "schema": {
                    "type": "string"
                  },
                  "example": "filter=status -eq \"active\""
                },
                {
                  "name": "page_number",
                  "in": "query",
                  "description": "The page number.",
                  "schema": {
                    "type": "integer",
                    "default": 1,
                    "minimum": 1
                  }
                },
                {
                  "name": "page_size",
                  "in": "query",
                  "description": "The maximum number of items in the response.",
                  "schema": {
                    "type": "integer",
                    "default": 100,
                    "minimum": 1
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/HateoasCollectionOfComputerTransferCollection"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 404,
                          "message": "Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.r"
                  ]
                }
              ]
            }
          },
          "/api/sam/v1/licenses/transfers/{applicationId}/computers/{computerId}": {
            "get": {
              "tags": [
                "Transfers"
              ],
              "summary": "Get application license transfers for a computer",
              "description": "Returns a collection of license transfers for specific application on a computer.",
              "operationId": "getComputerTransferDetailsCollection",
              "parameters": [
                {
                  "name": "applicationId",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the application.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                },
                {
                  "name": "computerId",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the computer.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                },
                {
                  "name": "filter",
                  "in": "query",
                  "description": "For more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).",
                  "schema": {
                    "type": "string"
                  },
                  "example": "filter=status -eq \"active\""
                },
                {
                  "name": "page_number",
                  "in": "query",
                  "description": "The page number.",
                  "schema": {
                    "type": "integer",
                    "default": 1,
                    "minimum": 1
                  }
                },
                {
                  "name": "page_size",
                  "in": "query",
                  "description": "The maximum number of items in the response.",
                  "schema": {
                    "type": "integer",
                    "default": 100,
                    "minimum": 1
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/HateoasCollectionOfComputerTransferDetailsCollection"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 404,
                          "message": "Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.r"
                  ]
                }
              ]
            }
          },
          "/api/sam/v1/licenses/transfers/{applicationId}/custom-values": {
            "get": {
              "tags": [
                "Transfers"
              ],
              "summary": "Get custom value license transfers",
              "description": "Returns a collection of custom value license transfers.",
              "operationId": "getCustomValueTransferCollection",
              "parameters": [
                {
                  "name": "applicationId",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the application.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                },
                {
                  "name": "filter",
                  "in": "query",
                  "description": "For more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).",
                  "schema": {
                    "type": "string"
                  },
                  "example": "filter=status -eq \"active\""
                },
                {
                  "name": "page_number",
                  "in": "query",
                  "description": "The page number.",
                  "schema": {
                    "type": "integer",
                    "default": 1,
                    "minimum": 1
                  }
                },
                {
                  "name": "page_size",
                  "in": "query",
                  "description": "The maximum number of items in the response.",
                  "schema": {
                    "type": "integer",
                    "default": 100,
                    "minimum": 1
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/HateoasCollectionOfCustomValueTransferCollection"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 404,
                          "message": "Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.r"
                  ]
                }
              ]
            }
          },
          "/api/sam/v1/licenses/transfers/{applicationId}/custom-values/{customId}": {
            "get": {
              "tags": [
                "Transfers"
              ],
              "summary": "Get application license custom value transfers",
              "description": "Returns a collection of license transfers for a given custom value.",
              "operationId": "getCustomValueTransferDetailsCollection",
              "parameters": [
                {
                  "name": "applicationId",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the application.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                },
                {
                  "name": "customId",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the custom compare value.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                },
                {
                  "name": "filter",
                  "in": "query",
                  "description": "For more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).",
                  "schema": {
                    "type": "string"
                  },
                  "example": "filter=status -eq \"active\""
                },
                {
                  "name": "page_number",
                  "in": "query",
                  "description": "The page number.",
                  "schema": {
                    "type": "integer",
                    "default": 1,
                    "minimum": 1
                  }
                },
                {
                  "name": "page_size",
                  "in": "query",
                  "description": "The maximum number of items in the response.",
                  "schema": {
                    "type": "integer",
                    "default": 100,
                    "minimum": 1
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/HateoasCollectionOfCustomValueTransferDetailsCollection"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 404,
                          "message": "Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.r"
                  ]
                }
              ]
            }
          },
          "/api/sam/v1/licenses/transfers/{applicationId}": {
            "get": {
              "tags": [
                "Transfers"
              ],
              "summary": "Get application license transfers",
              "description": "Returns a collection of license transfers for an application.",
              "operationId": "getLicenseTransferCollection",
              "parameters": [
                {
                  "name": "applicationId",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the application.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                },
                {
                  "name": "filter",
                  "in": "query",
                  "description": "For more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).",
                  "schema": {
                    "type": "string"
                  },
                  "example": "filter=status -eq \"active\""
                },
                {
                  "name": "page_number",
                  "in": "query",
                  "description": "The page number.",
                  "schema": {
                    "type": "integer",
                    "default": 1,
                    "minimum": 1
                  }
                },
                {
                  "name": "page_size",
                  "in": "query",
                  "description": "The maximum number of items in the response.",
                  "schema": {
                    "type": "integer",
                    "default": 100,
                    "minimum": 1
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/HateoasCollectionOfLicenseTransferCollection"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 404,
                          "message": "Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.r"
                  ]
                }
              ]
            }
          },
          "/api/sam/v1/licenses/transfers/{applicationId}/users": {
            "get": {
              "tags": [
                "Transfers"
              ],
              "summary": "Get users license transfer details",
              "description": "Returns a collection of user license transfers.",
              "operationId": "getUserTransferCollection",
              "parameters": [
                {
                  "name": "applicationId",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the application.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                },
                {
                  "name": "filter",
                  "in": "query",
                  "description": "For more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).",
                  "schema": {
                    "type": "string"
                  },
                  "example": "filter=status -eq \"active\""
                },
                {
                  "name": "page_number",
                  "in": "query",
                  "description": "The page number.",
                  "schema": {
                    "type": "integer",
                    "default": 1,
                    "minimum": 1
                  }
                },
                {
                  "name": "page_size",
                  "in": "query",
                  "description": "The maximum number of items in the response.",
                  "schema": {
                    "type": "integer",
                    "default": 100,
                    "minimum": 1
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/HateoasCollectionOfUserTransferCollection"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 404,
                          "message": "Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.r"
                  ]
                }
              ]
            }
          },
          "/api/sam/v1/licenses/transfers/{applicationId}/users/{userId}": {
            "get": {
              "tags": [
                "Transfers"
              ],
              "summary": "Get user license transfer details",
              "description": "Returns a collection of license transfers for a given user.",
              "operationId": "getUserTransferDetailsCollection",
              "parameters": [
                {
                  "name": "applicationId",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the application.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                },
                {
                  "name": "userId",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the user.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                },
                {
                  "name": "filter",
                  "in": "query",
                  "description": "For more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).",
                  "schema": {
                    "type": "string"
                  },
                  "example": "filter=status -eq \"active\""
                },
                {
                  "name": "page_number",
                  "in": "query",
                  "description": "The page number.",
                  "schema": {
                    "type": "integer",
                    "default": 1,
                    "minimum": 1
                  }
                },
                {
                  "name": "page_size",
                  "in": "query",
                  "description": "The maximum number of items in the response.",
                  "schema": {
                    "type": "integer",
                    "default": 100,
                    "minimum": 1
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/HateoasCollectionOfUserTransferDetailsCollection"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 404,
                          "message": "Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.r"
                  ]
                }
              ]
            }
          },
          "/api/sam/v1/licenses/tracking-computers/{computerId}": {
            "get": {
              "tags": [
                "Tracking"
              ],
              "summary": "Get computer license tracking",
              "description": "Returns a collection of application license tracking for a given computer.",
              "operationId": "getApplicationsComputerTrackingCollection",
              "parameters": [
                {
                  "name": "computerId",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the computer.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                },
                {
                  "name": "filter",
                  "in": "query",
                  "description": "For more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).",
                  "schema": {
                    "type": "string"
                  },
                  "example": "filter=status -eq \"active\""
                },
                {
                  "name": "page_number",
                  "in": "query",
                  "description": "The page number.",
                  "schema": {
                    "type": "integer",
                    "default": 1,
                    "minimum": 1
                  }
                },
                {
                  "name": "page_size",
                  "in": "query",
                  "description": "The maximum number of items in the response.",
                  "schema": {
                    "type": "integer",
                    "default": 100,
                    "minimum": 1
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/HateoasCollectionOfApplicationComputerTrackingCollection"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 404,
                          "message": "Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.r"
                  ]
                }
              ]
            }
          },
          "/api/sam/v1/licenses/tracking/{applicationId}/computers": {
            "get": {
              "tags": [
                "Tracking"
              ],
              "summary": "Get computer license tracking for a given application",
              "description": "Returns a collection of computer license tracking.",
              "operationId": "getComputerTrackingCollection",
              "parameters": [
                {
                  "name": "applicationId",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the application.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                },
                {
                  "name": "filter",
                  "in": "query",
                  "description": "For more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).",
                  "schema": {
                    "type": "string"
                  },
                  "example": "filter=status -eq \"active\""
                },
                {
                  "name": "page_number",
                  "in": "query",
                  "description": "The page number.",
                  "schema": {
                    "type": "integer",
                    "default": 1,
                    "minimum": 1
                  }
                },
                {
                  "name": "page_size",
                  "in": "query",
                  "description": "The maximum number of items in the response.",
                  "schema": {
                    "type": "integer",
                    "default": 100,
                    "minimum": 1
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/HateoasCollectionOfComputerTrackingCollection"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 404,
                          "message": "Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.r"
                  ]
                }
              ]
            }
          },
          "/api/sam/v1/licenses/tracking/{applicationId}/computers/{computerId}": {
            "get": {
              "tags": [
                "Tracking"
              ],
              "summary": "Get application license tracking for a computer",
              "description": "Returns a collection of application license tracking for a given computer.",
              "operationId": "getComputerTrackingDetailsCollection",
              "parameters": [
                {
                  "name": "applicationId",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the application.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                },
                {
                  "name": "computerId",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the computer.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                },
                {
                  "name": "filter",
                  "in": "query",
                  "description": "For more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).",
                  "schema": {
                    "type": "string"
                  },
                  "example": "filter=status -eq \"active\""
                },
                {
                  "name": "page_number",
                  "in": "query",
                  "description": "The page number.",
                  "schema": {
                    "type": "integer",
                    "default": 1,
                    "minimum": 1
                  }
                },
                {
                  "name": "page_size",
                  "in": "query",
                  "description": "The maximum number of items in the response.",
                  "schema": {
                    "type": "integer",
                    "default": 100,
                    "minimum": 1
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/HateoasCollectionOfComputerTrackingDetailsCollection"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 404,
                          "message": "Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.r"
                  ]
                }
              ]
            }
          },
          "/api/sam/v1/licenses/tracking/{applicationId}": {
            "get": {
              "tags": [
                "Tracking"
              ],
              "summary": "Get application license tracking details",
              "description": "Returns a collection of license tracking for an application.",
              "operationId": "getSiteAssignment",
              "parameters": [
                {
                  "name": "applicationId",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the application.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                },
                {
                  "name": "filter",
                  "in": "query",
                  "description": "For more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).",
                  "schema": {
                    "type": "string"
                  },
                  "example": "filter=status -eq \"active\""
                },
                {
                  "name": "page_number",
                  "in": "query",
                  "description": "The page number.",
                  "schema": {
                    "type": "integer",
                    "default": 1,
                    "minimum": 1
                  }
                },
                {
                  "name": "page_size",
                  "in": "query",
                  "description": "The maximum number of items in the response.",
                  "schema": {
                    "type": "integer",
                    "default": 100,
                    "minimum": 1
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/HateoasCollectionOfLicenseTracking"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 404,
                          "message": "Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.r"
                  ]
                }
              ]
            }
          },
          "/api/sam/v1/licenses/tracking/{applicationId}/users": {
            "get": {
              "tags": [
                "Tracking"
              ],
              "summary": "Get user license tracking for application",
              "description": "Returns a collection of users license tracking.",
              "operationId": "getUserTrackingCollection",
              "parameters": [
                {
                  "name": "applicationId",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the application.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                },
                {
                  "name": "filter",
                  "in": "query",
                  "description": "For more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).",
                  "schema": {
                    "type": "string"
                  },
                  "example": "filter=status -eq \"active\""
                },
                {
                  "name": "page_number",
                  "in": "query",
                  "description": "The page number.",
                  "schema": {
                    "type": "integer",
                    "default": 1,
                    "minimum": 1
                  }
                },
                {
                  "name": "page_size",
                  "in": "query",
                  "description": "The maximum number of items in the response.",
                  "schema": {
                    "type": "integer",
                    "default": 100,
                    "minimum": 1
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/HateoasCollectionOfUserTrackingCollection"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 404,
                          "message": "Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.r"
                  ]
                }
              ]
            }
          },
          "/api/sam/v1/licenses/tracking/{applicationId}/users/{userId}": {
            "get": {
              "tags": [
                "Tracking"
              ],
              "summary": "Get user license tracking for application",
              "description": "Returns a collection of license tracking for a given user.",
              "operationId": "getUserTrackingDetailsCollection",
              "parameters": [
                {
                  "name": "applicationId",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the application.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                },
                {
                  "name": "userId",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the user.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                },
                {
                  "name": "filter",
                  "in": "query",
                  "description": "For more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).",
                  "schema": {
                    "type": "string"
                  },
                  "example": "filter=status -eq \"active\""
                },
                {
                  "name": "page_number",
                  "in": "query",
                  "description": "The page number.",
                  "schema": {
                    "type": "integer",
                    "default": 1,
                    "minimum": 1
                  }
                },
                {
                  "name": "page_size",
                  "in": "query",
                  "description": "The maximum number of items in the response.",
                  "schema": {
                    "type": "integer",
                    "default": 100,
                    "minimum": 1
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/HateoasCollectionOfUserTrackingDetailsCollection"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 404,
                          "message": "Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.r"
                  ]
                }
              ]
            }
          },
          "/api/sam/v1/licenses-policies/{policyId}/fields": {
            "get": {
              "tags": [
                "Policies"
              ],
              "summary": "Get license policy fields",
              "description": "Returns a collection of license policy fields.",
              "operationId": "getLicensePolicyFieldCollection",
              "parameters": [
                {
                  "name": "policyId",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the policy.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                },
                {
                  "name": "filter",
                  "in": "query",
                  "description": "For more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).",
                  "schema": {
                    "type": "string"
                  },
                  "example": "filter=status -eq \"active\""
                },
                {
                  "name": "page_number",
                  "in": "query",
                  "description": "The page number.",
                  "schema": {
                    "type": "integer",
                    "default": 1,
                    "minimum": 1
                  }
                },
                {
                  "name": "page_size",
                  "in": "query",
                  "description": "The maximum number of items in the response.",
                  "schema": {
                    "type": "integer",
                    "default": 100,
                    "minimum": 1
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/HateoasCollectionOfLicensePolicyFieldCollection"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 404,
                          "message": "Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.r"
                  ]
                }
              ]
            }
          },
          "/api/sam/v1/licenses-policies/{policyId}/fields/{fieldId}": {
            "get": {
              "tags": [
                "Policies"
              ],
              "summary": "Get license policy field details",
              "description": "Returns the details of a license policy field.",
              "operationId": "getLicensePolicyField",
              "parameters": [
                {
                  "name": "policyId",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the policy.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                },
                {
                  "name": "fieldId",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the policy field.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/LicensePolicyField"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 404,
                          "message": "Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.r"
                  ]
                }
              ]
            }
          },
          "/api/sam/v1/licenses-policies": {
            "get": {
              "tags": [
                "Policies"
              ],
              "summary": "Get license policies",
              "description": "Returns a collection of license policies.",
              "operationId": "getPolicyCollection",
              "parameters": [
                {
                  "name": "filter",
                  "in": "query",
                  "description": "For more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).",
                  "schema": {
                    "type": "string"
                  },
                  "example": "filter=status -eq \"active\""
                },
                {
                  "name": "page_number",
                  "in": "query",
                  "description": "The page number.",
                  "schema": {
                    "type": "integer",
                    "default": 1,
                    "minimum": 1
                  }
                },
                {
                  "name": "page_size",
                  "in": "query",
                  "description": "The maximum number of items in the response.",
                  "schema": {
                    "type": "integer",
                    "default": 100,
                    "minimum": 1
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/HateoasCollectionOfPolicy"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.r"
                  ]
                }
              ]
            }
          },
          "/api/sam/v1/licenses-policies/{policyId}": {
            "get": {
              "tags": [
                "Policies"
              ],
              "summary": "Get license policy details",
              "description": "Returns the details of a license policy.",
              "operationId": "getPolicy",
              "parameters": [
                {
                  "name": "policyId",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the policy.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/Policy"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 404,
                          "message": "Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.r"
                  ]
                }
              ]
            }
          },
          "/api/sam/v1/licenses/maintenance-periods": {
            "get": {
              "tags": [
                "Periods"
              ],
              "summary": "Get maintenance and support periods",
              "description": "Returns a collection of maintenance periods.",
              "operationId": "getLicenseMaintenancePeriods",
              "parameters": [
                {
                  "name": "filter",
                  "in": "query",
                  "description": "For more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).",
                  "schema": {
                    "type": "string"
                  },
                  "example": "filter=status -eq \"active\""
                },
                {
                  "name": "page_number",
                  "in": "query",
                  "description": "The page number.",
                  "schema": {
                    "type": "integer",
                    "default": 1,
                    "minimum": 1
                  }
                },
                {
                  "name": "page_size",
                  "in": "query",
                  "description": "The maximum number of items in the response.",
                  "schema": {
                    "type": "integer",
                    "default": 100,
                    "minimum": 1
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/HateoasCollectionOfMaintenancePeriodCollection"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.r"
                  ]
                }
              ]
            }
          },
          "/api/sam/v1/licenses/{id}/maintenance-periods": {
            "get": {
              "tags": [
                "Periods"
              ],
              "summary": "Get maintenance and support periods",
              "description": "Returns a collection of maintenance periods.",
              "operationId": "getLicenseMaintenancePeriodsByLicenseId",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the license.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                },
                {
                  "name": "filter",
                  "in": "query",
                  "description": "For more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).",
                  "schema": {
                    "type": "string"
                  },
                  "example": "filter=status -eq \"active\""
                },
                {
                  "name": "page_number",
                  "in": "query",
                  "description": "The page number.",
                  "schema": {
                    "type": "integer",
                    "default": 1,
                    "minimum": 1
                  }
                },
                {
                  "name": "page_size",
                  "in": "query",
                  "description": "The maximum number of items in the response.",
                  "schema": {
                    "type": "integer",
                    "default": 100,
                    "minimum": 1
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/HateoasCollectionOfMaintenancePeriodCollection"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 404,
                          "message": "Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.r"
                  ]
                }
              ]
            },
            "post": {
              "tags": [
                "Periods"
              ],
              "summary": "Add maintenance period",
              "description": "Creates a maintenance period.",
              "operationId": "addMaintenancePeriod",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the license.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/MaintenancePeriodRequest"
                    }
                  }
                }
              },
              "responses": {
                "201": {
                  "description": "Created: Your request created something new. Usually, this is a call that used the POST method and will allow a GET method to retrieve it later.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CreatedHateoasResponse"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 404,
                          "message": "Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.crud"
                  ]
                }
              ]
            },
            "put": {
              "tags": [
                "Periods"
              ],
              "summary": "Replace a collection of maintenance periods",
              "description": "Replaces a collection of maintenance periods.",
              "operationId": "replaceMaintenancePeriods",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the license.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/ListOfMaintenancePeriodRequest"
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/HateoasCollectionOfMaintenancePeriodCollection"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 404,
                          "message": "Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.crud"
                  ]
                }
              ]
            },
            "delete": {
              "tags": [
                "Periods"
              ],
              "summary": "Delete the given maintenance periods",
              "description": "Removes the given maintenance periods.",
              "operationId": "deleteMaintenancePeriods",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the license.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                }
              ],
              "responses": {
                "204": {
                  "description": "No Content: Your request succeeded, but the response message was empty."
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 404,
                          "message": "Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.crud"
                  ]
                }
              ]
            }
          },
          "/api/sam/v1/licenses/{id}/maintenance-periods/{periodId}": {
            "put": {
              "tags": [
                "Periods"
              ],
              "summary": "Replace a maintenance period",
              "description": "Replaces a maintenance period.",
              "operationId": "replaceMaintenancePeriod",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the license.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                },
                {
                  "name": "periodId",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the maintenance period.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/MaintenancePeriodRequest"
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/MaintenancePeriod"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 404,
                          "message": "Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.crud"
                  ]
                }
              ]
            },
            "delete": {
              "tags": [
                "Periods"
              ],
              "summary": "Delete the given maintenance period",
              "description": "Removes the given maintenance period.",
              "operationId": "deleteMaintenancePeriod",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the license.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                },
                {
                  "name": "periodId",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the maintenance period.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                }
              ],
              "responses": {
                "204": {
                  "description": "No Content: Your request succeeded, but the response message was empty."
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 404,
                          "message": "Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.crud"
                  ]
                }
              ]
            }
          },
          "/api/sam/v1/licenses": {
            "get": {
              "tags": [
                "Licenses"
              ],
              "summary": "Get licenses",
              "description": "Returns a collection of licenses.",
              "operationId": "getLicenseCollection",
              "parameters": [
                {
                  "name": "filter",
                  "in": "query",
                  "description": "For more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).",
                  "schema": {
                    "type": "string"
                  },
                  "example": "filter=status -eq \"active\""
                },
                {
                  "name": "page_number",
                  "in": "query",
                  "description": "The page number.",
                  "schema": {
                    "type": "integer",
                    "default": 1,
                    "minimum": 1
                  }
                },
                {
                  "name": "page_size",
                  "in": "query",
                  "description": "The maximum number of items in the response.",
                  "schema": {
                    "type": "integer",
                    "default": 100,
                    "minimum": 1
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/HateoasCollectionOfLicenseCollection"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.r"
                  ]
                }
              ]
            },
            "post": {
              "tags": [
                "Licenses"
              ],
              "summary": "Add license",
              "description": "Creates a license.",
              "operationId": "addLicense",
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/LicenseRequest"
                    }
                  }
                }
              },
              "responses": {
                "201": {
                  "description": "Created: Your request created something new. Usually, this is a call that used the POST method and will allow a GET method to retrieve it later.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/License"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.crud"
                  ]
                }
              ]
            }
          },
          "/api/sam/v1/licenses/{id}": {
            "get": {
              "tags": [
                "Licenses"
              ],
              "summary": "Get license details",
              "description": "Returns the details of a license.",
              "operationId": "getLicenseById",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the license.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/License"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 404,
                          "message": "Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.r"
                  ]
                }
              ]
            },
            "put": {
              "tags": [
                "Licenses"
              ],
              "summary": "Replace a license",
              "description": "Replaces a license.",
              "operationId": "replaceLicense",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the license.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/LicenseRequest"
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/License"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 404,
                          "message": "Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.crud"
                  ]
                }
              ]
            },
            "delete": {
              "tags": [
                "Licenses"
              ],
              "summary": "Delete license",
              "description": "Removes the given license.",
              "operationId": "deleteLicense",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the license.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                }
              ],
              "responses": {
                "204": {
                  "description": "No Content: Your request succeeded, but the response message was empty."
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 404,
                          "message": "Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.crud"
                  ]
                }
              ]
            }
          },
          "/api/sam/v1/licenses-entitlements": {
            "get": {
              "tags": [
                "Entitlements"
              ],
              "summary": "Get license entitlements",
              "description": "Returns a collection of license entitlements.",
              "operationId": "getLicenseEntitlementCollection",
              "parameters": [
                {
                  "name": "filter",
                  "in": "query",
                  "description": "For more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).",
                  "schema": {
                    "type": "string"
                  },
                  "example": "filter=status -eq \"active\""
                },
                {
                  "name": "page_number",
                  "in": "query",
                  "description": "The page number.",
                  "schema": {
                    "type": "integer",
                    "default": 1,
                    "minimum": 1
                  }
                },
                {
                  "name": "page_size",
                  "in": "query",
                  "description": "The maximum number of items in the response.",
                  "schema": {
                    "type": "integer",
                    "default": 100,
                    "minimum": 1
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/HateoasCollectionOfLicenseEntitlement"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.r"
                  ]
                }
              ]
            }
          },
          "/api/sam/v1/licenses/entitlements/computers": {
            "get": {
              "tags": [
                "Entitlements"
              ],
              "summary": "Get computers applications entitlements",
              "description": "Returns a collection of computers and applications entitlements.",
              "operationId": "getComputerApplicationEntitlementCollection",
              "parameters": [
                {
                  "name": "filter",
                  "in": "query",
                  "description": "For more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).",
                  "schema": {
                    "type": "string"
                  },
                  "example": "filter=status -eq \"active\""
                },
                {
                  "name": "page_number",
                  "in": "query",
                  "description": "The page number.",
                  "schema": {
                    "type": "integer",
                    "default": 1,
                    "minimum": 1
                  }
                },
                {
                  "name": "page_size",
                  "in": "query",
                  "description": "The maximum number of items in the response.",
                  "schema": {
                    "type": "integer",
                    "default": 100,
                    "minimum": 1
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/HateoasCollectionOfComputerApplicationEntitlement"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.r"
                  ]
                }
              ]
            }
          },
          "/api/sam/v1/licenses/entitlements/entitlement-states": {
            "get": {
              "tags": [
                "Entitlements"
              ],
              "summary": "Get license entitlement states",
              "description": "Returns a collection of entitlements states.",
              "operationId": "getEntitlementStateCollection",
              "parameters": [
                {
                  "name": "page_number",
                  "in": "query",
                  "description": "The page number.",
                  "schema": {
                    "type": "integer",
                    "default": 1,
                    "minimum": 1
                  }
                },
                {
                  "name": "page_size",
                  "in": "query",
                  "description": "The maximum number of items in the response.",
                  "schema": {
                    "type": "integer",
                    "default": 100,
                    "minimum": 1
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/HateoasCollectionOfEntitlementState"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.r"
                  ]
                }
              ]
            }
          },
          "/api/sam/v1/licenses/entitlements/users": {
            "get": {
              "tags": [
                "Entitlements"
              ],
              "summary": "Get user license entitlements",
              "description": "Returns a collection of user entitlements.",
              "operationId": "getUserApplicationEntitlementCollection",
              "parameters": [
                {
                  "name": "filter",
                  "in": "query",
                  "description": "For more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).",
                  "schema": {
                    "type": "string"
                  },
                  "example": "filter=status -eq \"active\""
                },
                {
                  "name": "page_number",
                  "in": "query",
                  "description": "The page number.",
                  "schema": {
                    "type": "integer",
                    "default": 1,
                    "minimum": 1
                  }
                },
                {
                  "name": "page_size",
                  "in": "query",
                  "description": "The maximum number of items in the response.",
                  "schema": {
                    "type": "integer",
                    "default": 100,
                    "minimum": 1
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/HateoasCollectionOfUserApplicationEntitlement"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.r"
                  ]
                }
              ]
            }
          },
          "/api/sam/v1/licenses-extended-coverage-types": {
            "get": {
              "tags": [
                "Coverage"
              ],
              "summary": "Get licenses extended coverage types",
              "description": "Returns a collection of extended coverage types.",
              "operationId": "getExtendedCoverageTypeCollection",
              "parameters": [
                {
                  "name": "filter",
                  "in": "query",
                  "description": "For more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).",
                  "schema": {
                    "type": "string"
                  },
                  "example": "filter=status -eq \"active\""
                },
                {
                  "name": "page_number",
                  "in": "query",
                  "description": "The page number.",
                  "schema": {
                    "type": "integer",
                    "default": 1,
                    "minimum": 1
                  }
                },
                {
                  "name": "page_size",
                  "in": "query",
                  "description": "The maximum number of items in the response.",
                  "schema": {
                    "type": "integer",
                    "default": 100,
                    "minimum": 1
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/HateoasCollectionOfExtendedCoverageType"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.r"
                  ]
                }
              ]
            }
          },
          "/api/sam/v1/extended-coverage": {
            "get": {
              "tags": [
                "Coverage"
              ],
              "summary": "Get extended coverages",
              "description": "Returns a collection of extended coverages.",
              "operationId": "getLicenseExtendedCoverageCollection",
              "parameters": [
                {
                  "name": "filter",
                  "in": "query",
                  "description": "For more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).",
                  "schema": {
                    "type": "string"
                  },
                  "example": "filter=status -eq \"active\""
                },
                {
                  "name": "page_number",
                  "in": "query",
                  "description": "The page number.",
                  "schema": {
                    "type": "integer",
                    "default": 1,
                    "minimum": 1
                  }
                },
                {
                  "name": "page_size",
                  "in": "query",
                  "description": "The maximum number of items in the response.",
                  "schema": {
                    "type": "integer",
                    "default": 100,
                    "minimum": 1
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/HateoasCollectionOfLicenseExtendedCoverage"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.r"
                  ]
                }
              ]
            }
          },
          "/api/sam/v1/extended-coverage/{coverageId}": {
            "get": {
              "tags": [
                "Coverage"
              ],
              "summary": "Get extended coverage",
              "description": "Returns the details of an extended coverage.",
              "operationId": "getLicenseExtendedCoverageDetails",
              "parameters": [
                {
                  "name": "coverageId",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the coverage.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/LicenseExtendedCoverage"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 404,
                          "message": "Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.r"
                  ]
                }
              ]
            }
          },
          "/api/sam/v1/licenses/{id}/costs": {
            "get": {
              "tags": [
                "Costs"
              ],
              "summary": "Get license costs",
              "description": "Returns a collection of license costs.",
              "operationId": "getLicenseCostCollection",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the license.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                },
                {
                  "name": "filter",
                  "in": "query",
                  "description": "For more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).",
                  "schema": {
                    "type": "string"
                  },
                  "example": "filter=status -eq \"active\""
                },
                {
                  "name": "page_number",
                  "in": "query",
                  "description": "The page number.",
                  "schema": {
                    "type": "integer",
                    "default": 1,
                    "minimum": 1
                  }
                },
                {
                  "name": "page_size",
                  "in": "query",
                  "description": "The maximum number of items in the response.",
                  "schema": {
                    "type": "integer",
                    "default": 100,
                    "minimum": 1
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/HateoasCollectionOfLicenseCost"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 404,
                          "message": "Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.r"
                  ]
                }
              ]
            }
          },
          "/api/sam/v1/licenses/{id}/costs/{organizationId}": {
            "get": {
              "tags": [
                "Costs"
              ],
              "summary": "Get a license costs for an organization",
              "description": "Returns the details of a license costs for an organization.",
              "operationId": "getLicenseCost",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the license.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                },
                {
                  "name": "organizationId",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the organization.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/LicenseCost"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 404,
                          "message": "Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.r"
                  ]
                }
              ]
            }
          },
          "/api/sam/v1/licenses/{id}/costs-summary": {
            "get": {
              "tags": [
                "Costs"
              ],
              "summary": "Get a license costs summary",
              "description": "Returns the details of a license costs.",
              "operationId": "getLicenseCostSummary",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the license.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/LicenseCostSummary"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 404,
                          "message": "Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.r"
                  ]
                }
              ]
            }
          },
          "/api/sam/v1/compliance/summary/{applicationId}/allocation": {
            "get": {
              "tags": [
                "Compliance"
              ],
              "summary": "Get compliance allocation summary",
              "description": "Returns a collection of compliance allocations for an application.",
              "operationId": "getAllocationSummaryCollection",
              "parameters": [
                {
                  "name": "applicationId",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the application.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/HateoasCollectionOfAllocationSummaryCollectionItem"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 404,
                          "message": "Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.r"
                  ]
                }
              ]
            }
          },
          "/api/sam/v1/compliance/summary/{applicationId}": {
            "get": {
              "tags": [
                "Compliance"
              ],
              "summary": "Get compliance summary",
              "description": "Returns a collection of application compliance summary.",
              "operationId": "getComplianceSummaryCollection",
              "parameters": [
                {
                  "name": "applicationId",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the application.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/HateoasCollectionOfComplianceSummaryCollection"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 404,
                          "message": "Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.r"
                  ]
                }
              ]
            }
          },
          "/api/sam/v1/compliance/summary/{applicationId}/usage": {
            "get": {
              "tags": [
                "Compliance"
              ],
              "summary": "Get compliance usage summary",
              "description": "Returns a collection of application compliance usage summary.",
              "operationId": "getComplianceSummaryUsageCollection",
              "parameters": [
                {
                  "name": "applicationId",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the application.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/HateoasCollectionOfComplianceSummaryUsageCollection"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 404,
                          "message": "Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.r"
                  ]
                }
              ]
            }
          },
          "/api/sam/v1/assignment-types": {
            "get": {
              "tags": [
                "Assignments"
              ],
              "summary": "Get assignment types",
              "description": "Returns a collection of assignment types.",
              "operationId": "getAssignmentTypesCollection",
              "parameters": [
                {
                  "name": "filter",
                  "in": "query",
                  "description": "For more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).",
                  "schema": {
                    "type": "string"
                  },
                  "example": "filter=status -eq \"active\""
                },
                {
                  "name": "page_number",
                  "in": "query",
                  "description": "The page number.",
                  "schema": {
                    "type": "integer",
                    "default": 1,
                    "minimum": 1
                  }
                },
                {
                  "name": "page_size",
                  "in": "query",
                  "description": "The maximum number of items in the response.",
                  "schema": {
                    "type": "integer",
                    "default": 100,
                    "minimum": 1
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/HateoasCollectionOfAssignmentTypeCollection"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.r"
                  ]
                }
              ]
            }
          },
          "/api/sam/v1/licenses/{id}/assignments/computers": {
            "get": {
              "tags": [
                "Assignments"
              ],
              "summary": "Get license assignments to computers",
              "description": "Returns a collection of a license's assignments to computers.",
              "operationId": "getComputerAssignmentCollection",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the license.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                },
                {
                  "name": "filter",
                  "in": "query",
                  "description": "For more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).",
                  "schema": {
                    "type": "string"
                  },
                  "example": "filter=status -eq \"active\""
                },
                {
                  "name": "page_number",
                  "in": "query",
                  "description": "The page number.",
                  "schema": {
                    "type": "integer",
                    "default": 1,
                    "minimum": 1
                  }
                },
                {
                  "name": "page_size",
                  "in": "query",
                  "description": "The maximum number of items in the response.",
                  "schema": {
                    "type": "integer",
                    "default": 100,
                    "minimum": 1
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/HateoasCollectionOfComputerAssignment"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 404,
                          "message": "Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.r"
                  ]
                }
              ]
            },
            "post": {
              "tags": [
                "Assignments"
              ],
              "summary": "Add license assignment to computer",
              "description": "Creates a license assignment to computer.",
              "operationId": "addComputerAssignment",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the license.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/ComputerAssignmentRequest"
                    }
                  }
                }
              },
              "responses": {
                "201": {
                  "description": "Created: Your request created something new. Usually, this is a call that used the POST method and will allow a GET method to retrieve it later.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CreatedHateoasResponse"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 404,
                          "message": "Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.crud"
                  ]
                }
              ]
            },
            "put": {
              "tags": [
                "Assignments"
              ],
              "summary": "Replace license assignments to computers",
              "description": "Replaces the given license’s assignments to computers.",
              "operationId": "replaceComputerAssignmentCollection",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the license.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/ListOfComputerAssignmentRequest"
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/HateoasCollectionOfComputerAssignment"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 404,
                          "message": "Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.crud"
                  ]
                }
              ]
            },
            "delete": {
              "tags": [
                "Assignments"
              ],
              "summary": "Delete license assignments to computers",
              "description": "Removes the given license’s assignments to computers.",
              "operationId": "deleteComputerAssignmentCollection",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the license.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                }
              ],
              "responses": {
                "204": {
                  "description": "No Content: Your request succeeded, but the response message was empty."
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 404,
                          "message": "Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.crud"
                  ]
                }
              ]
            }
          },
          "/api/sam/v1/licenses/{id}/assignments/computers/{assignmentId}": {
            "get": {
              "tags": [
                "Assignments"
              ],
              "summary": "Get license assignment to computer",
              "description": "Returns the details of the given license assignment to computer.",
              "operationId": "getComputerAssignment",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the license.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                },
                {
                  "name": "assignmentId",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the assignment.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ComputerAssignment"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 404,
                          "message": "Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.r"
                  ]
                }
              ]
            },
            "put": {
              "tags": [
                "Assignments"
              ],
              "summary": "Replace license assignment to computer",
              "description": "Replaces the given license assignment to computer.",
              "operationId": "replaceComputerAssignment",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the license.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                },
                {
                  "name": "assignmentId",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the assignment.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/ComputerAssignmentRequest"
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ComputerAssignment"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 404,
                          "message": "Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.crud"
                  ]
                }
              ]
            },
            "delete": {
              "tags": [
                "Assignments"
              ],
              "summary": "Delete license assignment to computer",
              "description": "Removes the given license assignment to computer.",
              "operationId": "deleteComputerAssignment",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the license.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                },
                {
                  "name": "assignmentId",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the assignment.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                }
              ],
              "responses": {
                "204": {
                  "description": "No Content: Your request succeeded, but the response message was empty."
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 404,
                          "message": "Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.crud"
                  ]
                }
              ]
            }
          },
          "/api/sam/v1/licenses/{id}/assignments/datacenters": {
            "get": {
              "tags": [
                "Assignments"
              ],
              "summary": "Get license assignments to datacenters",
              "description": "Returns a collection of a license's assignments to datacenters.",
              "operationId": "getDatacenterAssignmentCollection",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the license.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                },
                {
                  "name": "filter",
                  "in": "query",
                  "description": "For more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).",
                  "schema": {
                    "type": "string"
                  },
                  "example": "filter=status -eq \"active\""
                },
                {
                  "name": "page_number",
                  "in": "query",
                  "description": "The page number.",
                  "schema": {
                    "type": "integer",
                    "default": 1,
                    "minimum": 1
                  }
                },
                {
                  "name": "page_size",
                  "in": "query",
                  "description": "The maximum number of items in the response.",
                  "schema": {
                    "type": "integer",
                    "default": 100,
                    "minimum": 1
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/HateoasCollectionOfDatacenterAssignment"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 404,
                          "message": "Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.r"
                  ]
                }
              ]
            },
            "post": {
              "tags": [
                "Assignments"
              ],
              "summary": "Add license assignment to datacenter",
              "description": "Creates a license assignment to datacenter.",
              "operationId": "addDatacenterAssignment",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the license.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/DatacenterAssignmentRequest"
                    }
                  }
                }
              },
              "responses": {
                "201": {
                  "description": "Created: Your request created something new. Usually, this is a call that used the POST method and will allow a GET method to retrieve it later.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CreatedHateoasResponse"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 404,
                          "message": "Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.crud"
                  ]
                }
              ]
            },
            "put": {
              "tags": [
                "Assignments"
              ],
              "summary": "Replace license assignments to datacenters",
              "description": "Replaces the given license’s assignments to datacenters.",
              "operationId": "replaceDataCenterAssignmentCollection",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the license.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/ListOfDatacenterAssignmentRequest"
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/HateoasCollectionOfDatacenterAssignment"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 404,
                          "message": "Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.crud"
                  ]
                }
              ]
            },
            "delete": {
              "tags": [
                "Assignments"
              ],
              "summary": "Delete license assignments to datacenters",
              "description": "Removes the given license’s assignments to datacenters.",
              "operationId": "deleteDataCenterAssignmentCollection",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the license.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                }
              ],
              "responses": {
                "204": {
                  "description": "No Content: Your request succeeded, but the response message was empty."
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 404,
                          "message": "Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.crud"
                  ]
                }
              ]
            }
          },
          "/api/sam/v1/licenses/{id}/assignments/datacenters/{assignmentId}": {
            "get": {
              "tags": [
                "Assignments"
              ],
              "summary": "Get license assignment to datacenter",
              "description": "Returns the details of the given license assignment to datacenter.",
              "operationId": "getDatacenterAssignment",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the license.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                },
                {
                  "name": "assignmentId",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the assignment.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                },
                {
                  "name": "filter",
                  "in": "query",
                  "description": "For more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).",
                  "schema": {
                    "type": "string"
                  },
                  "example": "filter=status -eq \"active\""
                },
                {
                  "name": "page_number",
                  "in": "query",
                  "description": "The page number.",
                  "schema": {
                    "type": "integer",
                    "default": 1,
                    "minimum": 1
                  }
                },
                {
                  "name": "page_size",
                  "in": "query",
                  "description": "The maximum number of items in the response.",
                  "schema": {
                    "type": "integer",
                    "default": 100,
                    "minimum": 1
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/DatacenterAssignment"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 404,
                          "message": "Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.r"
                  ]
                }
              ]
            },
            "put": {
              "tags": [
                "Assignments"
              ],
              "summary": "Replace license assignment to datacenter",
              "description": "Replaces the given license assignment to datacenter.",
              "operationId": "replaceDatacenterAssignment",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the license.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                },
                {
                  "name": "assignmentId",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the assignment.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/DatacenterAssignmentRequest"
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/DatacenterAssignment"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 404,
                          "message": "Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.crud"
                  ]
                }
              ]
            },
            "delete": {
              "tags": [
                "Assignments"
              ],
              "summary": "Delete license assignment to datacenter",
              "description": "Removes the given license assignment to datacenter.",
              "operationId": "deleteDatacenterAssignment",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the license.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                },
                {
                  "name": "assignmentId",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the assignment.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                }
              ],
              "responses": {
                "204": {
                  "description": "No Content: Your request succeeded, but the response message was empty."
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 404,
                          "message": "Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.crud"
                  ]
                }
              ]
            }
          },
          "/api/sam/v1/licenses/{id}/assignments-summary": {
            "get": {
              "tags": [
                "Assignments"
              ],
              "summary": "Get license assignments summary",
              "description": "Returns the details of a license's assignments.",
              "operationId": "getLicenseAssignmentDetails",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the license.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/LicenseAssignmentDetails"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 404,
                          "message": "Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.r"
                  ]
                }
              ]
            }
          },
          "/api/sam/v1/licenses/{id}/assignments/organizations": {
            "get": {
              "tags": [
                "Assignments"
              ],
              "summary": "Get license assignments to organizations",
              "description": "Returns a collection of a license's assignments to organizations.",
              "operationId": "getOrganizationAssignmentCollection",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the license.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                },
                {
                  "name": "filter",
                  "in": "query",
                  "description": "For more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).",
                  "schema": {
                    "type": "string"
                  },
                  "example": "filter=status -eq \"active\""
                },
                {
                  "name": "page_number",
                  "in": "query",
                  "description": "The page number.",
                  "schema": {
                    "type": "integer",
                    "default": 1,
                    "minimum": 1
                  }
                },
                {
                  "name": "page_size",
                  "in": "query",
                  "description": "The maximum number of items in the response.",
                  "schema": {
                    "type": "integer",
                    "default": 100,
                    "minimum": 1
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/HateoasCollectionOfOrganizationAssignment"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 404,
                          "message": "Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.r"
                  ]
                }
              ]
            },
            "post": {
              "tags": [
                "Assignments"
              ],
              "summary": "Add license assignment to organization",
              "description": "Creates a license assignment to organization.",
              "operationId": "addOrganizationAssignment",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the license.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/OrganizationAssignmentRequest"
                    }
                  }
                }
              },
              "responses": {
                "201": {
                  "description": "Created: Your request created something new. Usually, this is a call that used the POST method and will allow a GET method to retrieve it later.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CreatedHateoasResponse"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 404,
                          "message": "Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.crud"
                  ]
                }
              ]
            },
            "put": {
              "tags": [
                "Assignments"
              ],
              "summary": "Replace license assignments to organizations",
              "description": "Replaces the given license’s assignments to organizations.",
              "operationId": "replaceOrganizationAssignmentCollection",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the license.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/ListOfOrganizationAssignmentRequest"
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/HateoasCollectionOfOrganizationAssignment"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 404,
                          "message": "Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.crud"
                  ]
                }
              ]
            },
            "delete": {
              "tags": [
                "Assignments"
              ],
              "summary": "Delete license assignments to organizations",
              "description": "Removes the given license’s assignments to organizations.",
              "operationId": "deleteOrganizationAssignmentCollection",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the license.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                }
              ],
              "responses": {
                "204": {
                  "description": "No Content: Your request succeeded, but the response message was empty."
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 404,
                          "message": "Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.crud"
                  ]
                }
              ]
            }
          },
          "/api/sam/v1/licenses/{id}/assignments/organizations/{assignmentId}": {
            "get": {
              "tags": [
                "Assignments"
              ],
              "summary": "Get license assignment to organization",
              "description": "Returns the details of the given license assignment to organization.",
              "operationId": "getOrganizationAssignment",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the license.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                },
                {
                  "name": "assignmentId",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the assignment.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/OrganizationAssignment"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 404,
                          "message": "Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.r"
                  ]
                }
              ]
            },
            "put": {
              "tags": [
                "Assignments"
              ],
              "summary": "Replace license assignment to organization",
              "description": "Replaces the given license assignment to organization.",
              "operationId": "replaceOrganizationAssignment",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the license.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                },
                {
                  "name": "assignmentId",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the assignment.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/OrganizationAssignmentRequest"
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/OrganizationAssignment"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 404,
                          "message": "Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.crud"
                  ]
                }
              ]
            },
            "delete": {
              "tags": [
                "Assignments"
              ],
              "summary": "Delete license assignment to organization",
              "description": "Removes the given license assignment to organization.",
              "operationId": "deleteOrganizationAssignment",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the license.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                },
                {
                  "name": "assignmentId",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the assignment.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                }
              ],
              "responses": {
                "204": {
                  "description": "No Content: Your request succeeded, but the response message was empty."
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 404,
                          "message": "Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.crud"
                  ]
                }
              ]
            }
          },
          "/api/sam/v1/licenses/{id}/assignments/site": {
            "get": {
              "tags": [
                "Assignments"
              ],
              "summary": "Get license assignment to site",
              "description": "Returns the details of the given license’s assignment to site.",
              "operationId": "getSiteAssignment2",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the license.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/SiteAssignment"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 404,
                          "message": "Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.r"
                  ]
                }
              ]
            },
            "post": {
              "tags": [
                "Assignments"
              ],
              "summary": "Add license assignment to site",
              "description": "Creates a license assignment to site.",
              "operationId": "createSiteAssignment",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the license.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/SiteAssignmentRequest"
                    }
                  }
                }
              },
              "responses": {
                "201": {
                  "description": "Created: Your request created something new. Usually, this is a call that used the POST method and will allow a GET method to retrieve it later.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CreatedHateoasResponse"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 404,
                          "message": "Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.crud"
                  ]
                }
              ]
            }
          },
          "/api/sam/v1/licenses/{id}/assignments/site/{assignmentId}": {
            "put": {
              "tags": [
                "Assignments"
              ],
              "summary": "Replace license assignment to site",
              "description": "Replaces the given license assignment to site.",
              "operationId": "replaceSiteAssignment",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the license.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                },
                {
                  "name": "assignmentId",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the assignment.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/SiteAssignmentRequest"
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CreatedHateoasResponse"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 404,
                          "message": "Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.crud"
                  ]
                }
              ]
            },
            "delete": {
              "tags": [
                "Assignments"
              ],
              "summary": "Delete license assignment to site",
              "description": "Removes the given license assignment to site.",
              "operationId": "deleteSiteAssignment",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the license.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                },
                {
                  "name": "assignmentId",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the assignment.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                }
              ],
              "responses": {
                "204": {
                  "description": "No Content: Your request succeeded, but the response message was empty."
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 404,
                          "message": "Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.crud"
                  ]
                }
              ]
            }
          },
          "/api/sam/v1/licenses/{id}/assignments/users": {
            "get": {
              "tags": [
                "Assignments"
              ],
              "summary": "Get license assignments to users",
              "description": "Returns a collection of a license's assignments to users.",
              "operationId": "getUserAssignmentCollection",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the license.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                },
                {
                  "name": "filter",
                  "in": "query",
                  "description": "For more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).",
                  "schema": {
                    "type": "string"
                  },
                  "example": "filter=status -eq \"active\""
                },
                {
                  "name": "page_number",
                  "in": "query",
                  "description": "The page number.",
                  "schema": {
                    "type": "integer",
                    "default": 1,
                    "minimum": 1
                  }
                },
                {
                  "name": "page_size",
                  "in": "query",
                  "description": "The maximum number of items in the response.",
                  "schema": {
                    "type": "integer",
                    "default": 100,
                    "minimum": 1
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/HateoasCollectionOfUserAssignment"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 404,
                          "message": "Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.r"
                  ]
                }
              ]
            },
            "post": {
              "tags": [
                "Assignments"
              ],
              "summary": "Add license assignment to user",
              "description": "Creates a license assignment to user.",
              "operationId": "addUserAssignment",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the license.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/UserAssignmentRequest"
                    }
                  }
                }
              },
              "responses": {
                "201": {
                  "description": "Created: Your request created something new. Usually, this is a call that used the POST method and will allow a GET method to retrieve it later.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CreatedHateoasResponse"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 404,
                          "message": "Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.crud"
                  ]
                }
              ]
            },
            "put": {
              "tags": [
                "Assignments"
              ],
              "summary": "Replace license assignments to users",
              "description": "Replaces the given license’s assignments to users.",
              "operationId": "replaceUserAssignmentCollection",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the license.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/ListOfUserAssignmentRequest"
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/HateoasCollectionOfUserAssignment"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 404,
                          "message": "Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.crud"
                  ]
                }
              ]
            },
            "delete": {
              "tags": [
                "Assignments"
              ],
              "summary": "Delete license assignments to users",
              "description": "Removes the given license’s assignment to users.",
              "operationId": "deleteUserAssignmentCollection",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the license.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                }
              ],
              "responses": {
                "204": {
                  "description": "No Content: Your request succeeded, but the response message was empty."
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 404,
                          "message": "Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.crud"
                  ]
                }
              ]
            }
          },
          "/api/sam/v1/licenses/{id}/assignments/users/{assignmentId}": {
            "get": {
              "tags": [
                "Assignments"
              ],
              "summary": "Get license assignment to user",
              "description": "Returns the details of the given license assignment to user.",
              "operationId": "getUserAssignment",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the license.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                },
                {
                  "name": "assignmentId",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the assignment.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/UserAssignment"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 404,
                          "message": "Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.r"
                  ]
                }
              ]
            },
            "delete": {
              "tags": [
                "Assignments"
              ],
              "summary": "Delete license assignment to user",
              "description": "Removes the given license assignment to user.",
              "operationId": "deleteUserAssignment",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the license.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                },
                {
                  "name": "assignmentId",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the assignment.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                }
              ],
              "responses": {
                "204": {
                  "description": "No Content: Your request succeeded, but the response message was empty."
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 404,
                          "message": "Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.crud"
                  ]
                }
              ]
            }
          }
        },
        "components": {
          "schemas": {
            "Pagination": {
              "type": "object",
              "description": "The pagination details.",
              "additionalProperties": false,
              "required": [
                "page_size",
                "page_number"
              ],
              "properties": {
                "page_size": {
                  "type": "integer",
                  "description": "The page size you requested.",
                  "format": "int32",
                  "example": 25
                },
                "page_number": {
                  "type": "integer",
                  "description": "The page number you requested.",
                  "format": "int32",
                  "example": 1
                },
                "total_pages": {
                  "type": "integer",
                  "description": "The total number of pages.",
                  "format": "int32",
                  "nullable": true,
                  "example": 5
                },
                "total_items": {
                  "type": "integer",
                  "description": "The total number of items.",
                  "format": "int32",
                  "nullable": true,
                  "example": 100
                }
              }
            },
            "Link": {
              "type": "object",
              "description": "Represents a hypermedia link referenced from a IResource, according to HATEOAS.",
              "additionalProperties": false,
              "properties": {
                "href": {
                  "type": "string",
                  "description": "The associated relative URL.",
                  "nullable": true,
                  "example": "/api/custom-fields/v1/custom-fields"
                },
                "rel": {
                  "type": "string",
                  "description": "Specifies the relationship between the current document and the linked document/resource.",
                  "nullable": true,
                  "example": "self"
                },
                "method": {
                  "type": "string",
                  "description": "The method to access related resources.",
                  "nullable": true,
                  "example": "GET"
                }
              }
            },
            "HateoasResource": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "_links"
              ],
              "properties": {
                "_links": {
                  "type": "array",
                  "description": "A collection of links to related resources.",
                  "items": {
                    "$ref": "#/components/schemas/Link"
                  }
                }
              }
            },
            "LicenseUpgrade": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/HateoasResource"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "licenseId": {
                      "type": "string",
                      "description": "The unique ID of the license.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "quantity": {
                      "type": "integer",
                      "description": "The quantity.",
                      "format": "int32",
                      "example": 1
                    },
                    "upgradedLicenseId": {
                      "type": "string",
                      "description": "The unique ID of the upgraded license.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "upgradedQuantity": {
                      "type": "integer",
                      "description": "The upgraded quantity.",
                      "format": "int32",
                      "example": 1
                    }
                  }
                }
              ]
            },
            "FilteredResponseOfLicenseUpgrade": {
              "type": "object",
              "description": "Filtered response.",
              "additionalProperties": false,
              "required": [
                "items",
                "pagination"
              ],
              "properties": {
                "items": {
                  "type": "array",
                  "description": "A collection of items.",
                  "items": {
                    "$ref": "#/components/schemas/LicenseUpgrade"
                  }
                },
                "pagination": {
                  "description": "The pagination details.",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  ]
                }
              }
            },
            "HateoasCollectionOfLicenseUpgrade": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/FilteredResponseOfLicenseUpgrade"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "_links"
                  ],
                  "properties": {
                    "_links": {
                      "type": "array",
                      "description": "A collection of links to related resources.",
                      "items": {
                        "$ref": "#/components/schemas/Link"
                      }
                    }
                  }
                }
              ]
            },
            "ErrorResponse": {
              "type": "object",
              "required": [
                "error"
              ],
              "properties": {
                "error": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "Error": {
              "description": "The error details.",
              "type": "object",
              "required": [
                "code",
                "message"
              ],
              "properties": {
                "code": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The HTTP status code."
                },
                "message": {
                  "type": "string",
                  "description": "The error message."
                }
              }
            },
            "ComputerTransferCollection": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/HateoasResource"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "licenseId": {
                      "type": "string",
                      "description": "The unique ID of the license.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "organizationId": {
                      "type": "string",
                      "description": "The unique ID of the organization.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "computerId": {
                      "type": "string",
                      "description": "The unique ID of the computer.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "fromApplicationId": {
                      "type": "string",
                      "description": "The unique ID of the application.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "toApplicationId": {
                      "type": "string",
                      "description": "The unique ID of the application.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    }
                  }
                }
              ]
            },
            "FilteredResponseOfComputerTransferCollection": {
              "type": "object",
              "description": "Filtered response.",
              "additionalProperties": false,
              "required": [
                "items",
                "pagination"
              ],
              "properties": {
                "items": {
                  "type": "array",
                  "description": "A collection of items.",
                  "items": {
                    "$ref": "#/components/schemas/ComputerTransferCollection"
                  }
                },
                "pagination": {
                  "description": "The pagination details.",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  ]
                }
              }
            },
            "HateoasCollectionOfComputerTransferCollection": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/FilteredResponseOfComputerTransferCollection"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "_links"
                  ],
                  "properties": {
                    "_links": {
                      "type": "array",
                      "description": "A collection of links to related resources.",
                      "items": {
                        "$ref": "#/components/schemas/Link"
                      }
                    }
                  }
                }
              ]
            },
            "ComputerTransferDetailsCollection": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/HateoasResource"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The unique ID of the computer transfer.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "metricId": {
                      "type": "string",
                      "description": "The unique ID of the metric.",
                      "format": "guid",
                      "example": "5891a1d8-7fb0-45bd-b1f6-01c943f9c572"
                    },
                    "fromApplicationId": {
                      "type": "string",
                      "description": "The unique ID of the application.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "toApplicationId": {
                      "type": "string",
                      "description": "The unique ID of the application.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "computerId": {
                      "type": "string",
                      "description": "The unique ID of the computer.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "licenseId": {
                      "type": "string",
                      "description": "The unique ID of the license.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "organizationId": {
                      "type": "string",
                      "description": "The unique ID of the organization.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "isUpgrade": {
                      "type": "boolean",
                      "description": "```true``` if is upgrade; otherwise, ```false```.",
                      "example": true
                    },
                    "isDowngrade": {
                      "type": "boolean",
                      "description": "```true``` if is downgrade; otherwise, ```false```.",
                      "example": true
                    },
                    "isCrossEdition": {
                      "type": "boolean",
                      "description": "```true``` if is cross-edition; otherwise, ```false```.",
                      "example": true
                    },
                    "isCrossPlatform": {
                      "type": "boolean",
                      "description": "```true``` if is cross-platform; otherwise, ```false```.",
                      "example": true
                    },
                    "quantity": {
                      "type": "integer",
                      "description": "The transferred quantity.",
                      "format": "int32",
                      "example": 1
                    }
                  }
                }
              ]
            },
            "FilteredResponseOfComputerTransferDetailsCollection": {
              "type": "object",
              "description": "Filtered response.",
              "additionalProperties": false,
              "required": [
                "items",
                "pagination"
              ],
              "properties": {
                "items": {
                  "type": "array",
                  "description": "A collection of items.",
                  "items": {
                    "$ref": "#/components/schemas/ComputerTransferDetailsCollection"
                  }
                },
                "pagination": {
                  "description": "The pagination details.",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  ]
                }
              }
            },
            "HateoasCollectionOfComputerTransferDetailsCollection": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/FilteredResponseOfComputerTransferDetailsCollection"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "_links"
                  ],
                  "properties": {
                    "_links": {
                      "type": "array",
                      "description": "A collection of links to related resources.",
                      "items": {
                        "$ref": "#/components/schemas/Link"
                      }
                    }
                  }
                }
              ]
            },
            "CustomValueTransferCollection": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/HateoasResource"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "customCompareValueId": {
                      "type": "string",
                      "description": "The unique ID of the custom compare value.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "licenseId": {
                      "type": "string",
                      "description": "The unique ID of the license.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "organizationId": {
                      "type": "string",
                      "description": "The unique ID of the organization.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "fromApplicationId": {
                      "type": "string",
                      "description": "The unique ID of the application.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "toApplicationId": {
                      "type": "string",
                      "description": "The unique ID of the application.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    }
                  }
                }
              ]
            },
            "FilteredResponseOfCustomValueTransferCollection": {
              "type": "object",
              "description": "Filtered response.",
              "additionalProperties": false,
              "required": [
                "items",
                "pagination"
              ],
              "properties": {
                "items": {
                  "type": "array",
                  "description": "A collection of items.",
                  "items": {
                    "$ref": "#/components/schemas/CustomValueTransferCollection"
                  }
                },
                "pagination": {
                  "description": "The pagination details.",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  ]
                }
              }
            },
            "HateoasCollectionOfCustomValueTransferCollection": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/FilteredResponseOfCustomValueTransferCollection"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "_links"
                  ],
                  "properties": {
                    "_links": {
                      "type": "array",
                      "description": "A collection of links to related resources.",
                      "items": {
                        "$ref": "#/components/schemas/Link"
                      }
                    }
                  }
                }
              ]
            },
            "UseRightType": {
              "type": "integer",
              "description": "The use rights type.",
              "x-enumFlags": true,
              "x-enumNames": [
                "None",
                "Standard",
                "UpgradeRights",
                "DowngradeRights",
                "CrossEdition",
                "VirtualDesktopAccess",
                "VmSupport",
                "NinetyDayRule",
                "ProcessorLimitations",
                "ProcessorCoreLimitations",
                "NamedComputer",
                "NamedDatacenter",
                "NamedApplicationCluster",
                "NamedUser",
                "Site",
                "CrossPlatform"
              ],
              "enum": [
                0,
                1,
                2,
                4,
                8,
                16,
                32,
                256,
                512,
                1024,
                8192,
                16384,
                32768,
                65536,
                131072,
                262144
              ]
            },
            "CustomValueTransferDetailsCollection": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/HateoasResource"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The unique ID of the custom compare value transfer.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "metricId": {
                      "type": "string",
                      "description": "The unique ID of the metric.",
                      "format": "guid",
                      "example": "5891a1d8-7fb0-45bd-b1f6-01c943f9c572"
                    },
                    "licenseId": {
                      "type": "string",
                      "description": "The unique ID of the license.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "organizationId": {
                      "type": "string",
                      "description": "The unique ID of the organization.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "customCompareValueId": {
                      "type": "string",
                      "description": "The unique ID of the custom compare value.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "fromApplicationId": {
                      "type": "string",
                      "description": "The unique ID of the application.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "toApplicationId": {
                      "type": "string",
                      "description": "The unique ID of the application.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "isUpgrade": {
                      "type": "boolean",
                      "description": "```true``` if is upgrade; otherwise, ```false```.",
                      "example": true
                    },
                    "isDowngrade": {
                      "type": "boolean",
                      "description": "```true``` if is downgrade; otherwise, ```false```.",
                      "example": true
                    },
                    "isCrossEdition": {
                      "type": "boolean",
                      "description": "```true``` if is cross-edition; otherwise, ```false```.",
                      "example": true
                    },
                    "isCrossPlatform": {
                      "type": "boolean",
                      "description": "```true``` if is cross-platform; otherwise, ```false```.",
                      "example": true
                    },
                    "quantity": {
                      "type": "integer",
                      "description": "The transferred quantity.",
                      "format": "int32",
                      "example": 1
                    },
                    "useRights": {
                      "description": "The use right type.",
                      "example": [
                        "Standard"
                      ],
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/UseRightType"
                        }
                      ]
                    }
                  }
                }
              ]
            },
            "FilteredResponseOfCustomValueTransferDetailsCollection": {
              "type": "object",
              "description": "Filtered response.",
              "additionalProperties": false,
              "required": [
                "items",
                "pagination"
              ],
              "properties": {
                "items": {
                  "type": "array",
                  "description": "A collection of items.",
                  "items": {
                    "$ref": "#/components/schemas/CustomValueTransferDetailsCollection"
                  }
                },
                "pagination": {
                  "description": "The pagination details.",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  ]
                }
              }
            },
            "HateoasCollectionOfCustomValueTransferDetailsCollection": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/FilteredResponseOfCustomValueTransferDetailsCollection"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "_links"
                  ],
                  "properties": {
                    "_links": {
                      "type": "array",
                      "description": "A collection of links to related resources.",
                      "items": {
                        "$ref": "#/components/schemas/Link"
                      }
                    }
                  }
                }
              ]
            },
            "LicenseTransferCollection": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/HateoasResource"
                },
                {
                  "type": "object",
                  "description": "A collection of license transfers.",
                  "additionalProperties": false,
                  "properties": {
                    "licenseId": {
                      "type": "string",
                      "description": "The unique ID of the license.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "hasComputerTransfer": {
                      "type": "boolean",
                      "description": "```true``` if has computer transfer; otherwise, ```false```.",
                      "example": true
                    },
                    "hasUserTransfer": {
                      "type": "boolean",
                      "description": "```true``` if has user transfer; otherwise, ```false```.",
                      "example": true
                    },
                    "hasCustomCompareValueTransfer": {
                      "type": "boolean",
                      "description": "```true``` if has custom compare value transfer; otherwise, ```false```.",
                      "example": true
                    }
                  }
                }
              ]
            },
            "FilteredResponseOfLicenseTransferCollection": {
              "type": "object",
              "description": "Filtered response.",
              "additionalProperties": false,
              "required": [
                "items",
                "pagination"
              ],
              "properties": {
                "items": {
                  "type": "array",
                  "description": "A collection of items.",
                  "items": {
                    "$ref": "#/components/schemas/LicenseTransferCollection"
                  }
                },
                "pagination": {
                  "description": "The pagination details.",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  ]
                }
              }
            },
            "HateoasCollectionOfLicenseTransferCollection": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/FilteredResponseOfLicenseTransferCollection"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "_links"
                  ],
                  "properties": {
                    "_links": {
                      "type": "array",
                      "description": "A collection of links to related resources.",
                      "items": {
                        "$ref": "#/components/schemas/Link"
                      }
                    }
                  }
                }
              ]
            },
            "UserTransferCollection": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/HateoasResource"
                },
                {
                  "type": "object",
                  "description": "A collection of application license transfers for user.",
                  "additionalProperties": false,
                  "properties": {
                    "licenseId": {
                      "type": "string",
                      "description": "The unique ID of the license.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "organizationId": {
                      "type": "string",
                      "description": "The unique ID of the organization.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "userId": {
                      "type": "string",
                      "description": "The unique ID of the user.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "fromApplicationId": {
                      "type": "string",
                      "description": "The unique ID of the application.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "toApplicationId": {
                      "type": "string",
                      "description": "The unique ID of the application.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    }
                  }
                }
              ]
            },
            "FilteredResponseOfUserTransferCollection": {
              "type": "object",
              "description": "Filtered response.",
              "additionalProperties": false,
              "required": [
                "items",
                "pagination"
              ],
              "properties": {
                "items": {
                  "type": "array",
                  "description": "A collection of items.",
                  "items": {
                    "$ref": "#/components/schemas/UserTransferCollection"
                  }
                },
                "pagination": {
                  "description": "The pagination details.",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  ]
                }
              }
            },
            "HateoasCollectionOfUserTransferCollection": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/FilteredResponseOfUserTransferCollection"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "_links"
                  ],
                  "properties": {
                    "_links": {
                      "type": "array",
                      "description": "A collection of links to related resources.",
                      "items": {
                        "$ref": "#/components/schemas/Link"
                      }
                    }
                  }
                }
              ]
            },
            "UserTransferDetailsCollection": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/HateoasResource"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The unique ID of the user transfer.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "metricId": {
                      "type": "string",
                      "description": "The unique ID of the metric.",
                      "format": "guid",
                      "example": "5891a1d8-7fb0-45bd-b1f6-01c943f9c572"
                    },
                    "licenseId": {
                      "type": "string",
                      "description": "The unique ID of the license.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "organizationId": {
                      "type": "string",
                      "description": "The unique ID of the organization.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "userId": {
                      "type": "string",
                      "description": "The unique ID of the user.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "fromApplicationId": {
                      "type": "string",
                      "description": "The unique ID of the application.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "toApplicationId": {
                      "type": "string",
                      "description": "The unique ID of the application.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "isUpgrade": {
                      "type": "boolean",
                      "description": "```true``` if is upgrade; otherwise, ```false```.",
                      "example": true
                    },
                    "isDowngrade": {
                      "type": "boolean",
                      "description": "```true``` if is downgrade; otherwise, ```false```.",
                      "example": true
                    },
                    "isCrossPlatform": {
                      "type": "boolean",
                      "description": "```true``` if is cross-platform; otherwise, ```false```.",
                      "example": true
                    },
                    "isCrossEdition": {
                      "type": "boolean",
                      "description": "```true``` if is cross-edition; otherwise, ```false```.",
                      "example": true
                    },
                    "quantity": {
                      "type": "integer",
                      "description": "The transferred quantity.",
                      "format": "int32",
                      "example": 1
                    }
                  }
                }
              ]
            },
            "FilteredResponseOfUserTransferDetailsCollection": {
              "type": "object",
              "description": "Filtered response.",
              "additionalProperties": false,
              "required": [
                "items",
                "pagination"
              ],
              "properties": {
                "items": {
                  "type": "array",
                  "description": "A collection of items.",
                  "items": {
                    "$ref": "#/components/schemas/UserTransferDetailsCollection"
                  }
                },
                "pagination": {
                  "description": "The pagination details.",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  ]
                }
              }
            },
            "HateoasCollectionOfUserTransferDetailsCollection": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/FilteredResponseOfUserTransferDetailsCollection"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "_links"
                  ],
                  "properties": {
                    "_links": {
                      "type": "array",
                      "description": "A collection of links to related resources.",
                      "items": {
                        "$ref": "#/components/schemas/Link"
                      }
                    }
                  }
                }
              ]
            },
            "ApplicationComputerTrackingCollection": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/HateoasResource"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The unique ID of the computer application tracking.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "metricId": {
                      "type": "string",
                      "description": "The unique ID of the metric.",
                      "format": "guid",
                      "example": "5891a1d8-7fb0-45bd-b1f6-01c943f9c572"
                    },
                    "applicationId": {
                      "type": "string",
                      "description": "The unique ID of the application.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "computerId": {
                      "type": "string",
                      "description": "The unique ID of the computer.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "primaryUseRights": {
                      "description": "The primary user rights.",
                      "example": [
                        "NamedComputer"
                      ],
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/UseRightType"
                        }
                      ]
                    }
                  }
                }
              ]
            },
            "FilteredResponseOfApplicationComputerTrackingCollection": {
              "type": "object",
              "description": "Filtered response.",
              "additionalProperties": false,
              "required": [
                "items",
                "pagination"
              ],
              "properties": {
                "items": {
                  "type": "array",
                  "description": "A collection of items.",
                  "items": {
                    "$ref": "#/components/schemas/ApplicationComputerTrackingCollection"
                  }
                },
                "pagination": {
                  "description": "The pagination details.",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  ]
                }
              }
            },
            "HateoasCollectionOfApplicationComputerTrackingCollection": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/FilteredResponseOfApplicationComputerTrackingCollection"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "_links"
                  ],
                  "properties": {
                    "_links": {
                      "type": "array",
                      "description": "A collection of links to related resources.",
                      "items": {
                        "$ref": "#/components/schemas/Link"
                      }
                    }
                  }
                }
              ]
            },
            "ComputerTrackingDetailsCollection": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/HateoasResource"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The unique ID of the computer application tracking.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "metricId": {
                      "type": "string",
                      "description": "The unique ID of the metric.",
                      "format": "guid",
                      "example": "5891a1d8-7fb0-45bd-b1f6-01c943f9c572"
                    },
                    "applicationId": {
                      "type": "string",
                      "description": "The unique ID of the application.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "computerId": {
                      "type": "string",
                      "description": "The unique ID of the computer.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "licenseId": {
                      "type": "string",
                      "description": "The unique ID of the license.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "organizationId": {
                      "type": "string",
                      "description": "The unique ID of the organization.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "coverageTrait": {
                      "type": "integer",
                      "description": "The coverage tait.",
                      "format": "int32",
                      "example": 1
                    },
                    "initialRequirement": {
                      "type": "integer",
                      "description": "The initial requirement.",
                      "format": "int32",
                      "example": 1
                    },
                    "requirement": {
                      "type": "integer",
                      "description": "The requirement.",
                      "format": "int32",
                      "example": 1
                    },
                    "receivedCoverage": {
                      "type": "integer",
                      "description": "The received coverage.",
                      "format": "int32",
                      "example": 1
                    },
                    "primaryUseRights": {
                      "description": "The primary user rights.",
                      "example": [
                        "NamedComputer"
                      ],
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/UseRightType"
                        }
                      ]
                    },
                    "fullUseRights": {
                      "description": "The full use rights.",
                      "example": [
                        "NamedComputer",
                        "UpgradeRights"
                      ],
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/UseRightType"
                        }
                      ]
                    }
                  }
                }
              ]
            },
            "ComputerTrackingCollection": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ComputerTrackingDetailsCollection"
                },
                {
                  "type": "object",
                  "additionalProperties": false
                }
              ]
            },
            "FilteredResponseOfComputerTrackingCollection": {
              "type": "object",
              "description": "Filtered response.",
              "additionalProperties": false,
              "required": [
                "items",
                "pagination"
              ],
              "properties": {
                "items": {
                  "type": "array",
                  "description": "A collection of items.",
                  "items": {
                    "$ref": "#/components/schemas/ComputerTrackingCollection"
                  }
                },
                "pagination": {
                  "description": "The pagination details.",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  ]
                }
              }
            },
            "HateoasCollectionOfComputerTrackingCollection": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/FilteredResponseOfComputerTrackingCollection"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "_links"
                  ],
                  "properties": {
                    "_links": {
                      "type": "array",
                      "description": "A collection of links to related resources.",
                      "items": {
                        "$ref": "#/components/schemas/Link"
                      }
                    }
                  }
                }
              ]
            },
            "FilteredResponseOfComputerTrackingDetailsCollection": {
              "type": "object",
              "description": "Filtered response.",
              "additionalProperties": false,
              "required": [
                "items",
                "pagination"
              ],
              "properties": {
                "items": {
                  "type": "array",
                  "description": "A collection of items.",
                  "items": {
                    "$ref": "#/components/schemas/ComputerTrackingDetailsCollection"
                  }
                },
                "pagination": {
                  "description": "The pagination details.",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  ]
                }
              }
            },
            "HateoasCollectionOfComputerTrackingDetailsCollection": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/FilteredResponseOfComputerTrackingDetailsCollection"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "_links"
                  ],
                  "properties": {
                    "_links": {
                      "type": "array",
                      "description": "A collection of links to related resources.",
                      "items": {
                        "$ref": "#/components/schemas/Link"
                      }
                    }
                  }
                }
              ]
            },
            "LicenseTracking": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/HateoasResource"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "licenseId": {
                      "type": "string",
                      "description": "The unique ID of the license.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "hasComputerTracking": {
                      "type": "boolean",
                      "description": "```true``` if has computer tracking; otherwise, ```false```.",
                      "example": true
                    },
                    "hasUserTracking": {
                      "type": "boolean",
                      "description": "```true``` if has user tracking; otherwise, ```false```.",
                      "example": true
                    }
                  }
                }
              ]
            },
            "FilteredResponseOfLicenseTracking": {
              "type": "object",
              "description": "Filtered response.",
              "additionalProperties": false,
              "required": [
                "items",
                "pagination"
              ],
              "properties": {
                "items": {
                  "type": "array",
                  "description": "A collection of items.",
                  "items": {
                    "$ref": "#/components/schemas/LicenseTracking"
                  }
                },
                "pagination": {
                  "description": "The pagination details.",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  ]
                }
              }
            },
            "HateoasCollectionOfLicenseTracking": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/FilteredResponseOfLicenseTracking"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "_links"
                  ],
                  "properties": {
                    "_links": {
                      "type": "array",
                      "description": "A collection of links to related resources.",
                      "items": {
                        "$ref": "#/components/schemas/Link"
                      }
                    }
                  }
                }
              ]
            },
            "UserTrackingDetailsCollection": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/HateoasResource"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The unique ID of the user application tracking.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "metricId": {
                      "type": "string",
                      "description": "The unique ID of the metric.",
                      "format": "guid",
                      "example": "5891a1d8-7fb0-45bd-b1f6-01c943f9c572"
                    },
                    "applicationId": {
                      "type": "string",
                      "description": "The unique ID of the application.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "userId": {
                      "type": "string",
                      "description": "The unique ID of the user.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "licenseId": {
                      "type": "string",
                      "description": "The unique ID of the license.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "organizationId": {
                      "type": "string",
                      "description": "The unique ID of the organization.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "coverageTrait": {
                      "type": "integer",
                      "description": "The coverage tait.",
                      "format": "int32",
                      "example": 1
                    },
                    "initialRequirement": {
                      "type": "integer",
                      "description": "The initial requirement.",
                      "format": "int32",
                      "example": 1
                    },
                    "receivedCoverage": {
                      "type": "integer",
                      "description": "The received coverage.",
                      "format": "int32",
                      "example": 1
                    },
                    "primaryUseRights": {
                      "description": "The primary user rights.",
                      "example": [
                        "NamedComputer"
                      ],
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/UseRightType"
                        }
                      ]
                    },
                    "fullUseRights": {
                      "description": "The full use rights.",
                      "example": [
                        "NamedComputer",
                        "UpgradeRights"
                      ],
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/UseRightType"
                        }
                      ]
                    }
                  }
                }
              ]
            },
            "UserTrackingCollection": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/UserTrackingDetailsCollection"
                },
                {
                  "type": "object",
                  "additionalProperties": false
                }
              ]
            },
            "FilteredResponseOfUserTrackingCollection": {
              "type": "object",
              "description": "Filtered response.",
              "additionalProperties": false,
              "required": [
                "items",
                "pagination"
              ],
              "properties": {
                "items": {
                  "type": "array",
                  "description": "A collection of items.",
                  "items": {
                    "$ref": "#/components/schemas/UserTrackingCollection"
                  }
                },
                "pagination": {
                  "description": "The pagination details.",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  ]
                }
              }
            },
            "HateoasCollectionOfUserTrackingCollection": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/FilteredResponseOfUserTrackingCollection"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "_links"
                  ],
                  "properties": {
                    "_links": {
                      "type": "array",
                      "description": "A collection of links to related resources.",
                      "items": {
                        "$ref": "#/components/schemas/Link"
                      }
                    }
                  }
                }
              ]
            },
            "FilteredResponseOfUserTrackingDetailsCollection": {
              "type": "object",
              "description": "Filtered response.",
              "additionalProperties": false,
              "required": [
                "items",
                "pagination"
              ],
              "properties": {
                "items": {
                  "type": "array",
                  "description": "A collection of items.",
                  "items": {
                    "$ref": "#/components/schemas/UserTrackingDetailsCollection"
                  }
                },
                "pagination": {
                  "description": "The pagination details.",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  ]
                }
              }
            },
            "HateoasCollectionOfUserTrackingDetailsCollection": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/FilteredResponseOfUserTrackingDetailsCollection"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "_links"
                  ],
                  "properties": {
                    "_links": {
                      "type": "array",
                      "description": "A collection of links to related resources.",
                      "items": {
                        "$ref": "#/components/schemas/Link"
                      }
                    }
                  }
                }
              ]
            },
            "LicensePolicyFieldCollection": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/HateoasResource"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The unique ID of the policy field.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "name": {
                      "type": "string",
                      "description": "The policy field name.",
                      "nullable": true,
                      "example": "InvoiceReference"
                    },
                    "description": {
                      "type": "string",
                      "description": "The policy field description.",
                      "nullable": true,
                      "example": "InvoiceReference"
                    },
                    "isRequired": {
                      "type": "boolean",
                      "description": "```true``` if is required; otherwise, ```false```.",
                      "example": true
                    },
                    "isComboBox": {
                      "type": "boolean",
                      "description": "```true``` if is combo box; otherwise, ```false```.",
                      "example": true
                    },
                    "isEditingAllowed": {
                      "type": "boolean",
                      "description": "```true``` if is editing allowed; otherwise, ```false```.",
                      "example": true
                    },
                    "listItems": {
                      "type": "array",
                      "description": "The list of item values.",
                      "nullable": true,
                      "example": [
                        "Item"
                      ],
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            },
            "FilteredResponseOfLicensePolicyFieldCollection": {
              "type": "object",
              "description": "Filtered response.",
              "additionalProperties": false,
              "required": [
                "items",
                "pagination"
              ],
              "properties": {
                "items": {
                  "type": "array",
                  "description": "A collection of items.",
                  "items": {
                    "$ref": "#/components/schemas/LicensePolicyFieldCollection"
                  }
                },
                "pagination": {
                  "description": "The pagination details.",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  ]
                }
              }
            },
            "HateoasCollectionOfLicensePolicyFieldCollection": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/FilteredResponseOfLicensePolicyFieldCollection"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "_links"
                  ],
                  "properties": {
                    "_links": {
                      "type": "array",
                      "description": "A collection of links to related resources.",
                      "items": {
                        "$ref": "#/components/schemas/Link"
                      }
                    }
                  }
                }
              ]
            },
            "LicensePolicyField": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/HateoasResource"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The unique ID of the policy field.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "name": {
                      "type": "string",
                      "description": "The policy field name.",
                      "nullable": true,
                      "example": "InvoiceReference"
                    },
                    "description": {
                      "type": "string",
                      "description": "The policy field description.",
                      "nullable": true,
                      "example": "InvoiceReference"
                    },
                    "isRequired": {
                      "type": "boolean",
                      "description": "```true``` if is required; otherwise, ```false```.",
                      "nullable": true,
                      "example": true
                    },
                    "isComboBox": {
                      "type": "boolean",
                      "description": "```true``` if is combo box; otherwise, ```false```.",
                      "nullable": true,
                      "example": true
                    },
                    "isEditingAllowed": {
                      "type": "boolean",
                      "description": "```true``` if editing is allowed; otherwise, ```false```.",
                      "nullable": true,
                      "example": true
                    },
                    "listItems": {
                      "type": "array",
                      "description": "The list of item values.",
                      "nullable": true,
                      "example": [
                        "Item"
                      ],
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            },
            "Policy": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/HateoasResource"
                },
                {
                  "type": "object",
                  "description": "The license policy.",
                  "additionalProperties": false,
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The unique ID of the license policy.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    }
                  }
                }
              ]
            },
            "FilteredResponseOfPolicy": {
              "type": "object",
              "description": "Filtered response.",
              "additionalProperties": false,
              "required": [
                "items",
                "pagination"
              ],
              "properties": {
                "items": {
                  "type": "array",
                  "description": "A collection of items.",
                  "items": {
                    "$ref": "#/components/schemas/Policy"
                  }
                },
                "pagination": {
                  "description": "The pagination details.",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  ]
                }
              }
            },
            "HateoasCollectionOfPolicy": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/FilteredResponseOfPolicy"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "_links"
                  ],
                  "properties": {
                    "_links": {
                      "type": "array",
                      "description": "A collection of links to related resources.",
                      "items": {
                        "$ref": "#/components/schemas/Link"
                      }
                    }
                  }
                }
              ]
            },
            "MaintenancePeriodCollection": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/HateoasResource"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The unique ID of the maintenance period.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "agreementPeriodId": {
                      "type": "string",
                      "description": "The unique ID of the agreement period.",
                      "format": "guid",
                      "nullable": true,
                      "example": "17597d2f-ae4b-4505-a85d-52a78421873c"
                    },
                    "licenseId": {
                      "type": "string",
                      "description": "The unique ID of the license.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "validFrom": {
                      "type": "string",
                      "description": "The valid form date.",
                      "format": "date-time",
                      "nullable": true,
                      "example": "2024-01-01T00:00:00Z"
                    },
                    "validTo": {
                      "type": "string",
                      "description": "The valid to date.",
                      "format": "date-time",
                      "nullable": true,
                      "example": "2025-01-01T00:00:00Z"
                    },
                    "hasUpgradeRights": {
                      "type": "boolean",
                      "description": "```true``` if has upgrade rights; otherwise, ```false```.",
                      "nullable": true,
                      "example": true
                    },
                    "invoiceReference": {
                      "type": "string",
                      "description": "The invoice reference.",
                      "nullable": true,
                      "example": "INV12345"
                    },
                    "notes": {
                      "type": "string",
                      "description": "The notes.",
                      "nullable": true,
                      "example": "Notes"
                    },
                    "maintenanceCost": {
                      "type": "number",
                      "description": "The maintenance cost.",
                      "format": "decimal",
                      "nullable": true,
                      "example": 1000
                    },
                    "supportCost": {
                      "type": "number",
                      "description": "The support cost.",
                      "format": "decimal",
                      "nullable": true,
                      "example": 1000
                    },
                    "purchaseCurrency": {
                      "type": "string",
                      "description": "The purchase currency.",
                      "nullable": true,
                      "example": "USD"
                    }
                  }
                }
              ]
            },
            "FilteredResponseOfMaintenancePeriodCollection": {
              "type": "object",
              "description": "Filtered response.",
              "additionalProperties": false,
              "required": [
                "items",
                "pagination"
              ],
              "properties": {
                "items": {
                  "type": "array",
                  "description": "A collection of items.",
                  "items": {
                    "$ref": "#/components/schemas/MaintenancePeriodCollection"
                  }
                },
                "pagination": {
                  "description": "The pagination details.",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  ]
                }
              }
            },
            "HateoasCollectionOfMaintenancePeriodCollection": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/FilteredResponseOfMaintenancePeriodCollection"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "_links"
                  ],
                  "properties": {
                    "_links": {
                      "type": "array",
                      "description": "A collection of links to related resources.",
                      "items": {
                        "$ref": "#/components/schemas/Link"
                      }
                    }
                  }
                }
              ]
            },
            "MaintenancePeriodRequest": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "agreementPeriodId": {
                  "type": "string",
                  "description": "The unique ID of the agreement period.",
                  "format": "guid",
                  "nullable": true,
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                },
                "validFrom": {
                  "type": "string",
                  "description": "The valid form date.",
                  "format": "date-time",
                  "nullable": true,
                  "example": "2024-01-01T00:00:00Z"
                },
                "validTo": {
                  "type": "string",
                  "description": "The valid to date.",
                  "format": "date-time",
                  "nullable": true,
                  "example": "2025-01-01T00:00:00Z"
                },
                "hasUpgradeRights": {
                  "type": "boolean",
                  "description": "```true``` if has upgrade rights; otherwise, ```false```.",
                  "example": true
                },
                "invoiceReference": {
                  "type": "string",
                  "description": "The invoice reference.",
                  "nullable": true,
                  "example": "INV12345"
                },
                "notes": {
                  "type": "string",
                  "description": "The notes.",
                  "nullable": true,
                  "example": "Notes"
                },
                "maintenanceCost": {
                  "type": "number",
                  "description": "The maintenance cost.",
                  "format": "decimal",
                  "nullable": true,
                  "example": 1000
                },
                "supportCost": {
                  "type": "number",
                  "description": "The support cost.",
                  "format": "decimal",
                  "nullable": true,
                  "example": 1000
                }
              }
            },
            "ListOfMaintenancePeriodRequest": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/MaintenancePeriodRequest"
              }
            },
            "HateoasResponse": {
              "type": "object",
              "description": "Abstract class for IResource.",
              "x-abstract": true,
              "additionalProperties": false,
              "properties": {
                "_links": {
                  "type": "array",
                  "description": "A collection of links to related resources.",
                  "items": {
                    "$ref": "#/components/schemas/Link"
                  }
                }
              }
            },
            "CreatedHateoasResponse": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/HateoasResponse"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The unique ID of the resource.",
                      "format": "guid"
                    }
                  }
                }
              ]
            },
            "MaintenancePeriod": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/CreatedHateoasResponse"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "validFrom": {
                      "type": "string",
                      "description": "The valid form date.",
                      "format": "date-time",
                      "nullable": true,
                      "example": "2024-01-01T00:00:00Z"
                    },
                    "validTo": {
                      "type": "string",
                      "description": "The valid to date.",
                      "format": "date-time",
                      "nullable": true,
                      "example": "2025-01-01T00:00:00Z"
                    },
                    "hasUpgradeRights": {
                      "type": "boolean",
                      "description": "```true``` if has upgrade rights; otherwise, ```false```.",
                      "example": true
                    },
                    "maintenanceCost": {
                      "type": "number",
                      "description": "The maintenance cost.",
                      "format": "decimal",
                      "nullable": true,
                      "example": 1000
                    },
                    "supportCost": {
                      "type": "number",
                      "description": "The support cost.",
                      "format": "decimal",
                      "nullable": true,
                      "example": 1000
                    },
                    "purchaseCurrency": {
                      "type": "string",
                      "description": "The purchase currency.",
                      "nullable": true,
                      "example": "USD"
                    },
                    "invoiceReference": {
                      "type": "string",
                      "description": "The invoice reference.",
                      "nullable": true,
                      "example": "INV12345"
                    },
                    "notes": {
                      "type": "string",
                      "description": "The notes.",
                      "nullable": true,
                      "example": "Notes"
                    }
                  }
                }
              ]
            },
            "IncompleteLicenseReason": {
              "type": "integer",
              "description": "The incomplete reason.",
              "x-enumFlags": true,
              "x-enumNames": [
                "None",
                "MissingApplication",
                "MissingLicenseCount",
                "MissingMetric",
                "MissingBaseLicenses",
                "InvalidSubscriptionPeriod",
                "MissingValidFromToDate",
                "MissingAgreementNumber",
                "MissingAssignmentType",
                "All"
              ],
              "enum": [
                0,
                1,
                2,
                4,
                8,
                16,
                32,
                64,
                128,
                255
              ]
            },
            "LicenseCollectionUpgrade": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "licenseId": {
                  "type": "string",
                  "description": "The unique ID of the license.",
                  "format": "guid",
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                },
                "quantity": {
                  "type": "integer",
                  "description": "The quantity.",
                  "format": "int32",
                  "example": 1
                },
                "upgradedLicenseId": {
                  "type": "string",
                  "description": "The unique ID of the upgraded license.",
                  "format": "guid",
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                },
                "upgradedQuantity": {
                  "type": "integer",
                  "description": "The upgraded quantity.",
                  "format": "int32",
                  "example": 1
                }
              }
            },
            "LicenseCollection": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/HateoasResource"
                },
                {
                  "type": "object",
                  "description": "The collection of licenses.",
                  "additionalProperties": false,
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The unique ID of the license.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "organizationId": {
                      "type": "string",
                      "description": "The unique ID of the organization.",
                      "format": "guid",
                      "nullable": true,
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "applicationId": {
                      "type": "string",
                      "description": "The unique ID of the application.",
                      "format": "guid",
                      "nullable": true,
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "contractId": {
                      "type": "string",
                      "description": "The unique ID of the agreement.",
                      "format": "guid",
                      "nullable": true,
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "agreementId": {
                      "type": "string",
                      "description": "The unique ID of the agreement.",
                      "format": "guid",
                      "nullable": true,
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "metricId": {
                      "type": "string",
                      "description": "The unique ID of the metric.",
                      "format": "guid",
                      "nullable": true,
                      "example": "5891a1d8-7fb0-45bd-b1f6-01c943f9c572"
                    },
                    "assignmentTypeId": {
                      "type": "string",
                      "description": "The unique ID of the assignment type.",
                      "format": "guid",
                      "nullable": true,
                      "example": "8e5d8f69-c818-4575-9a91-aebae9a9eacc"
                    },
                    "purchaseDate": {
                      "type": "string",
                      "description": "The purchase date.",
                      "format": "date-time",
                      "example": "2024-01-01T00:00:00Z"
                    },
                    "purchaseValue": {
                      "type": "number",
                      "description": "The purchase value.",
                      "format": "decimal",
                      "nullable": true,
                      "example": 1000
                    },
                    "purchaseCurrency": {
                      "type": "string",
                      "description": "The purchase currency.",
                      "nullable": true,
                      "example": "USD"
                    },
                    "quantity": {
                      "type": "integer",
                      "description": "The quantity.",
                      "format": "int32",
                      "nullable": true,
                      "example": 1
                    },
                    "initialQuantity": {
                      "type": "integer",
                      "description": "The initial quantity.",
                      "format": "int32",
                      "nullable": true,
                      "example": 1
                    },
                    "mediaStorage": {
                      "type": "string",
                      "description": "The media storage.",
                      "nullable": true,
                      "example": "path/to/file"
                    },
                    "licenseProofLocation": {
                      "type": "string",
                      "description": "The license proof location.",
                      "nullable": true,
                      "example": "path/to/licenseproof"
                    },
                    "invoiceReference": {
                      "type": "string",
                      "description": "The invoice reference.",
                      "nullable": true,
                      "example": "INV12345"
                    },
                    "vendor": {
                      "type": "string",
                      "description": "The vendor.",
                      "nullable": true,
                      "example": "Microsoft"
                    },
                    "externalId": {
                      "type": "string",
                      "description": "The external ID.",
                      "nullable": true,
                      "example": "EXT12345"
                    },
                    "productDescription": {
                      "type": "string",
                      "description": "The product description.",
                      "nullable": true,
                      "example": "MSDN"
                    },
                    "isSubscription": {
                      "type": "boolean",
                      "description": "```true``` if is subscription; otherwise, ```false```.",
                      "example": true
                    },
                    "isCrossEdition": {
                      "type": "boolean",
                      "description": "```true``` if is cross-edition; otherwise, ```false```.",
                      "example": true
                    },
                    "isCrossPlatform": {
                      "type": "boolean",
                      "description": "```true``` if is cross-platform; otherwise, ```false```.",
                      "example": true
                    },
                    "isUpgrade": {
                      "type": "boolean",
                      "description": "```true``` if is upgrade; otherwise, ```false```.",
                      "example": true
                    },
                    "isDowngrade": {
                      "type": "boolean",
                      "description": "```true``` if is downgrade; otherwise, ```false```.",
                      "example": true
                    },
                    "isIncomplete": {
                      "type": "boolean",
                      "description": "```true``` if is incomplete; otherwise, ```false```.",
                      "example": true
                    },
                    "incompleteReasons": {
                      "description": "The incomplete license reasons.",
                      "example": [
                        "MissingApplication"
                      ],
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/IncompleteLicenseReason"
                        }
                      ]
                    },
                    "updatedDate": {
                      "type": "string",
                      "description": "The updated date.",
                      "format": "date-time",
                      "example": "2024-01-01T00:00:00Z"
                    },
                    "createdDate": {
                      "type": "string",
                      "description": "The created date.",
                      "format": "date-time",
                      "example": "2024-01-01T00:00:00Z"
                    },
                    "subscriptionValidFrom": {
                      "type": "string",
                      "description": "The subscription valid from date.",
                      "format": "date-time",
                      "nullable": true,
                      "example": "2024-01-01T00:00:00Z"
                    },
                    "subscriptionValidTo": {
                      "type": "string",
                      "description": "The subscription valid to date.",
                      "format": "date-time",
                      "nullable": true,
                      "example": "2025-01-01T00:00:00Z"
                    },
                    "activeMaintenanceCost": {
                      "type": "number",
                      "description": "The active maintenance cost.",
                      "format": "decimal",
                      "example": 1000
                    },
                    "totalMaintenanceCost": {
                      "type": "number",
                      "description": "The total maintenance cost.",
                      "format": "decimal",
                      "example": 1000
                    },
                    "activeSupportCost": {
                      "type": "number",
                      "description": "The active support cost.",
                      "format": "decimal",
                      "example": 1000
                    },
                    "totalSupportCost": {
                      "type": "number",
                      "description": "The total support cost.",
                      "format": "decimal",
                      "example": 1000
                    },
                    "totalLicenseCost": {
                      "type": "number",
                      "description": "The total license cost.",
                      "format": "decimal",
                      "example": 1000
                    },
                    "upgradedLicenseCount": {
                      "type": "integer",
                      "description": "The upgraded license count.",
                      "format": "int32",
                      "nullable": true,
                      "example": 1000
                    },
                    "autoAllocateOnce": {
                      "type": "boolean",
                      "description": "```true``` if has auto allocate once selected; otherwise, ```false```.",
                      "nullable": true,
                      "example": true
                    },
                    "isAutoAllocated": {
                      "type": "boolean",
                      "description": "```true``` if has auto allocate selected; otherwise, ```false```.",
                      "nullable": true,
                      "example": true
                    },
                    "maintenanceAccordingToAgreement": {
                      "type": "boolean",
                      "description": "```true``` if is maintenance periods are based on the agreement; otherwise, ```false```..",
                      "example": true
                    },
                    "skuId": {
                      "type": "string",
                      "description": "The unique ID of the sku.",
                      "format": "guid",
                      "nullable": true,
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "upgrades": {
                      "type": "array",
                      "description": "The collection of license upgrades.",
                      "nullable": true,
                      "items": {
                        "$ref": "#/components/schemas/LicenseCollectionUpgrade"
                      }
                    },
                    "status": {
                      "type": "string",
                      "description": "The status of the license.",
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/Status"
                        }
                      ],
                      "example": "Active"
                    },
                    "archivedDate": {
                      "type": "string",
                      "description": "The archived date.",
                      "format": "date-time",
                      "nullable": true,
                      "example": "2024-01-01T00:00:00Z"
                    }
                  }
                }
              ]
            },
            "FilteredResponseOfLicenseCollection": {
              "type": "object",
              "description": "Filtered response.",
              "additionalProperties": false,
              "required": [
                "items",
                "pagination"
              ],
              "properties": {
                "items": {
                  "type": "array",
                  "description": "A collection of items.",
                  "items": {
                    "$ref": "#/components/schemas/LicenseCollection"
                  }
                },
                "pagination": {
                  "description": "The pagination details.",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  ]
                }
              }
            },
            "HateoasCollectionOfLicenseCollection": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/FilteredResponseOfLicenseCollection"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "_links"
                  ],
                  "properties": {
                    "_links": {
                      "type": "array",
                      "description": "A collection of links to related resources.",
                      "items": {
                        "$ref": "#/components/schemas/Link"
                      }
                    }
                  }
                }
              ]
            },
            "License": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/HateoasResource"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The unique ID of the license.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "organizationId": {
                      "type": "string",
                      "description": "The unique ID of the organization.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "applicationId": {
                      "type": "string",
                      "description": "The unique ID of the application.",
                      "format": "guid",
                      "nullable": true,
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "assignmentTypeId": {
                      "type": "string",
                      "description": "The unique ID of the assignment type.",
                      "format": "guid",
                      "nullable": true,
                      "example": "8e5d8f69-c818-4575-9a91-aebae9a9eacc"
                    },
                    "autoAllocateOnce": {
                      "type": "boolean",
                      "description": "```true``` if has auto allocate once selected; otherwise, ```false```.",
                      "nullable": true,
                      "example": true
                    },
                    "isAutoAllocated": {
                      "type": "boolean",
                      "description": "```true``` if has auto allocate selected; otherwise, ```false```.",
                      "nullable": true,
                      "example": true
                    },
                    "metricId": {
                      "type": "string",
                      "description": "The unique ID of the metric.",
                      "format": "guid",
                      "example": "5891a1d8-7fb0-45bd-b1f6-01c943f9c572"
                    },
                    "purchaseDate": {
                      "type": "string",
                      "description": "The purchase date.",
                      "format": "date-time",
                      "example": "2024-01-01T00:00:00Z"
                    },
                    "purchaseValue": {
                      "type": "number",
                      "description": "The purchase value.",
                      "format": "decimal",
                      "example": 1000
                    },
                    "purchaseCurrency": {
                      "type": "string",
                      "description": "The purchase currency.",
                      "nullable": true,
                      "example": "USD"
                    },
                    "quantity": {
                      "type": "integer",
                      "description": "The quantity.",
                      "format": "int32",
                      "nullable": true,
                      "example": 1
                    },
                    "licenseKeys": {
                      "type": "string",
                      "description": "The license keys.",
                      "nullable": true,
                      "example": "69658998-12-12031517-23"
                    },
                    "mediaStorage": {
                      "type": "string",
                      "description": "The media storage.",
                      "nullable": true,
                      "example": "path/to/file"
                    },
                    "licenseProofLocation": {
                      "type": "string",
                      "description": "The license proof location.",
                      "nullable": true,
                      "example": "path/to/licenseproof"
                    },
                    "invoiceReference": {
                      "type": "string",
                      "description": "The invoice reference.",
                      "nullable": true,
                      "example": "INV12345"
                    },
                    "vendor": {
                      "type": "string",
                      "description": "The vendor.",
                      "nullable": true,
                      "example": "Microsoft"
                    },
                    "notes": {
                      "type": "string",
                      "description": "The notes.",
                      "nullable": true,
                      "example": "Notes"
                    },
                    "externalId": {
                      "type": "string",
                      "description": "The external ID.",
                      "nullable": true,
                      "example": "EXT12345"
                    },
                    "sku": {
                      "type": "string",
                      "description": "The stock keeping unit.",
                      "nullable": true,
                      "example": "ABC-12345-S-BL"
                    },
                    "productDescription": {
                      "type": "string",
                      "description": "The product description.",
                      "nullable": true,
                      "example": "MSDN"
                    },
                    "isSubscription": {
                      "type": "boolean",
                      "description": "```true``` if is subscription; otherwise, ```false```.",
                      "example": true
                    },
                    "isCrossEdition": {
                      "type": "boolean",
                      "description": "```true``` if is cross-edition; otherwise, ```false```.",
                      "example": true
                    },
                    "isCrossPlatform": {
                      "type": "boolean",
                      "description": "```true``` if is cross-platform; otherwise, ```false```.",
                      "example": true
                    },
                    "isUpgrade": {
                      "type": "boolean",
                      "description": "```true``` if is upgrade; otherwise, ```false```.",
                      "example": true
                    },
                    "isDowngrade": {
                      "type": "boolean",
                      "description": "```true``` if is downgrade; otherwise, ```false```.",
                      "example": true
                    },
                    "isIncomplete": {
                      "type": "boolean",
                      "description": "```true``` if is incomplete; otherwise, ```false```.",
                      "example": true
                    },
                    "incompleteReasons": {
                      "description": "The incomplete license reasons.",
                      "example": [
                        "MissingApplication"
                      ],
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/IncompleteLicenseReason"
                        }
                      ]
                    },
                    "contractId": {
                      "type": "string",
                      "description": "The unique ID of the agreement.",
                      "format": "guid",
                      "nullable": true,
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "agreementId": {
                      "type": "string",
                      "description": "The unique ID of the agreement.",
                      "format": "guid",
                      "nullable": true,
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "updatedDate": {
                      "type": "string",
                      "description": "The updated date.",
                      "format": "date-time",
                      "example": "2024-01-01T00:00:00Z"
                    },
                    "createdDate": {
                      "type": "string",
                      "description": "The created date.",
                      "format": "date-time",
                      "example": "2024-01-01T00:00:00Z"
                    },
                    "subscriptionValidFrom": {
                      "type": "string",
                      "description": "The subscription valid from date.",
                      "format": "date-time",
                      "nullable": true,
                      "example": "2024-01-01T00:00:00Z"
                    },
                    "subscriptionValidTo": {
                      "type": "string",
                      "description": "The subscription valid to date.",
                      "format": "date-time",
                      "nullable": true,
                      "example": "2025-01-01T00:00:00Z"
                    },
                    "upgradedLicenseCount": {
                      "type": "integer",
                      "description": "The upgraded license count.",
                      "format": "int32",
                      "nullable": true,
                      "example": 1
                    },
                    "maintenanceAccordingToAgreement": {
                      "type": "boolean",
                      "description": "```true``` if is maintenance periods are based on the agreement; otherwise, ```false```..",
                      "example": true
                    },
                    "skuId": {
                      "type": "string",
                      "description": "The unique ID of the sku.",
                      "format": "guid",
                      "nullable": true,
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "hasVmUseRights": {
                      "type": "boolean",
                      "description": "```true``` if has VM use rights; otherwise, ```false```.",
                      "nullable": true,
                      "example": true
                    },
                    "numberOfSupportedVirtualMachines": {
                      "type": "integer",
                      "description": "The number of supported virtual machines.",
                      "format": "int32",
                      "nullable": true,
                      "example": 100
                    },
                    "status": {
                      "type": "string",
                      "description": "The status of the license.",
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/Status"
                        }
                      ],
                      "example": "Active"
                    },
                    "archivedDate": {
                      "type": "string",
                      "description": "The archived date.",
                      "format": "date-time",
                      "nullable": true,
                      "example": "2024-01-01T00:00:00Z"
                    }
                  }
                }
              ]
            },
            "SiteAssignmentRequest": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "organizationId": {
                  "type": "string",
                  "description": "The unique ID of the organization.",
                  "format": "guid",
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                }
              }
            },
            "LicenseUpgradeRequest": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "upgradedLicenseId": {
                  "type": "string",
                  "description": "The unique ID of the base license.",
                  "format": "guid",
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                },
                "upgradedQuantity": {
                  "type": "integer",
                  "description": "The quantity sent from the base license.",
                  "format": "int32",
                  "example": 1
                },
                "quantity": {
                  "type": "integer",
                  "description": "The quantity received on the upgraded license.",
                  "format": "int32",
                  "example": 1
                }
              }
            },
            "ComputerAssignmentRequest": {
              "type": "object",
              "description": "A collection of computer license assignments.",
              "additionalProperties": false,
              "properties": {
                "computerId": {
                  "type": "string",
                  "description": "The unique ID of the computer.",
                  "format": "guid",
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                },
                "quantity": {
                  "type": "integer",
                  "description": "The assigned quantity of licenses.",
                  "format": "int32",
                  "example": 1
                },
                "virtualMachines": {
                  "type": "array",
                  "description": "The list of virtual machines.",
                  "nullable": true,
                  "example": [
                    "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                  ],
                  "items": {
                    "type": "string",
                    "format": "guid"
                  }
                }
              }
            },
            "DatacenterAssignmentRequest": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "datacenterId": {
                  "type": "string",
                  "description": "The unique ID of the DCC.",
                  "format": "guid",
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                },
                "quantity": {
                  "type": "integer",
                  "description": "The assigned quantity of licenses.",
                  "format": "int32",
                  "example": 1
                },
                "virtualMachines": {
                  "type": "array",
                  "description": "The list of virtual machines.",
                  "nullable": true,
                  "example": [
                    "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                  ],
                  "items": {
                    "type": "string",
                    "format": "guid"
                  }
                }
              }
            },
            "OrganizationAssignmentRequest": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "organizationId": {
                  "type": "string",
                  "description": "The unique ID of the organization.",
                  "format": "guid",
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                },
                "quantity": {
                  "type": "integer",
                  "description": "The assigned quantity of licenses.",
                  "format": "int32",
                  "example": 1
                }
              }
            },
            "UserAssignmentRequest": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "userId": {
                  "type": "string",
                  "description": "The unique ID of the user.",
                  "format": "guid",
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                }
              }
            },
            "LicenseRequest": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "agreementId": {
                  "type": "string",
                  "description": "The unique ID of the agreement.",
                  "format": "guid",
                  "nullable": true,
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                },
                "applicationId": {
                  "type": "string",
                  "description": "The unique ID of the application.",
                  "format": "guid",
                  "nullable": true,
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                },
                "autoAllocateOnce": {
                  "type": "boolean",
                  "description": "```true``` if has auto allocate once selected; otherwise, ```false```.",
                  "nullable": true,
                  "example": true
                },
                "assignmentTypeId": {
                  "type": "string",
                  "description": "The unique ID of the assignment type.",
                  "format": "guid",
                  "nullable": true,
                  "example": "8e5d8f69-c818-4575-9a91-aebae9a9eacc"
                },
                "externalId": {
                  "type": "string",
                  "description": "The external ID.",
                  "nullable": true,
                  "example": "EXT12345"
                },
                "invoiceReference": {
                  "type": "string",
                  "description": "The invoice reference.",
                  "nullable": true,
                  "example": "INV12345"
                },
                "isAutoAllocated": {
                  "type": "boolean",
                  "description": "```true``` if has auto allocate selected; otherwise, ```false```.",
                  "nullable": true,
                  "example": true
                },
                "isCrossEdition": {
                  "type": "boolean",
                  "description": "```true``` if is cross-edition; otherwise, ```false```.",
                  "example": true
                },
                "isCrossPlatform": {
                  "type": "boolean",
                  "description": "```true``` if is cross-platform; otherwise, ```false```.",
                  "example": true
                },
                "isDowngrade": {
                  "type": "boolean",
                  "description": "```true``` if is downgrade; otherwise, ```false```.",
                  "example": true
                },
                "isSubscription": {
                  "type": "boolean",
                  "description": "```true``` if is subscription; otherwise, ```false```.",
                  "nullable": true,
                  "example": true
                },
                "isUpgrade": {
                  "type": "boolean",
                  "description": "```true``` if is upgrade; otherwise, ```false```.",
                  "example": true
                },
                "quantity": {
                  "type": "integer",
                  "description": "The quantity.",
                  "format": "int32",
                  "nullable": true,
                  "example": 1
                },
                "licenseKeys": {
                  "type": "string",
                  "description": "The license keys.",
                  "nullable": true,
                  "example": "69658998-12-12031517-23"
                },
                "licenseProofLocation": {
                  "type": "string",
                  "description": "The license proof location.",
                  "nullable": true,
                  "example": "path/to/licenseproof"
                },
                "maintenanceAccordingToAgreement": {
                  "type": "boolean",
                  "description": "```true``` if has maintenance according to agreement selected; otherwise, ```false```.",
                  "example": true
                },
                "mediaStorage": {
                  "type": "string",
                  "description": "The media storage.",
                  "nullable": true,
                  "example": "path/to/file"
                },
                "metricId": {
                  "type": "string",
                  "description": "The unique ID of the metric.",
                  "format": "guid",
                  "nullable": true,
                  "example": "5891a1d8-7fb0-45bd-b1f6-01c943f9c572"
                },
                "notes": {
                  "type": "string",
                  "description": "The notes.",
                  "nullable": true,
                  "example": "Notes"
                },
                "organizationId": {
                  "type": "string",
                  "description": "The unique ID of the organization.",
                  "format": "guid",
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                },
                "productDescription": {
                  "type": "string",
                  "description": "The product description.",
                  "nullable": true,
                  "example": "MSDN"
                },
                "purchaseDate": {
                  "type": "string",
                  "description": "The purchase date.",
                  "format": "date-time",
                  "example": "2024-01-01T00:00:00Z"
                },
                "purchaseValue": {
                  "type": "number",
                  "description": "The purchase value.",
                  "format": "decimal",
                  "nullable": true,
                  "example": 1000
                },
                "purchaseCurrency": {
                  "type": "string",
                  "description": "The purchase currency.",
                  "nullable": true,
                  "example": "USD"
                },
                "sku": {
                  "type": "string",
                  "description": "The stock keeping unit.",
                  "nullable": true,
                  "example": "ABC-12345-S-BL"
                },
                "subscriptionValidFrom": {
                  "type": "string",
                  "description": "The subscription valid from date.",
                  "format": "date-time",
                  "nullable": true,
                  "example": "2024-01-01T00:00:00Z"
                },
                "subscriptionValidTo": {
                  "type": "string",
                  "description": "The subscription valid to date.",
                  "format": "date-time",
                  "nullable": true,
                  "example": "2025-01-01T00:00:00Z"
                },
                "vendor": {
                  "type": "string",
                  "description": "The vendor.",
                  "nullable": true,
                  "example": "Microsoft"
                },
                "upgrades": {
                  "type": "array",
                  "description": "The license upgrades.",
                  "nullable": true,
                  "items": {
                    "$ref": "#/components/schemas/LicenseUpgradeRequest"
                  }
                },
                "maintenancePeriods": {
                  "type": "array",
                  "description": "The maintenance periods.",
                  "nullable": true,
                  "items": {
                    "$ref": "#/components/schemas/MaintenancePeriodRequest"
                  }
                },
                "computerAssignments": {
                  "type": "array",
                  "description": "The computer assignments.",
                  "nullable": true,
                  "items": {
                    "$ref": "#/components/schemas/ComputerAssignmentRequest"
                  }
                },
                "datacenterAssignments": {
                  "type": "array",
                  "description": "The datacenter assignments.",
                  "nullable": true,
                  "items": {
                    "$ref": "#/components/schemas/DatacenterAssignmentRequest"
                  }
                },
                "organizationAssignments": {
                  "type": "array",
                  "description": "The organization assignments.",
                  "nullable": true,
                  "items": {
                    "$ref": "#/components/schemas/OrganizationAssignmentRequest"
                  }
                },
                "userAssignments": {
                  "type": "array",
                  "description": "The user assignments.",
                  "nullable": true,
                  "items": {
                    "$ref": "#/components/schemas/UserAssignmentRequest"
                  }
                },
                "siteAssignment": {
                  "description": "The site assignment.",
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/SiteAssignmentRequest"
                    }
                  ]
                },
                "hasVmUseRights": {
                  "type": "boolean",
                  "description": "```true``` if has VM use rights; otherwise, ```false```.",
                  "nullable": true,
                  "example": true
                },
                "numberOfSupportedVirtualMachines": {
                  "type": "integer",
                  "description": "The number of VM supported by license.",
                  "format": "int32",
                  "nullable": true,
                  "example": 3
                }
              }
            },
            "IContractResolver": {
              "type": "object",
              "x-abstract": true,
              "additionalProperties": false
            },
            "Object": {},
            "OperationType": {
              "type": "string",
              "description": "The type of patch operation.",
              "x-enumNames": [
                "Add",
                "Remove",
                "Replace",
                "Move",
                "Copy",
                "Test",
                "Invalid"
              ],
              "enum": [
                "Add",
                "Remove",
                "Replace",
                "Move",
                "Copy",
                "Test",
                "Invalid"
              ]
            },
            "OperationBase": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "path": {
                  "type": "string",
                  "description": "A JSON Pointer path.",
                  "nullable": true,
                  "example": "/status"
                },
                "op": {
                  "type": "string",
                  "description": "The operation to perform.",
                  "nullable": true,
                  "example": "Replace"
                },
                "from": {
                  "type": "string",
                  "description": "A JSON Pointer path.",
                  "nullable": true
                }
              }
            },
            "Operation": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/OperationBase"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "value": {
                      "description": "The value to add, replace, or test.",
                      "nullable": true,
                      "example": "Archived"
                    }
                  }
                }
              ]
            },
            "OperationOfPatchLicenseRequest": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Operation"
                },
                {
                  "type": "object",
                  "additionalProperties": false
                }
              ]
            },
            "JsonPatchDocumentOfPatchLicenseRequest": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/OperationOfPatchLicenseRequest"
              }
            },
            "AssignmentType": {
              "type": "string",
              "description": "The assignment type.",
              "x-enumNames": [
                "Organization",
                "Computer",
                "User",
                "Site"
              ],
              "enum": [
                "Organization",
                "Computer",
                "User",
                "Site"
              ]
            },
            "LicenseEntitlement": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/HateoasResource"
                },
                {
                  "type": "object",
                  "description": "The license entitlement.",
                  "additionalProperties": false,
                  "properties": {
                    "applicationId": {
                      "type": "string",
                      "description": "The unique ID of the application.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "organizationId": {
                      "type": "string",
                      "description": "The unique ID of the organization.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "metricId": {
                      "type": "string",
                      "description": "The unique ID of the metric.",
                      "format": "guid",
                      "example": "5891a1d8-7fb0-45bd-b1f6-01c943f9c572"
                    },
                    "assignmentType": {
                      "description": "The assignment type.",
                      "example": "Organization",
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/AssignmentType"
                        }
                      ]
                    },
                    "quantity": {
                      "type": "integer",
                      "description": "The quantity.",
                      "format": "int32",
                      "example": 1
                    }
                  }
                }
              ]
            },
            "FilteredResponseOfLicenseEntitlement": {
              "type": "object",
              "description": "Filtered response.",
              "additionalProperties": false,
              "required": [
                "items",
                "pagination"
              ],
              "properties": {
                "items": {
                  "type": "array",
                  "description": "A collection of items.",
                  "items": {
                    "$ref": "#/components/schemas/LicenseEntitlement"
                  }
                },
                "pagination": {
                  "description": "The pagination details.",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  ]
                }
              }
            },
            "HateoasCollectionOfLicenseEntitlement": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/FilteredResponseOfLicenseEntitlement"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "_links"
                  ],
                  "properties": {
                    "_links": {
                      "type": "array",
                      "description": "A collection of links to related resources.",
                      "items": {
                        "$ref": "#/components/schemas/Link"
                      }
                    }
                  }
                }
              ]
            },
            "ComputerApplicationEntitlement": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/HateoasResource"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "computerId": {
                      "type": "string",
                      "description": "The unique ID of the computer.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "applicationId": {
                      "type": "string",
                      "description": "The unique ID of the application.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "metricId": {
                      "type": "string",
                      "description": "The unique ID of the metric.",
                      "format": "guid",
                      "example": "5891a1d8-7fb0-45bd-b1f6-01c943f9c572"
                    },
                    "entitlementStateId": {
                      "type": "string",
                      "description": "The unique ID of the entitlement state.",
                      "format": "guid",
                      "example": "6fb32edf-1d45-44e3-a55d-6df6068c0c08"
                    }
                  }
                }
              ]
            },
            "FilteredResponseOfComputerApplicationEntitlement": {
              "type": "object",
              "description": "Filtered response.",
              "additionalProperties": false,
              "required": [
                "items",
                "pagination"
              ],
              "properties": {
                "items": {
                  "type": "array",
                  "description": "A collection of items.",
                  "items": {
                    "$ref": "#/components/schemas/ComputerApplicationEntitlement"
                  }
                },
                "pagination": {
                  "description": "The pagination details.",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  ]
                }
              }
            },
            "HateoasCollectionOfComputerApplicationEntitlement": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/FilteredResponseOfComputerApplicationEntitlement"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "_links"
                  ],
                  "properties": {
                    "_links": {
                      "type": "array",
                      "description": "A collection of links to related resources.",
                      "items": {
                        "$ref": "#/components/schemas/Link"
                      }
                    }
                  }
                }
              ]
            },
            "EntitlementState": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/HateoasResource"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The unique ID of the entitlement state.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "name": {
                      "type": "string",
                      "description": "The name of the entitlement state.",
                      "nullable": true,
                      "example": "Partially covered"
                    },
                    "description": {
                      "type": "string",
                      "description": "The description of the entitlement state.",
                      "nullable": true,
                      "example": "The virtual machine is licensed by the host it is running on."
                    }
                  }
                }
              ]
            },
            "FilteredResponseOfEntitlementState": {
              "type": "object",
              "description": "Filtered response.",
              "additionalProperties": false,
              "required": [
                "items",
                "pagination"
              ],
              "properties": {
                "items": {
                  "type": "array",
                  "description": "A collection of items.",
                  "items": {
                    "$ref": "#/components/schemas/EntitlementState"
                  }
                },
                "pagination": {
                  "description": "The pagination details.",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  ]
                }
              }
            },
            "HateoasCollectionOfEntitlementState": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/FilteredResponseOfEntitlementState"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "_links"
                  ],
                  "properties": {
                    "_links": {
                      "type": "array",
                      "description": "A collection of links to related resources.",
                      "items": {
                        "$ref": "#/components/schemas/Link"
                      }
                    }
                  }
                }
              ]
            },
            "UserApplicationEntitlement": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/HateoasResource"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "userId": {
                      "type": "string",
                      "description": "The unique ID of the user.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "applicationId": {
                      "type": "string",
                      "description": "The unique ID of the application.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "metricId": {
                      "type": "string",
                      "description": "The unique ID of the metric.",
                      "format": "guid",
                      "example": "5891a1d8-7fb0-45bd-b1f6-01c943f9c572"
                    },
                    "entitlementStateId": {
                      "type": "string",
                      "description": "The unique ID of the entitlement state.",
                      "format": "guid",
                      "example": "6fb32edf-1d45-44e3-a55d-6df6068c0c08"
                    }
                  }
                }
              ]
            },
            "FilteredResponseOfUserApplicationEntitlement": {
              "type": "object",
              "description": "Filtered response.",
              "additionalProperties": false,
              "required": [
                "items",
                "pagination"
              ],
              "properties": {
                "items": {
                  "type": "array",
                  "description": "A collection of items.",
                  "items": {
                    "$ref": "#/components/schemas/UserApplicationEntitlement"
                  }
                },
                "pagination": {
                  "description": "The pagination details.",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  ]
                }
              }
            },
            "HateoasCollectionOfUserApplicationEntitlement": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/FilteredResponseOfUserApplicationEntitlement"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "_links"
                  ],
                  "properties": {
                    "_links": {
                      "type": "array",
                      "description": "A collection of links to related resources.",
                      "items": {
                        "$ref": "#/components/schemas/Link"
                      }
                    }
                  }
                }
              ]
            },
            "ExtendedCoverageType": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/HateoasResource"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The type of the extended coverage.",
                      "nullable": true,
                      "example": "Passive"
                    }
                  }
                }
              ]
            },
            "FilteredResponseOfExtendedCoverageType": {
              "type": "object",
              "description": "Filtered response.",
              "additionalProperties": false,
              "required": [
                "items",
                "pagination"
              ],
              "properties": {
                "items": {
                  "type": "array",
                  "description": "A collection of items.",
                  "items": {
                    "$ref": "#/components/schemas/ExtendedCoverageType"
                  }
                },
                "pagination": {
                  "description": "The pagination details.",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  ]
                }
              }
            },
            "HateoasCollectionOfExtendedCoverageType": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/FilteredResponseOfExtendedCoverageType"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "_links"
                  ],
                  "properties": {
                    "_links": {
                      "type": "array",
                      "description": "A collection of links to related resources.",
                      "items": {
                        "$ref": "#/components/schemas/Link"
                      }
                    }
                  }
                }
              ]
            },
            "ExtendedCoverageReason": {
              "type": "string",
              "description": "The extended coverage reason.",
              "x-enumNames": [
                "Other",
                "Passive",
                "Disaster",
                "TestingOrDevelopment"
              ],
              "enum": [
                "Other",
                "Passive",
                "Disaster",
                "TestingOrDevelopment"
              ]
            },
            "LicenseExtendedCoverage": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/HateoasResource"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The unique ID of the license.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "parentComputerId": {
                      "type": "string",
                      "description": "The unique ID of the parent computer.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "isParentComputerDatacenter": {
                      "type": "boolean",
                      "description": "```true``` if parent is datacenter; otherwise, ```false```.",
                      "example": true
                    },
                    "extendedComputerId": {
                      "type": "string",
                      "description": "The unique ID of the extended computer.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "applicationId": {
                      "type": "string",
                      "description": "The unique ID of the application.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "coveredApplicationId": {
                      "type": "string",
                      "description": "The unique ID of the application.",
                      "format": "guid",
                      "nullable": true,
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "reason": {
                      "description": "The incomplete license reason.",
                      "example": "Disaster",
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/ExtendedCoverageReason"
                        }
                      ]
                    },
                    "reasonDescription": {
                      "type": "string",
                      "description": "The reason description.",
                      "nullable": true,
                      "example": "The recovery reason description"
                    }
                  }
                }
              ]
            },
            "FilteredResponseOfLicenseExtendedCoverage": {
              "type": "object",
              "description": "Filtered response.",
              "additionalProperties": false,
              "required": [
                "items",
                "pagination"
              ],
              "properties": {
                "items": {
                  "type": "array",
                  "description": "A collection of items.",
                  "items": {
                    "$ref": "#/components/schemas/LicenseExtendedCoverage"
                  }
                },
                "pagination": {
                  "description": "The pagination details.",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  ]
                }
              }
            },
            "HateoasCollectionOfLicenseExtendedCoverage": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/FilteredResponseOfLicenseExtendedCoverage"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "_links"
                  ],
                  "properties": {
                    "_links": {
                      "type": "array",
                      "description": "A collection of links to related resources.",
                      "items": {
                        "$ref": "#/components/schemas/Link"
                      }
                    }
                  }
                }
              ]
            },
            "LicenseCost": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/HateoasResource"
                },
                {
                  "type": "object",
                  "description": "The license cost.",
                  "additionalProperties": false,
                  "properties": {
                    "licenseId": {
                      "type": "string",
                      "description": "The unique ID of the license.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "organizationId": {
                      "type": "string",
                      "description": "The unique ID of the organization.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "licenseQuantity": {
                      "type": "integer",
                      "description": "The quantity.",
                      "format": "int32",
                      "example": 1
                    },
                    "licensePurchaseCost": {
                      "type": "number",
                      "description": "The license purchase value.",
                      "format": "decimal",
                      "example": 1000
                    },
                    "currentMaintenanceCost": {
                      "type": "number",
                      "description": "The current maintenance cost.",
                      "format": "decimal",
                      "example": 1000
                    },
                    "accumulatedMaintenanceCost": {
                      "type": "number",
                      "description": "The accumulated maintenance cost.",
                      "format": "decimal",
                      "example": 1000
                    },
                    "currentSupportCost": {
                      "type": "number",
                      "description": "The current support cost.",
                      "format": "decimal",
                      "example": 1000
                    },
                    "accumulatedSupportCost": {
                      "type": "number",
                      "description": "The accumulated support cost.",
                      "format": "decimal",
                      "example": 1000
                    },
                    "totalCost": {
                      "type": "number",
                      "description": "The total license cost.",
                      "format": "decimal",
                      "example": 1000
                    },
                    "currency": {
                      "type": "string",
                      "description": "The currency.",
                      "nullable": true,
                      "example": "USD"
                    }
                  }
                }
              ]
            },
            "FilteredResponseOfLicenseCost": {
              "type": "object",
              "description": "Filtered response.",
              "additionalProperties": false,
              "required": [
                "items",
                "pagination"
              ],
              "properties": {
                "items": {
                  "type": "array",
                  "description": "A collection of items.",
                  "items": {
                    "$ref": "#/components/schemas/LicenseCost"
                  }
                },
                "pagination": {
                  "description": "The pagination details.",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  ]
                }
              }
            },
            "HateoasCollectionOfLicenseCost": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/FilteredResponseOfLicenseCost"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "_links"
                  ],
                  "properties": {
                    "_links": {
                      "type": "array",
                      "description": "A collection of links to related resources.",
                      "items": {
                        "$ref": "#/components/schemas/Link"
                      }
                    }
                  }
                }
              ]
            },
            "LicenseCostSummary": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/HateoasResource"
                },
                {
                  "type": "object",
                  "description": "The license cost summary.",
                  "additionalProperties": false,
                  "properties": {
                    "licenseId": {
                      "type": "string",
                      "description": "The unique ID of the license.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "quantity": {
                      "type": "integer",
                      "description": "The quantity.",
                      "format": "int32",
                      "example": 1
                    },
                    "purchaseCost": {
                      "type": "number",
                      "description": "The license purchase value.",
                      "format": "decimal",
                      "example": 1000
                    },
                    "currentMaintenanceCost": {
                      "type": "number",
                      "description": "The current maintenance cost.",
                      "format": "decimal",
                      "example": 1000
                    },
                    "accumulatedMaintenanceCost": {
                      "type": "number",
                      "description": "The accumulated maintenance cost.",
                      "format": "decimal",
                      "example": 1000
                    },
                    "currentSupportCost": {
                      "type": "number",
                      "description": "The current support cost.",
                      "format": "decimal",
                      "example": 1000
                    },
                    "accumulatedSupportCost": {
                      "type": "number",
                      "description": "The accumulated support cost.",
                      "format": "decimal",
                      "example": 1000
                    },
                    "totalCost": {
                      "type": "number",
                      "description": "The total license cost.",
                      "format": "decimal",
                      "example": 1000
                    },
                    "averageCostPerLicensePurchase": {
                      "type": "number",
                      "description": "The average cost per license purchase.",
                      "format": "decimal",
                      "example": 100
                    },
                    "currency": {
                      "type": "string",
                      "description": "The currency.",
                      "nullable": true,
                      "example": "USD"
                    }
                  }
                }
              ]
            },
            "AllocationSummaryCollectionItem": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/HateoasResource"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "applicationId": {
                      "type": "string",
                      "description": "The unique ID of the application.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "metricId": {
                      "type": "string",
                      "description": "The unique ID of the metric.",
                      "format": "guid",
                      "example": "5891a1d8-7fb0-45bd-b1f6-01c943f9c572"
                    },
                    "organizationId": {
                      "type": "string",
                      "description": "The unique ID of the organization.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "requirement": {
                      "type": "integer",
                      "description": "The requirement quantity.",
                      "format": "int32",
                      "example": 1
                    },
                    "coverage": {
                      "type": "integer",
                      "description": "The coverage of the assigned licenses.",
                      "format": "int32",
                      "example": 1
                    },
                    "compliance": {
                      "type": "integer",
                      "description": "The compliance value.",
                      "format": "int32",
                      "example": 1
                    }
                  }
                }
              ]
            },
            "FilteredResponseOfAllocationSummaryCollectionItem": {
              "type": "object",
              "description": "Filtered response.",
              "additionalProperties": false,
              "required": [
                "items",
                "pagination"
              ],
              "properties": {
                "items": {
                  "type": "array",
                  "description": "A collection of items.",
                  "items": {
                    "$ref": "#/components/schemas/AllocationSummaryCollectionItem"
                  }
                },
                "pagination": {
                  "description": "The pagination details.",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  ]
                }
              }
            },
            "HateoasCollectionOfAllocationSummaryCollectionItem": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/FilteredResponseOfAllocationSummaryCollectionItem"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "_links"
                  ],
                  "properties": {
                    "_links": {
                      "type": "array",
                      "description": "A collection of links to related resources.",
                      "items": {
                        "$ref": "#/components/schemas/Link"
                      }
                    }
                  }
                }
              ]
            },
            "ComplianceSummaryCollection": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/HateoasResource"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "applicationId": {
                      "type": "string",
                      "description": "The unique ID of the application.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "metricId": {
                      "type": "string",
                      "description": "The unique ID of the metric.",
                      "format": "guid",
                      "example": "5891a1d8-7fb0-45bd-b1f6-01c943f9c572"
                    },
                    "availableLicenses": {
                      "type": "integer",
                      "description": "The available licenses quantity.",
                      "format": "int32",
                      "example": 1
                    },
                    "compliance": {
                      "type": "integer",
                      "description": "The compliance value.",
                      "format": "int32",
                      "example": 1
                    },
                    "licensesPurchased": {
                      "type": "integer",
                      "description": "The number of licenses that have been purchased.",
                      "format": "int32",
                      "example": 1
                    },
                    "incompleteLicenses": {
                      "type": "integer",
                      "description": "The number of incomplete licenses.",
                      "format": "int32",
                      "example": 1
                    },
                    "expiredSubscriptionLicenses": {
                      "type": "integer",
                      "description": "The number of expired subscription licenses.",
                      "format": "int32",
                      "example": 1
                    },
                    "invalidAssignments": {
                      "type": "integer",
                      "description": "The number of invalid assignments.",
                      "format": "int32",
                      "example": 1
                    },
                    "unassigned": {
                      "type": "integer",
                      "description": "The number of unassigned licenses.",
                      "format": "int32",
                      "example": 1
                    },
                    "assignedNamedUsers": {
                      "type": "integer",
                      "description": "The number of licenses assigned to named users.",
                      "format": "int32",
                      "example": 1
                    },
                    "siteLicenses": {
                      "type": "integer",
                      "description": "The number of site licenses.",
                      "format": "int32",
                      "example": 1
                    },
                    "downgradesGiven": {
                      "type": "integer",
                      "description": "The number of license downgrades given.",
                      "format": "int32",
                      "example": 1
                    },
                    "downgradesReceived": {
                      "type": "integer",
                      "description": "The number of license downgrades received.",
                      "format": "int32",
                      "example": 1
                    },
                    "upgradesGiven": {
                      "type": "integer",
                      "description": "The number of license upgrades given.",
                      "format": "int32",
                      "example": 1
                    },
                    "upgradesReceived": {
                      "type": "integer",
                      "description": "The number of license upgrades received.",
                      "format": "int32",
                      "example": 1
                    },
                    "crossPlatformGiven": {
                      "type": "integer",
                      "description": "The number of cross-platform licenses given.",
                      "format": "int32",
                      "example": 1
                    },
                    "crossPlatformReceived": {
                      "type": "integer",
                      "description": "The number of cross-platform licenses received.",
                      "format": "int32",
                      "example": 1
                    },
                    "crossEditionGiven": {
                      "type": "integer",
                      "description": "The number of cross-edition licenses given.",
                      "format": "int32",
                      "example": 1
                    },
                    "crossEditionReceived": {
                      "type": "integer",
                      "description": "The number of cross-edition licenses received.",
                      "format": "int32",
                      "example": 1
                    },
                    "initialRequirement": {
                      "type": "integer",
                      "description": "The initial requirement.",
                      "format": "int32",
                      "example": 1
                    },
                    "includedInBundle": {
                      "type": "integer",
                      "description": "The number of licenses included in a bundle.",
                      "format": "int32",
                      "example": 1
                    },
                    "outsideMetricPeriod": {
                      "type": "integer",
                      "description": "The number of licenses outside the metric period.",
                      "format": "int32",
                      "example": 1
                    },
                    "secondaryUseRightsDesktopLaptop": {
                      "type": "integer",
                      "description": "The number of licenses for secondary use on desktop or laptop computers.",
                      "format": "int32",
                      "example": 1
                    },
                    "secondaryUseRightsDevice": {
                      "type": "integer",
                      "description": "The number of licenses for secondary use on devices.",
                      "format": "int32",
                      "example": 1
                    },
                    "extendedCoverageForDcc": {
                      "type": "integer",
                      "description": "The number of licenses for extended coverage for datacenter components.",
                      "format": "int32",
                      "example": 1
                    },
                    "extendedCoverageForHosts": {
                      "type": "integer",
                      "description": "The number of licenses for extended coverage for hosts.",
                      "format": "int32",
                      "example": 1
                    },
                    "multipleVersionEdition": {
                      "type": "integer",
                      "description": "The number of licenses for multiple version/edition rights.",
                      "format": "int32",
                      "example": 1
                    },
                    "virtualDesktopInfrastructure": {
                      "type": "integer",
                      "description": "The number of licenses for virtual desktop infrastructure.",
                      "format": "int32",
                      "example": 1
                    },
                    "minimumRequirement": {
                      "type": "integer",
                      "description": "The minimum license requirement.",
                      "format": "int32",
                      "example": 1
                    },
                    "coreFactor": {
                      "type": "integer",
                      "description": "The core factor used for licensing.",
                      "format": "int32",
                      "example": 1
                    },
                    "physicalHost": {
                      "type": "integer",
                      "description": "The number of licenses required for physical hosts.",
                      "format": "int32",
                      "example": 1
                    },
                    "licenseRequirement": {
                      "type": "integer",
                      "description": "The license requirement.",
                      "format": "int32",
                      "example": 1
                    },
                    "computerAppExclusions": {
                      "type": "integer",
                      "description": "The number of licenses excluded for a specific computer application.",
                      "format": "int32",
                      "example": 1
                    },
                    "windowsServer": {
                      "type": "integer",
                      "description": "The number of licenses for Windows Server.",
                      "format": "int32",
                      "example": 1
                    },
                    "sqlServer": {
                      "type": "integer",
                      "description": "The number of licenses for SQL Server.",
                      "format": "int32",
                      "example": 1
                    },
                    "otherMetricCoverage": {
                      "type": "integer",
                      "description": "The coverage value for the other metric.",
                      "format": "int32",
                      "example": 1
                    },
                    "siteCoverage": {
                      "type": "integer",
                      "description": "The number of licenses for site coverage.",
                      "format": "int32",
                      "example": 1
                    },
                    "vmCoverage": {
                      "type": "integer",
                      "description": "The number of licenses for virtual machines.",
                      "format": "int32",
                      "example": 1
                    },
                    "licenseStacking": {
                      "type": "integer",
                      "description": "The number of licenses for license stacking.",
                      "format": "int32",
                      "example": 1
                    },
                    "namedUserCoverage": {
                      "type": "integer",
                      "description": "The number of licenses for named user coverage.",
                      "format": "int32",
                      "example": 1
                    },
                    "licensingOtherMetrics": {
                      "type": "integer",
                      "description": "The number of licenses for other metrics.",
                      "format": "int32",
                      "example": 1
                    },
                    "virtualDesktopAccess": {
                      "type": "integer",
                      "description": "The number of licenses for virtual desktop access.",
                      "format": "int32",
                      "example": 1
                    },
                    "totalCoverage": {
                      "type": "integer",
                      "description": "The total coverage of licenses.",
                      "format": "int32",
                      "example": 1
                    }
                  }
                }
              ]
            },
            "FilteredResponseOfComplianceSummaryCollection": {
              "type": "object",
              "description": "Filtered response.",
              "additionalProperties": false,
              "required": [
                "items",
                "pagination"
              ],
              "properties": {
                "items": {
                  "type": "array",
                  "description": "A collection of items.",
                  "items": {
                    "$ref": "#/components/schemas/ComplianceSummaryCollection"
                  }
                },
                "pagination": {
                  "description": "The pagination details.",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  ]
                }
              }
            },
            "HateoasCollectionOfComplianceSummaryCollection": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/FilteredResponseOfComplianceSummaryCollection"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "_links"
                  ],
                  "properties": {
                    "_links": {
                      "type": "array",
                      "description": "A collection of links to related resources.",
                      "items": {
                        "$ref": "#/components/schemas/Link"
                      }
                    }
                  }
                }
              ]
            },
            "ComplianceSummaryUsageCollection": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/HateoasResource"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "metricId": {
                      "type": "string",
                      "description": "The unique ID of the metric.",
                      "format": "guid",
                      "example": "5891a1d8-7fb0-45bd-b1f6-01c943f9c572"
                    },
                    "licenseMetricId": {
                      "type": "string",
                      "description": "The unique ID of the metric.",
                      "format": "guid",
                      "example": "5891a1d8-7fb0-45bd-b1f6-01c943f9c572"
                    },
                    "otherMetricCoverage": {
                      "type": "integer",
                      "description": "The coverage value for the other metric.",
                      "format": "int32",
                      "example": 1
                    },
                    "mainCoverage": {
                      "type": "integer",
                      "description": "The coverage value.",
                      "format": "int32",
                      "example": 1
                    },
                    "isPartial": {
                      "type": "boolean",
                      "description": "```true``` if is partial coverage; otherwise, ```false```.",
                      "example": true
                    },
                    "applicationId": {
                      "type": "string",
                      "description": "The unique ID of the application.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    }
                  }
                }
              ]
            },
            "FilteredResponseOfComplianceSummaryUsageCollection": {
              "type": "object",
              "description": "Filtered response.",
              "additionalProperties": false,
              "required": [
                "items",
                "pagination"
              ],
              "properties": {
                "items": {
                  "type": "array",
                  "description": "A collection of items.",
                  "items": {
                    "$ref": "#/components/schemas/ComplianceSummaryUsageCollection"
                  }
                },
                "pagination": {
                  "description": "The pagination details.",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  ]
                }
              }
            },
            "HateoasCollectionOfComplianceSummaryUsageCollection": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/FilteredResponseOfComplianceSummaryUsageCollection"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "_links"
                  ],
                  "properties": {
                    "_links": {
                      "type": "array",
                      "description": "A collection of links to related resources.",
                      "items": {
                        "$ref": "#/components/schemas/Link"
                      }
                    }
                  }
                }
              ]
            },
            "AssignmentTypeCollection": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/HateoasResource"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "assignmentType": {
                      "type": "integer",
                      "description": "The assignment type.",
                      "format": "int32",
                      "example": 0
                    },
                    "assignmentTypeId": {
                      "type": "string",
                      "description": "The unique ID of the assignment type.",
                      "format": "guid",
                      "example": "8e5d8f69-c818-4575-9a91-aebae9a9eacc"
                    },
                    "name": {
                      "type": "string",
                      "description": "The name of the assignment type.",
                      "nullable": true,
                      "example": "Organization"
                    }
                  }
                }
              ]
            },
            "FilteredResponseOfAssignmentTypeCollection": {
              "type": "object",
              "description": "Filtered response.",
              "additionalProperties": false,
              "required": [
                "items",
                "pagination"
              ],
              "properties": {
                "items": {
                  "type": "array",
                  "description": "A collection of items.",
                  "items": {
                    "$ref": "#/components/schemas/AssignmentTypeCollection"
                  }
                },
                "pagination": {
                  "description": "The pagination details.",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  ]
                }
              }
            },
            "HateoasCollectionOfAssignmentTypeCollection": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/FilteredResponseOfAssignmentTypeCollection"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "_links"
                  ],
                  "properties": {
                    "_links": {
                      "type": "array",
                      "description": "A collection of links to related resources.",
                      "items": {
                        "$ref": "#/components/schemas/Link"
                      }
                    }
                  }
                }
              ]
            },
            "InvalidAssignmentReasons": {
              "type": "integer",
              "description": "The invalid assignment reason.",
              "x-enumFlags": true,
              "x-enumNames": [
                "None",
                "SubscriptionExpired",
                "Unassigned",
                "ComputerMissing",
                "InactiveComputer",
                "UserMissing",
                "DatacenterMissing",
                "InvalidMetric",
                "NoEliglibleApplicationInstalled",
                "NoEligibleApplicationIsInstalledOnAnyComputerWhereUserIsPrimary",
                "UserHasNotUsedAnyEligibleApplication",
                "Incomplete",
                "OverAssignment",
                "InvalidQuantity",
                "UserHasNotUsedAnyEligibleApplicationWithinPeriod",
                "InvalidMetricGroup",
                "InvalidProcessorCount"
              ],
              "enum": [
                0,
                1,
                2,
                4,
                8,
                16,
                32,
                64,
                128,
                256,
                512,
                1024,
                2048,
                4096,
                8192,
                16384,
                32768
              ]
            },
            "ComputerAssignment": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/CreatedHateoasResponse"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "licenseId": {
                      "type": "string",
                      "description": "The unique ID of the license.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "applicationId": {
                      "type": "string",
                      "description": "The unique ID of the application.",
                      "format": "guid",
                      "nullable": true,
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "computerId": {
                      "type": "string",
                      "description": "The unique ID of the computer.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "quantity": {
                      "type": "integer",
                      "description": "The assigned quantity of licenses.",
                      "format": "int32",
                      "nullable": true,
                      "example": 1
                    },
                    "numberOfSupportedVirtualMachines": {
                      "type": "integer",
                      "description": "The number of supported virtual machines.",
                      "format": "int32",
                      "nullable": true,
                      "example": 1
                    },
                    "hasVmUseRights": {
                      "type": "boolean",
                      "description": "```true``` if has VM use rights; otherwise, ```false```.",
                      "nullable": true,
                      "example": true
                    },
                    "invalidAssignmentReasons": {
                      "description": "Invalid assignment reasons.",
                      "nullable": true,
                      "example": [
                        "OverAssignment"
                      ],
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/InvalidAssignmentReasons"
                        }
                      ]
                    },
                    "virtualMachines": {
                      "type": "array",
                      "description": "The virtual machines.",
                      "nullable": true,
                      "example": [
                        "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                      ],
                      "items": {
                        "type": "string",
                        "format": "guid"
                      }
                    }
                  }
                }
              ]
            },
            "FilteredResponseOfComputerAssignment": {
              "type": "object",
              "description": "Filtered response.",
              "additionalProperties": false,
              "required": [
                "items",
                "pagination"
              ],
              "properties": {
                "items": {
                  "type": "array",
                  "description": "A collection of items.",
                  "items": {
                    "$ref": "#/components/schemas/ComputerAssignment"
                  }
                },
                "pagination": {
                  "description": "The pagination details.",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  ]
                }
              }
            },
            "HateoasCollectionOfComputerAssignment": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/FilteredResponseOfComputerAssignment"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "_links"
                  ],
                  "properties": {
                    "_links": {
                      "type": "array",
                      "description": "A collection of links to related resources.",
                      "items": {
                        "$ref": "#/components/schemas/Link"
                      }
                    }
                  }
                }
              ]
            },
            "ListOfComputerAssignmentRequest": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ComputerAssignmentRequest"
              }
            },
            "DatacenterAssignment": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/CreatedHateoasResponse"
                },
                {
                  "type": "object",
                  "description": "The DCC assignment.",
                  "additionalProperties": false,
                  "properties": {
                    "licenseId": {
                      "type": "string",
                      "description": "The unique ID of the license.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "applicationId": {
                      "type": "string",
                      "description": "The unique ID of the application.",
                      "format": "guid",
                      "nullable": true,
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "datacenterId": {
                      "type": "string",
                      "description": "The unique ID of the DCC.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "quantity": {
                      "type": "integer",
                      "description": "The assigned quantity of licenses.",
                      "format": "int32",
                      "nullable": true,
                      "example": 1
                    },
                    "numberOfSupportedVirtualMachines": {
                      "type": "integer",
                      "description": "The number of supported virtual machines.",
                      "format": "int32",
                      "nullable": true,
                      "example": 1
                    },
                    "hasVmUseRights": {
                      "type": "boolean",
                      "description": "```true``` if has VM use rights; otherwise, ```false```.",
                      "nullable": true,
                      "example": true
                    },
                    "invalidAssignmentReasons": {
                      "description": "Invalid assignment reasons.",
                      "nullable": true,
                      "example": [
                        "OverAssignment"
                      ],
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/InvalidAssignmentReasons"
                        }
                      ]
                    },
                    "virtualMachines": {
                      "type": "array",
                      "description": "The virtual machines.",
                      "nullable": true,
                      "example": [
                        "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                      ],
                      "items": {
                        "type": "string",
                        "format": "guid"
                      }
                    }
                  }
                }
              ]
            },
            "FilteredResponseOfDatacenterAssignment": {
              "type": "object",
              "description": "Filtered response.",
              "additionalProperties": false,
              "required": [
                "items",
                "pagination"
              ],
              "properties": {
                "items": {
                  "type": "array",
                  "description": "A collection of items.",
                  "items": {
                    "$ref": "#/components/schemas/DatacenterAssignment"
                  }
                },
                "pagination": {
                  "description": "The pagination details.",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  ]
                }
              }
            },
            "HateoasCollectionOfDatacenterAssignment": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/FilteredResponseOfDatacenterAssignment"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "_links"
                  ],
                  "properties": {
                    "_links": {
                      "type": "array",
                      "description": "A collection of links to related resources.",
                      "items": {
                        "$ref": "#/components/schemas/Link"
                      }
                    }
                  }
                }
              ]
            },
            "ListOfDatacenterAssignmentRequest": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/DatacenterAssignmentRequest"
              }
            },
            "LicenseAssignmentDetails": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/HateoasResource"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "licenseId": {
                      "type": "string",
                      "description": "The unique ID of the license.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "hasOrganizationAssignment": {
                      "type": "boolean",
                      "description": "```true``` if has organization assignment; otherwise, ```false```.",
                      "example": true
                    },
                    "hasComputerAssignment": {
                      "type": "boolean",
                      "description": "```true``` if has computer assignment; otherwise, ```false```.",
                      "example": true
                    },
                    "hasUserAssignment": {
                      "type": "boolean",
                      "description": "```true``` if has user assignment; otherwise, ```false```.",
                      "example": true
                    },
                    "hasSiteAssignment": {
                      "type": "boolean",
                      "description": "```true``` if has site assignment; otherwise, ```false```.",
                      "example": true
                    }
                  }
                }
              ]
            },
            "OrganizationAssignment": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/CreatedHateoasResponse"
                },
                {
                  "type": "object",
                  "description": "The organization assignment.",
                  "additionalProperties": false,
                  "properties": {
                    "licenseId": {
                      "type": "string",
                      "description": "The unique ID of the license.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "applicationId": {
                      "type": "string",
                      "description": "The unique ID of the application.",
                      "format": "guid",
                      "nullable": true,
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "organizationId": {
                      "type": "string",
                      "description": "The unique ID of the organization.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "quantity": {
                      "type": "integer",
                      "description": "The assigned quantity of licenses.",
                      "format": "int32",
                      "nullable": true,
                      "example": 1
                    },
                    "isAutoAllocated": {
                      "type": "boolean",
                      "description": "```true``` if has auto allocate selected; otherwise, ```false```.",
                      "example": true
                    }
                  }
                }
              ]
            },
            "FilteredResponseOfOrganizationAssignment": {
              "type": "object",
              "description": "Filtered response.",
              "additionalProperties": false,
              "required": [
                "items",
                "pagination"
              ],
              "properties": {
                "items": {
                  "type": "array",
                  "description": "A collection of items.",
                  "items": {
                    "$ref": "#/components/schemas/OrganizationAssignment"
                  }
                },
                "pagination": {
                  "description": "The pagination details.",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  ]
                }
              }
            },
            "HateoasCollectionOfOrganizationAssignment": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/FilteredResponseOfOrganizationAssignment"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "_links"
                  ],
                  "properties": {
                    "_links": {
                      "type": "array",
                      "description": "A collection of links to related resources.",
                      "items": {
                        "$ref": "#/components/schemas/Link"
                      }
                    }
                  }
                }
              ]
            },
            "ListOfOrganizationAssignmentRequest": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/OrganizationAssignmentRequest"
              }
            },
            "SiteAssignment": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/HateoasResource"
                },
                {
                  "type": "object",
                  "description": "The site assignment.",
                  "additionalProperties": false,
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The unique ID of the assignment.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "licenseId": {
                      "type": "string",
                      "description": "The unique ID of the license.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "applicationId": {
                      "type": "string",
                      "description": "The unique ID of the application.",
                      "format": "guid",
                      "nullable": true,
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "organizationId": {
                      "type": "string",
                      "description": "The unique ID of the organization.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "quantity": {
                      "type": "integer",
                      "description": "The assigned quantity of licenses.",
                      "format": "int32",
                      "nullable": true,
                      "example": 1
                    }
                  }
                }
              ]
            },
            "UserAssignment": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/CreatedHateoasResponse"
                },
                {
                  "type": "object",
                  "description": "The user assignment.",
                  "additionalProperties": false,
                  "properties": {
                    "licenseId": {
                      "type": "string",
                      "description": "The unique ID of the license.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "applicationId": {
                      "type": "string",
                      "description": "The unique ID of the application.",
                      "format": "guid",
                      "nullable": true,
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "userId": {
                      "type": "string",
                      "description": "The unique ID of the user.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "quantity": {
                      "type": "integer",
                      "description": "The assigned quantity of licenses.",
                      "format": "int32",
                      "example": 1
                    },
                    "invalidAssignmentReasons": {
                      "description": "Invalid assignment reasons.",
                      "nullable": true,
                      "example": [
                        "OverAssignment"
                      ],
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/InvalidAssignmentReasons"
                        }
                      ]
                    }
                  }
                }
              ]
            },
            "FilteredResponseOfUserAssignment": {
              "type": "object",
              "description": "Filtered response.",
              "additionalProperties": false,
              "required": [
                "items",
                "pagination"
              ],
              "properties": {
                "items": {
                  "type": "array",
                  "description": "A collection of items.",
                  "items": {
                    "$ref": "#/components/schemas/UserAssignment"
                  }
                },
                "pagination": {
                  "description": "The pagination details.",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  ]
                }
              }
            },
            "HateoasCollectionOfUserAssignment": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/FilteredResponseOfUserAssignment"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "_links"
                  ],
                  "properties": {
                    "_links": {
                      "type": "array",
                      "description": "A collection of links to related resources.",
                      "items": {
                        "$ref": "#/components/schemas/Link"
                      }
                    }
                  }
                }
              ]
            },
            "ListOfUserAssignmentRequest": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/UserAssignmentRequest"
              }
            },
            "Status": {
              "type": "string",
              "description": "The status of the license.",
              "x-enumDescriptions": {
                "Active": "The license is active and affects compliance position.",
                "Archived": "The license is archived and does not affect compliance position."
              },
              "example": "Active"
            }
          },
          "securitySchemes": {
            "BearerAuth": {
              "type": "http",
              "scheme": "bearer",
              "bearerFormat": "JWT"
            }
          }
        },
        "tags": [
          {
            "name": "Assignments"
          },
          {
            "name": "Compliance"
          },
          {
            "name": "Costs"
          },
          {
            "name": "Coverage"
          },
          {
            "name": "Entitlements"
          },
          {
            "name": "Licenses"
          },
          {
            "name": "Periods"
          },
          {
            "name": "Policies"
          },
          {
            "name": "Tracking"
          },
          {
            "name": "Transfers"
          },
          {
            "name": "Upgrades"
          }
        ]
      },
      "bundle": {
        "openapi": "3.0.0",
        "info": {
          "title": "SAM: Licenses",
          "contact": {
            "name": "Snow Software, Inc.",
            "url": "https://www.snowsoftware.com"
          },
          "version": "1.6.0"
        },
        "servers": [
          {
            "url": "https://{region}.snowsoftware.io",
            "description": "You can find your **Data region** in the **Snow Atlas settings** menu, in **License details**. Your **Data region** is on the **General information** tab. For further information, see [General information](https://docs.snowsoftware.com/snow-atlas/en/UUID-2d4ce22b-e2a9-b7b0-44b8-0ecc55c2959f.html#UUID-2d4ce22b-e2a9-b7b0-44b8-0ecc55c2959f_section-idm4543865842761633102149279789 \"https://docs.snowsoftware.com/snow-atlas/en/UUID-2d4ce22b-e2a9-b7b0-44b8-0ecc55c2959f.html#UUID-2d4ce22b-e2a9-b7b0-44b8-0ecc55c2959f_section-idm4543865842761633102149279789\").",
            "variables": {
              "region": {
                "enum": [
                  "westeurope",
                  "australiasoutheast",
                  "eastus2",
                  "uksouth"
                ],
                "default": "westeurope"
              }
            }
          }
        ],
        "paths": {
          "/api/sam/v1/licenses/{id}/upgrades": {
            "get": {
              "tags": [
                "Upgrades"
              ],
              "summary": "Get license upgrades",
              "description": "Returns a collection of upgrades for a license.",
              "operationId": "getLicenseUpgradeCollection",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the license.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                },
                {
                  "name": "filter",
                  "in": "query",
                  "description": "For more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).",
                  "schema": {
                    "type": "string"
                  },
                  "example": "filter=status -eq \"active\""
                },
                {
                  "name": "page_number",
                  "in": "query",
                  "description": "The page number.",
                  "schema": {
                    "type": "integer",
                    "default": 1,
                    "minimum": 1
                  }
                },
                {
                  "name": "page_size",
                  "in": "query",
                  "description": "The maximum number of items in the response.",
                  "schema": {
                    "type": "integer",
                    "default": 100,
                    "minimum": 1
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/HateoasCollectionOfLicenseUpgrade"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 404,
                          "message": "Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.r"
                  ]
                }
              ]
            }
          },
          "/api/sam/v1/licenses/{id}/upgrades/{upgradedLicenseId}": {
            "get": {
              "tags": [
                "Upgrades"
              ],
              "summary": "Get the details of a license upgrade",
              "description": "Returns the details of a license upgrade.",
              "operationId": "getLicenseUpgradeDetails",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the license.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                },
                {
                  "name": "upgradedLicenseId",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the upgraded license.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/LicenseUpgrade"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 404,
                          "message": "Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.r"
                  ]
                }
              ]
            }
          },
          "/api/sam/v1/licenses/transfers/{applicationId}/computers": {
            "get": {
              "tags": [
                "Transfers"
              ],
              "summary": "Get application license transfers",
              "description": "Returns a collection of computer license transfers for an application.",
              "operationId": "getComputerTransferCollection",
              "parameters": [
                {
                  "name": "applicationId",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the application.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                },
                {
                  "name": "filter",
                  "in": "query",
                  "description": "For more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).",
                  "schema": {
                    "type": "string"
                  },
                  "example": "filter=status -eq \"active\""
                },
                {
                  "name": "page_number",
                  "in": "query",
                  "description": "The page number.",
                  "schema": {
                    "type": "integer",
                    "default": 1,
                    "minimum": 1
                  }
                },
                {
                  "name": "page_size",
                  "in": "query",
                  "description": "The maximum number of items in the response.",
                  "schema": {
                    "type": "integer",
                    "default": 100,
                    "minimum": 1
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/HateoasCollectionOfComputerTransferCollection"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 404,
                          "message": "Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.r"
                  ]
                }
              ]
            }
          },
          "/api/sam/v1/licenses/transfers/{applicationId}/computers/{computerId}": {
            "get": {
              "tags": [
                "Transfers"
              ],
              "summary": "Get application license transfers for a computer",
              "description": "Returns a collection of license transfers for specific application on a computer.",
              "operationId": "getComputerTransferDetailsCollection",
              "parameters": [
                {
                  "name": "applicationId",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the application.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                },
                {
                  "name": "computerId",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the computer.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                },
                {
                  "name": "filter",
                  "in": "query",
                  "description": "For more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).",
                  "schema": {
                    "type": "string"
                  },
                  "example": "filter=status -eq \"active\""
                },
                {
                  "name": "page_number",
                  "in": "query",
                  "description": "The page number.",
                  "schema": {
                    "type": "integer",
                    "default": 1,
                    "minimum": 1
                  }
                },
                {
                  "name": "page_size",
                  "in": "query",
                  "description": "The maximum number of items in the response.",
                  "schema": {
                    "type": "integer",
                    "default": 100,
                    "minimum": 1
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/HateoasCollectionOfComputerTransferDetailsCollection"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 404,
                          "message": "Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.r"
                  ]
                }
              ]
            }
          },
          "/api/sam/v1/licenses/transfers/{applicationId}/custom-values": {
            "get": {
              "tags": [
                "Transfers"
              ],
              "summary": "Get custom value license transfers",
              "description": "Returns a collection of custom value license transfers.",
              "operationId": "getCustomValueTransferCollection",
              "parameters": [
                {
                  "name": "applicationId",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the application.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                },
                {
                  "name": "filter",
                  "in": "query",
                  "description": "For more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).",
                  "schema": {
                    "type": "string"
                  },
                  "example": "filter=status -eq \"active\""
                },
                {
                  "name": "page_number",
                  "in": "query",
                  "description": "The page number.",
                  "schema": {
                    "type": "integer",
                    "default": 1,
                    "minimum": 1
                  }
                },
                {
                  "name": "page_size",
                  "in": "query",
                  "description": "The maximum number of items in the response.",
                  "schema": {
                    "type": "integer",
                    "default": 100,
                    "minimum": 1
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/HateoasCollectionOfCustomValueTransferCollection"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 404,
                          "message": "Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.r"
                  ]
                }
              ]
            }
          },
          "/api/sam/v1/licenses/transfers/{applicationId}/custom-values/{customId}": {
            "get": {
              "tags": [
                "Transfers"
              ],
              "summary": "Get application license custom value transfers",
              "description": "Returns a collection of license transfers for a given custom value.",
              "operationId": "getCustomValueTransferDetailsCollection",
              "parameters": [
                {
                  "name": "applicationId",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the application.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                },
                {
                  "name": "customId",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the custom compare value.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                },
                {
                  "name": "filter",
                  "in": "query",
                  "description": "For more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).",
                  "schema": {
                    "type": "string"
                  },
                  "example": "filter=status -eq \"active\""
                },
                {
                  "name": "page_number",
                  "in": "query",
                  "description": "The page number.",
                  "schema": {
                    "type": "integer",
                    "default": 1,
                    "minimum": 1
                  }
                },
                {
                  "name": "page_size",
                  "in": "query",
                  "description": "The maximum number of items in the response.",
                  "schema": {
                    "type": "integer",
                    "default": 100,
                    "minimum": 1
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/HateoasCollectionOfCustomValueTransferDetailsCollection"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 404,
                          "message": "Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.r"
                  ]
                }
              ]
            }
          },
          "/api/sam/v1/licenses/transfers/{applicationId}": {
            "get": {
              "tags": [
                "Transfers"
              ],
              "summary": "Get application license transfers",
              "description": "Returns a collection of license transfers for an application.",
              "operationId": "getLicenseTransferCollection",
              "parameters": [
                {
                  "name": "applicationId",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the application.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                },
                {
                  "name": "filter",
                  "in": "query",
                  "description": "For more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).",
                  "schema": {
                    "type": "string"
                  },
                  "example": "filter=status -eq \"active\""
                },
                {
                  "name": "page_number",
                  "in": "query",
                  "description": "The page number.",
                  "schema": {
                    "type": "integer",
                    "default": 1,
                    "minimum": 1
                  }
                },
                {
                  "name": "page_size",
                  "in": "query",
                  "description": "The maximum number of items in the response.",
                  "schema": {
                    "type": "integer",
                    "default": 100,
                    "minimum": 1
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/HateoasCollectionOfLicenseTransferCollection"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 404,
                          "message": "Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.r"
                  ]
                }
              ]
            }
          },
          "/api/sam/v1/licenses/transfers/{applicationId}/users": {
            "get": {
              "tags": [
                "Transfers"
              ],
              "summary": "Get users license transfer details",
              "description": "Returns a collection of user license transfers.",
              "operationId": "getUserTransferCollection",
              "parameters": [
                {
                  "name": "applicationId",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the application.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                },
                {
                  "name": "filter",
                  "in": "query",
                  "description": "For more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).",
                  "schema": {
                    "type": "string"
                  },
                  "example": "filter=status -eq \"active\""
                },
                {
                  "name": "page_number",
                  "in": "query",
                  "description": "The page number.",
                  "schema": {
                    "type": "integer",
                    "default": 1,
                    "minimum": 1
                  }
                },
                {
                  "name": "page_size",
                  "in": "query",
                  "description": "The maximum number of items in the response.",
                  "schema": {
                    "type": "integer",
                    "default": 100,
                    "minimum": 1
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/HateoasCollectionOfUserTransferCollection"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 404,
                          "message": "Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.r"
                  ]
                }
              ]
            }
          },
          "/api/sam/v1/licenses/transfers/{applicationId}/users/{userId}": {
            "get": {
              "tags": [
                "Transfers"
              ],
              "summary": "Get user license transfer details",
              "description": "Returns a collection of license transfers for a given user.",
              "operationId": "getUserTransferDetailsCollection",
              "parameters": [
                {
                  "name": "applicationId",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the application.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                },
                {
                  "name": "userId",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the user.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                },
                {
                  "name": "filter",
                  "in": "query",
                  "description": "For more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).",
                  "schema": {
                    "type": "string"
                  },
                  "example": "filter=status -eq \"active\""
                },
                {
                  "name": "page_number",
                  "in": "query",
                  "description": "The page number.",
                  "schema": {
                    "type": "integer",
                    "default": 1,
                    "minimum": 1
                  }
                },
                {
                  "name": "page_size",
                  "in": "query",
                  "description": "The maximum number of items in the response.",
                  "schema": {
                    "type": "integer",
                    "default": 100,
                    "minimum": 1
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/HateoasCollectionOfUserTransferDetailsCollection"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 404,
                          "message": "Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.r"
                  ]
                }
              ]
            }
          },
          "/api/sam/v1/licenses/tracking-computers/{computerId}": {
            "get": {
              "tags": [
                "Tracking"
              ],
              "summary": "Get computer license tracking",
              "description": "Returns a collection of application license tracking for a given computer.",
              "operationId": "getApplicationsComputerTrackingCollection",
              "parameters": [
                {
                  "name": "computerId",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the computer.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                },
                {
                  "name": "filter",
                  "in": "query",
                  "description": "For more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).",
                  "schema": {
                    "type": "string"
                  },
                  "example": "filter=status -eq \"active\""
                },
                {
                  "name": "page_number",
                  "in": "query",
                  "description": "The page number.",
                  "schema": {
                    "type": "integer",
                    "default": 1,
                    "minimum": 1
                  }
                },
                {
                  "name": "page_size",
                  "in": "query",
                  "description": "The maximum number of items in the response.",
                  "schema": {
                    "type": "integer",
                    "default": 100,
                    "minimum": 1
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/HateoasCollectionOfApplicationComputerTrackingCollection"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 404,
                          "message": "Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.r"
                  ]
                }
              ]
            }
          },
          "/api/sam/v1/licenses/tracking/{applicationId}/computers": {
            "get": {
              "tags": [
                "Tracking"
              ],
              "summary": "Get computer license tracking for a given application",
              "description": "Returns a collection of computer license tracking.",
              "operationId": "getComputerTrackingCollection",
              "parameters": [
                {
                  "name": "applicationId",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the application.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                },
                {
                  "name": "filter",
                  "in": "query",
                  "description": "For more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).",
                  "schema": {
                    "type": "string"
                  },
                  "example": "filter=status -eq \"active\""
                },
                {
                  "name": "page_number",
                  "in": "query",
                  "description": "The page number.",
                  "schema": {
                    "type": "integer",
                    "default": 1,
                    "minimum": 1
                  }
                },
                {
                  "name": "page_size",
                  "in": "query",
                  "description": "The maximum number of items in the response.",
                  "schema": {
                    "type": "integer",
                    "default": 100,
                    "minimum": 1
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/HateoasCollectionOfComputerTrackingCollection"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 404,
                          "message": "Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.r"
                  ]
                }
              ]
            }
          },
          "/api/sam/v1/licenses/tracking/{applicationId}/computers/{computerId}": {
            "get": {
              "tags": [
                "Tracking"
              ],
              "summary": "Get application license tracking for a computer",
              "description": "Returns a collection of application license tracking for a given computer.",
              "operationId": "getComputerTrackingDetailsCollection",
              "parameters": [
                {
                  "name": "applicationId",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the application.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                },
                {
                  "name": "computerId",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the computer.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                },
                {
                  "name": "filter",
                  "in": "query",
                  "description": "For more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).",
                  "schema": {
                    "type": "string"
                  },
                  "example": "filter=status -eq \"active\""
                },
                {
                  "name": "page_number",
                  "in": "query",
                  "description": "The page number.",
                  "schema": {
                    "type": "integer",
                    "default": 1,
                    "minimum": 1
                  }
                },
                {
                  "name": "page_size",
                  "in": "query",
                  "description": "The maximum number of items in the response.",
                  "schema": {
                    "type": "integer",
                    "default": 100,
                    "minimum": 1
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/HateoasCollectionOfComputerTrackingDetailsCollection"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 404,
                          "message": "Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.r"
                  ]
                }
              ]
            }
          },
          "/api/sam/v1/licenses/tracking/{applicationId}": {
            "get": {
              "tags": [
                "Tracking"
              ],
              "summary": "Get application license tracking details",
              "description": "Returns a collection of license tracking for an application.",
              "operationId": "getSiteAssignment",
              "parameters": [
                {
                  "name": "applicationId",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the application.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                },
                {
                  "name": "filter",
                  "in": "query",
                  "description": "For more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).",
                  "schema": {
                    "type": "string"
                  },
                  "example": "filter=status -eq \"active\""
                },
                {
                  "name": "page_number",
                  "in": "query",
                  "description": "The page number.",
                  "schema": {
                    "type": "integer",
                    "default": 1,
                    "minimum": 1
                  }
                },
                {
                  "name": "page_size",
                  "in": "query",
                  "description": "The maximum number of items in the response.",
                  "schema": {
                    "type": "integer",
                    "default": 100,
                    "minimum": 1
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/HateoasCollectionOfLicenseTracking"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 404,
                          "message": "Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.r"
                  ]
                }
              ]
            }
          },
          "/api/sam/v1/licenses/tracking/{applicationId}/users": {
            "get": {
              "tags": [
                "Tracking"
              ],
              "summary": "Get user license tracking for application",
              "description": "Returns a collection of users license tracking.",
              "operationId": "getUserTrackingCollection",
              "parameters": [
                {
                  "name": "applicationId",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the application.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                },
                {
                  "name": "filter",
                  "in": "query",
                  "description": "For more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).",
                  "schema": {
                    "type": "string"
                  },
                  "example": "filter=status -eq \"active\""
                },
                {
                  "name": "page_number",
                  "in": "query",
                  "description": "The page number.",
                  "schema": {
                    "type": "integer",
                    "default": 1,
                    "minimum": 1
                  }
                },
                {
                  "name": "page_size",
                  "in": "query",
                  "description": "The maximum number of items in the response.",
                  "schema": {
                    "type": "integer",
                    "default": 100,
                    "minimum": 1
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/HateoasCollectionOfUserTrackingCollection"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 404,
                          "message": "Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.r"
                  ]
                }
              ]
            }
          },
          "/api/sam/v1/licenses/tracking/{applicationId}/users/{userId}": {
            "get": {
              "tags": [
                "Tracking"
              ],
              "summary": "Get user license tracking for application",
              "description": "Returns a collection of license tracking for a given user.",
              "operationId": "getUserTrackingDetailsCollection",
              "parameters": [
                {
                  "name": "applicationId",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the application.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                },
                {
                  "name": "userId",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the user.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                },
                {
                  "name": "filter",
                  "in": "query",
                  "description": "For more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).",
                  "schema": {
                    "type": "string"
                  },
                  "example": "filter=status -eq \"active\""
                },
                {
                  "name": "page_number",
                  "in": "query",
                  "description": "The page number.",
                  "schema": {
                    "type": "integer",
                    "default": 1,
                    "minimum": 1
                  }
                },
                {
                  "name": "page_size",
                  "in": "query",
                  "description": "The maximum number of items in the response.",
                  "schema": {
                    "type": "integer",
                    "default": 100,
                    "minimum": 1
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/HateoasCollectionOfUserTrackingDetailsCollection"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 404,
                          "message": "Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.r"
                  ]
                }
              ]
            }
          },
          "/api/sam/v1/licenses-policies/{policyId}/fields": {
            "get": {
              "tags": [
                "Policies"
              ],
              "summary": "Get license policy fields",
              "description": "Returns a collection of license policy fields.",
              "operationId": "getLicensePolicyFieldCollection",
              "parameters": [
                {
                  "name": "policyId",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the policy.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                },
                {
                  "name": "filter",
                  "in": "query",
                  "description": "For more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).",
                  "schema": {
                    "type": "string"
                  },
                  "example": "filter=status -eq \"active\""
                },
                {
                  "name": "page_number",
                  "in": "query",
                  "description": "The page number.",
                  "schema": {
                    "type": "integer",
                    "default": 1,
                    "minimum": 1
                  }
                },
                {
                  "name": "page_size",
                  "in": "query",
                  "description": "The maximum number of items in the response.",
                  "schema": {
                    "type": "integer",
                    "default": 100,
                    "minimum": 1
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/HateoasCollectionOfLicensePolicyFieldCollection"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 404,
                          "message": "Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.r"
                  ]
                }
              ]
            }
          },
          "/api/sam/v1/licenses-policies/{policyId}/fields/{fieldId}": {
            "get": {
              "tags": [
                "Policies"
              ],
              "summary": "Get license policy field details",
              "description": "Returns the details of a license policy field.",
              "operationId": "getLicensePolicyField",
              "parameters": [
                {
                  "name": "policyId",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the policy.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                },
                {
                  "name": "fieldId",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the policy field.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/LicensePolicyField"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 404,
                          "message": "Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.r"
                  ]
                }
              ]
            }
          },
          "/api/sam/v1/licenses-policies": {
            "get": {
              "tags": [
                "Policies"
              ],
              "summary": "Get license policies",
              "description": "Returns a collection of license policies.",
              "operationId": "getPolicyCollection",
              "parameters": [
                {
                  "name": "filter",
                  "in": "query",
                  "description": "For more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).",
                  "schema": {
                    "type": "string"
                  },
                  "example": "filter=status -eq \"active\""
                },
                {
                  "name": "page_number",
                  "in": "query",
                  "description": "The page number.",
                  "schema": {
                    "type": "integer",
                    "default": 1,
                    "minimum": 1
                  }
                },
                {
                  "name": "page_size",
                  "in": "query",
                  "description": "The maximum number of items in the response.",
                  "schema": {
                    "type": "integer",
                    "default": 100,
                    "minimum": 1
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/HateoasCollectionOfPolicy"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.r"
                  ]
                }
              ]
            }
          },
          "/api/sam/v1/licenses-policies/{policyId}": {
            "get": {
              "tags": [
                "Policies"
              ],
              "summary": "Get license policy details",
              "description": "Returns the details of a license policy.",
              "operationId": "getPolicy",
              "parameters": [
                {
                  "name": "policyId",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the policy.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/Policy"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 404,
                          "message": "Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.r"
                  ]
                }
              ]
            }
          },
          "/api/sam/v1/licenses/maintenance-periods": {
            "get": {
              "tags": [
                "Periods"
              ],
              "summary": "Get maintenance and support periods",
              "description": "Returns a collection of maintenance periods.",
              "operationId": "getLicenseMaintenancePeriods",
              "parameters": [
                {
                  "name": "filter",
                  "in": "query",
                  "description": "For more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).",
                  "schema": {
                    "type": "string"
                  },
                  "example": "filter=status -eq \"active\""
                },
                {
                  "name": "page_number",
                  "in": "query",
                  "description": "The page number.",
                  "schema": {
                    "type": "integer",
                    "default": 1,
                    "minimum": 1
                  }
                },
                {
                  "name": "page_size",
                  "in": "query",
                  "description": "The maximum number of items in the response.",
                  "schema": {
                    "type": "integer",
                    "default": 100,
                    "minimum": 1
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/HateoasCollectionOfMaintenancePeriodCollection"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.r"
                  ]
                }
              ]
            }
          },
          "/api/sam/v1/licenses/{id}/maintenance-periods": {
            "get": {
              "tags": [
                "Periods"
              ],
              "summary": "Get maintenance and support periods",
              "description": "Returns a collection of maintenance periods.",
              "operationId": "getLicenseMaintenancePeriodsByLicenseId",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the license.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                },
                {
                  "name": "filter",
                  "in": "query",
                  "description": "For more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).",
                  "schema": {
                    "type": "string"
                  },
                  "example": "filter=status -eq \"active\""
                },
                {
                  "name": "page_number",
                  "in": "query",
                  "description": "The page number.",
                  "schema": {
                    "type": "integer",
                    "default": 1,
                    "minimum": 1
                  }
                },
                {
                  "name": "page_size",
                  "in": "query",
                  "description": "The maximum number of items in the response.",
                  "schema": {
                    "type": "integer",
                    "default": 100,
                    "minimum": 1
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/HateoasCollectionOfMaintenancePeriodCollection"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 404,
                          "message": "Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.r"
                  ]
                }
              ]
            },
            "post": {
              "tags": [
                "Periods"
              ],
              "summary": "Add maintenance period",
              "description": "Creates a maintenance period.",
              "operationId": "addMaintenancePeriod",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the license.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/MaintenancePeriodRequest"
                    }
                  }
                }
              },
              "responses": {
                "201": {
                  "description": "Created: Your request created something new. Usually, this is a call that used the POST method and will allow a GET method to retrieve it later.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CreatedHateoasResponse"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 404,
                          "message": "Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.crud"
                  ]
                }
              ]
            },
            "put": {
              "tags": [
                "Periods"
              ],
              "summary": "Replace a collection of maintenance periods",
              "description": "Replaces a collection of maintenance periods.",
              "operationId": "replaceMaintenancePeriods",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the license.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/ListOfMaintenancePeriodRequest"
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/HateoasCollectionOfMaintenancePeriodCollection"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 404,
                          "message": "Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.crud"
                  ]
                }
              ]
            },
            "delete": {
              "tags": [
                "Periods"
              ],
              "summary": "Delete the given maintenance periods",
              "description": "Removes the given maintenance periods.",
              "operationId": "deleteMaintenancePeriods",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the license.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                }
              ],
              "responses": {
                "204": {
                  "description": "No Content: Your request succeeded, but the response message was empty."
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 404,
                          "message": "Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.crud"
                  ]
                }
              ]
            }
          },
          "/api/sam/v1/licenses/{id}/maintenance-periods/{periodId}": {
            "put": {
              "tags": [
                "Periods"
              ],
              "summary": "Replace a maintenance period",
              "description": "Replaces a maintenance period.",
              "operationId": "replaceMaintenancePeriod",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the license.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                },
                {
                  "name": "periodId",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the maintenance period.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/MaintenancePeriodRequest"
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/MaintenancePeriod"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 404,
                          "message": "Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.crud"
                  ]
                }
              ]
            },
            "delete": {
              "tags": [
                "Periods"
              ],
              "summary": "Delete the given maintenance period",
              "description": "Removes the given maintenance period.",
              "operationId": "deleteMaintenancePeriod",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the license.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                },
                {
                  "name": "periodId",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the maintenance period.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                }
              ],
              "responses": {
                "204": {
                  "description": "No Content: Your request succeeded, but the response message was empty."
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 404,
                          "message": "Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.crud"
                  ]
                }
              ]
            }
          },
          "/api/sam/v1/licenses": {
            "get": {
              "tags": [
                "Licenses"
              ],
              "summary": "Get licenses",
              "description": "Returns a collection of licenses.",
              "operationId": "getLicenseCollection",
              "parameters": [
                {
                  "name": "filter",
                  "in": "query",
                  "description": "For more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).",
                  "schema": {
                    "type": "string"
                  },
                  "example": "filter=status -eq \"active\""
                },
                {
                  "name": "page_number",
                  "in": "query",
                  "description": "The page number.",
                  "schema": {
                    "type": "integer",
                    "default": 1,
                    "minimum": 1
                  }
                },
                {
                  "name": "page_size",
                  "in": "query",
                  "description": "The maximum number of items in the response.",
                  "schema": {
                    "type": "integer",
                    "default": 100,
                    "minimum": 1
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/HateoasCollectionOfLicenseCollection"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.r"
                  ]
                }
              ]
            },
            "post": {
              "tags": [
                "Licenses"
              ],
              "summary": "Add license",
              "description": "Creates a license.",
              "operationId": "addLicense",
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/LicenseRequest"
                    }
                  }
                }
              },
              "responses": {
                "201": {
                  "description": "Created: Your request created something new. Usually, this is a call that used the POST method and will allow a GET method to retrieve it later.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/License"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.crud"
                  ]
                }
              ]
            }
          },
          "/api/sam/v1/licenses/{id}": {
            "get": {
              "tags": [
                "Licenses"
              ],
              "summary": "Get license details",
              "description": "Returns the details of a license.",
              "operationId": "getLicenseById",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the license.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/License"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 404,
                          "message": "Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.r"
                  ]
                }
              ]
            },
            "put": {
              "tags": [
                "Licenses"
              ],
              "summary": "Replace a license",
              "description": "Replaces a license.",
              "operationId": "replaceLicense",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the license.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/LicenseRequest"
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/License"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 404,
                          "message": "Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.crud"
                  ]
                }
              ]
            },
            "delete": {
              "tags": [
                "Licenses"
              ],
              "summary": "Delete license",
              "description": "Removes the given license.",
              "operationId": "deleteLicense",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the license.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                }
              ],
              "responses": {
                "204": {
                  "description": "No Content: Your request succeeded, but the response message was empty."
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 404,
                          "message": "Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.crud"
                  ]
                }
              ]
            }
          },
          "/api/sam/v1/licenses-entitlements": {
            "get": {
              "tags": [
                "Entitlements"
              ],
              "summary": "Get license entitlements",
              "description": "Returns a collection of license entitlements.",
              "operationId": "getLicenseEntitlementCollection",
              "parameters": [
                {
                  "name": "filter",
                  "in": "query",
                  "description": "For more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).",
                  "schema": {
                    "type": "string"
                  },
                  "example": "filter=status -eq \"active\""
                },
                {
                  "name": "page_number",
                  "in": "query",
                  "description": "The page number.",
                  "schema": {
                    "type": "integer",
                    "default": 1,
                    "minimum": 1
                  }
                },
                {
                  "name": "page_size",
                  "in": "query",
                  "description": "The maximum number of items in the response.",
                  "schema": {
                    "type": "integer",
                    "default": 100,
                    "minimum": 1
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/HateoasCollectionOfLicenseEntitlement"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.r"
                  ]
                }
              ]
            }
          },
          "/api/sam/v1/licenses/entitlements/computers": {
            "get": {
              "tags": [
                "Entitlements"
              ],
              "summary": "Get computers applications entitlements",
              "description": "Returns a collection of computers and applications entitlements.",
              "operationId": "getComputerApplicationEntitlementCollection",
              "parameters": [
                {
                  "name": "filter",
                  "in": "query",
                  "description": "For more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).",
                  "schema": {
                    "type": "string"
                  },
                  "example": "filter=status -eq \"active\""
                },
                {
                  "name": "page_number",
                  "in": "query",
                  "description": "The page number.",
                  "schema": {
                    "type": "integer",
                    "default": 1,
                    "minimum": 1
                  }
                },
                {
                  "name": "page_size",
                  "in": "query",
                  "description": "The maximum number of items in the response.",
                  "schema": {
                    "type": "integer",
                    "default": 100,
                    "minimum": 1
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/HateoasCollectionOfComputerApplicationEntitlement"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.r"
                  ]
                }
              ]
            }
          },
          "/api/sam/v1/licenses/entitlements/entitlement-states": {
            "get": {
              "tags": [
                "Entitlements"
              ],
              "summary": "Get license entitlement states",
              "description": "Returns a collection of entitlements states.",
              "operationId": "getEntitlementStateCollection",
              "parameters": [
                {
                  "name": "page_number",
                  "in": "query",
                  "description": "The page number.",
                  "schema": {
                    "type": "integer",
                    "default": 1,
                    "minimum": 1
                  }
                },
                {
                  "name": "page_size",
                  "in": "query",
                  "description": "The maximum number of items in the response.",
                  "schema": {
                    "type": "integer",
                    "default": 100,
                    "minimum": 1
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/HateoasCollectionOfEntitlementState"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.r"
                  ]
                }
              ]
            }
          },
          "/api/sam/v1/licenses/entitlements/users": {
            "get": {
              "tags": [
                "Entitlements"
              ],
              "summary": "Get user license entitlements",
              "description": "Returns a collection of user entitlements.",
              "operationId": "getUserApplicationEntitlementCollection",
              "parameters": [
                {
                  "name": "filter",
                  "in": "query",
                  "description": "For more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).",
                  "schema": {
                    "type": "string"
                  },
                  "example": "filter=status -eq \"active\""
                },
                {
                  "name": "page_number",
                  "in": "query",
                  "description": "The page number.",
                  "schema": {
                    "type": "integer",
                    "default": 1,
                    "minimum": 1
                  }
                },
                {
                  "name": "page_size",
                  "in": "query",
                  "description": "The maximum number of items in the response.",
                  "schema": {
                    "type": "integer",
                    "default": 100,
                    "minimum": 1
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/HateoasCollectionOfUserApplicationEntitlement"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.r"
                  ]
                }
              ]
            }
          },
          "/api/sam/v1/licenses-extended-coverage-types": {
            "get": {
              "tags": [
                "Coverage"
              ],
              "summary": "Get licenses extended coverage types",
              "description": "Returns a collection of extended coverage types.",
              "operationId": "getExtendedCoverageTypeCollection",
              "parameters": [
                {
                  "name": "filter",
                  "in": "query",
                  "description": "For more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).",
                  "schema": {
                    "type": "string"
                  },
                  "example": "filter=status -eq \"active\""
                },
                {
                  "name": "page_number",
                  "in": "query",
                  "description": "The page number.",
                  "schema": {
                    "type": "integer",
                    "default": 1,
                    "minimum": 1
                  }
                },
                {
                  "name": "page_size",
                  "in": "query",
                  "description": "The maximum number of items in the response.",
                  "schema": {
                    "type": "integer",
                    "default": 100,
                    "minimum": 1
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/HateoasCollectionOfExtendedCoverageType"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.r"
                  ]
                }
              ]
            }
          },
          "/api/sam/v1/extended-coverage": {
            "get": {
              "tags": [
                "Coverage"
              ],
              "summary": "Get extended coverages",
              "description": "Returns a collection of extended coverages.",
              "operationId": "getLicenseExtendedCoverageCollection",
              "parameters": [
                {
                  "name": "filter",
                  "in": "query",
                  "description": "For more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).",
                  "schema": {
                    "type": "string"
                  },
                  "example": "filter=status -eq \"active\""
                },
                {
                  "name": "page_number",
                  "in": "query",
                  "description": "The page number.",
                  "schema": {
                    "type": "integer",
                    "default": 1,
                    "minimum": 1
                  }
                },
                {
                  "name": "page_size",
                  "in": "query",
                  "description": "The maximum number of items in the response.",
                  "schema": {
                    "type": "integer",
                    "default": 100,
                    "minimum": 1
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/HateoasCollectionOfLicenseExtendedCoverage"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.r"
                  ]
                }
              ]
            }
          },
          "/api/sam/v1/extended-coverage/{coverageId}": {
            "get": {
              "tags": [
                "Coverage"
              ],
              "summary": "Get extended coverage",
              "description": "Returns the details of an extended coverage.",
              "operationId": "getLicenseExtendedCoverageDetails",
              "parameters": [
                {
                  "name": "coverageId",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the coverage.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/LicenseExtendedCoverage"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 404,
                          "message": "Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.r"
                  ]
                }
              ]
            }
          },
          "/api/sam/v1/licenses/{id}/costs": {
            "get": {
              "tags": [
                "Costs"
              ],
              "summary": "Get license costs",
              "description": "Returns a collection of license costs.",
              "operationId": "getLicenseCostCollection",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the license.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                },
                {
                  "name": "filter",
                  "in": "query",
                  "description": "For more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).",
                  "schema": {
                    "type": "string"
                  },
                  "example": "filter=status -eq \"active\""
                },
                {
                  "name": "page_number",
                  "in": "query",
                  "description": "The page number.",
                  "schema": {
                    "type": "integer",
                    "default": 1,
                    "minimum": 1
                  }
                },
                {
                  "name": "page_size",
                  "in": "query",
                  "description": "The maximum number of items in the response.",
                  "schema": {
                    "type": "integer",
                    "default": 100,
                    "minimum": 1
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/HateoasCollectionOfLicenseCost"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 404,
                          "message": "Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.r"
                  ]
                }
              ]
            }
          },
          "/api/sam/v1/licenses/{id}/costs/{organizationId}": {
            "get": {
              "tags": [
                "Costs"
              ],
              "summary": "Get a license costs for an organization",
              "description": "Returns the details of a license costs for an organization.",
              "operationId": "getLicenseCost",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the license.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                },
                {
                  "name": "organizationId",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the organization.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/LicenseCost"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 404,
                          "message": "Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.r"
                  ]
                }
              ]
            }
          },
          "/api/sam/v1/licenses/{id}/costs-summary": {
            "get": {
              "tags": [
                "Costs"
              ],
              "summary": "Get a license costs summary",
              "description": "Returns the details of a license costs.",
              "operationId": "getLicenseCostSummary",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the license.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/LicenseCostSummary"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 404,
                          "message": "Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.r"
                  ]
                }
              ]
            }
          },
          "/api/sam/v1/compliance/summary/{applicationId}/allocation": {
            "get": {
              "tags": [
                "Compliance"
              ],
              "summary": "Get compliance allocation summary",
              "description": "Returns a collection of compliance allocations for an application.",
              "operationId": "getAllocationSummaryCollection",
              "parameters": [
                {
                  "name": "applicationId",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the application.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/HateoasCollectionOfAllocationSummaryCollectionItem"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 404,
                          "message": "Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.r"
                  ]
                }
              ]
            }
          },
          "/api/sam/v1/compliance/summary/{applicationId}": {
            "get": {
              "tags": [
                "Compliance"
              ],
              "summary": "Get compliance summary",
              "description": "Returns a collection of application compliance summary.",
              "operationId": "getComplianceSummaryCollection",
              "parameters": [
                {
                  "name": "applicationId",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the application.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/HateoasCollectionOfComplianceSummaryCollection"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 404,
                          "message": "Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.r"
                  ]
                }
              ]
            }
          },
          "/api/sam/v1/compliance/summary/{applicationId}/usage": {
            "get": {
              "tags": [
                "Compliance"
              ],
              "summary": "Get compliance usage summary",
              "description": "Returns a collection of application compliance usage summary.",
              "operationId": "getComplianceSummaryUsageCollection",
              "parameters": [
                {
                  "name": "applicationId",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the application.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/HateoasCollectionOfComplianceSummaryUsageCollection"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 404,
                          "message": "Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.r"
                  ]
                }
              ]
            }
          },
          "/api/sam/v1/assignment-types": {
            "get": {
              "tags": [
                "Assignments"
              ],
              "summary": "Get assignment types",
              "description": "Returns a collection of assignment types.",
              "operationId": "getAssignmentTypesCollection",
              "parameters": [
                {
                  "name": "filter",
                  "in": "query",
                  "description": "For more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).",
                  "schema": {
                    "type": "string"
                  },
                  "example": "filter=status -eq \"active\""
                },
                {
                  "name": "page_number",
                  "in": "query",
                  "description": "The page number.",
                  "schema": {
                    "type": "integer",
                    "default": 1,
                    "minimum": 1
                  }
                },
                {
                  "name": "page_size",
                  "in": "query",
                  "description": "The maximum number of items in the response.",
                  "schema": {
                    "type": "integer",
                    "default": 100,
                    "minimum": 1
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/HateoasCollectionOfAssignmentTypeCollection"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.r"
                  ]
                }
              ]
            }
          },
          "/api/sam/v1/licenses/{id}/assignments/computers": {
            "get": {
              "tags": [
                "Assignments"
              ],
              "summary": "Get license assignments to computers",
              "description": "Returns a collection of a license's assignments to computers.",
              "operationId": "getComputerAssignmentCollection",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the license.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                },
                {
                  "name": "filter",
                  "in": "query",
                  "description": "For more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).",
                  "schema": {
                    "type": "string"
                  },
                  "example": "filter=status -eq \"active\""
                },
                {
                  "name": "page_number",
                  "in": "query",
                  "description": "The page number.",
                  "schema": {
                    "type": "integer",
                    "default": 1,
                    "minimum": 1
                  }
                },
                {
                  "name": "page_size",
                  "in": "query",
                  "description": "The maximum number of items in the response.",
                  "schema": {
                    "type": "integer",
                    "default": 100,
                    "minimum": 1
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/HateoasCollectionOfComputerAssignment"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 404,
                          "message": "Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.r"
                  ]
                }
              ]
            },
            "post": {
              "tags": [
                "Assignments"
              ],
              "summary": "Add license assignment to computer",
              "description": "Creates a license assignment to computer.",
              "operationId": "addComputerAssignment",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the license.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/ComputerAssignmentRequest"
                    }
                  }
                }
              },
              "responses": {
                "201": {
                  "description": "Created: Your request created something new. Usually, this is a call that used the POST method and will allow a GET method to retrieve it later.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CreatedHateoasResponse"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 404,
                          "message": "Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.crud"
                  ]
                }
              ]
            },
            "put": {
              "tags": [
                "Assignments"
              ],
              "summary": "Replace license assignments to computers",
              "description": "Replaces the given license’s assignments to computers.",
              "operationId": "replaceComputerAssignmentCollection",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the license.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/ListOfComputerAssignmentRequest"
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/HateoasCollectionOfComputerAssignment"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 404,
                          "message": "Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.crud"
                  ]
                }
              ]
            },
            "delete": {
              "tags": [
                "Assignments"
              ],
              "summary": "Delete license assignments to computers",
              "description": "Removes the given license’s assignments to computers.",
              "operationId": "deleteComputerAssignmentCollection",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the license.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                }
              ],
              "responses": {
                "204": {
                  "description": "No Content: Your request succeeded, but the response message was empty."
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 404,
                          "message": "Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.crud"
                  ]
                }
              ]
            }
          },
          "/api/sam/v1/licenses/{id}/assignments/computers/{assignmentId}": {
            "get": {
              "tags": [
                "Assignments"
              ],
              "summary": "Get license assignment to computer",
              "description": "Returns the details of the given license assignment to computer.",
              "operationId": "getComputerAssignment",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the license.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                },
                {
                  "name": "assignmentId",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the assignment.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ComputerAssignment"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 404,
                          "message": "Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.r"
                  ]
                }
              ]
            },
            "put": {
              "tags": [
                "Assignments"
              ],
              "summary": "Replace license assignment to computer",
              "description": "Replaces the given license assignment to computer.",
              "operationId": "replaceComputerAssignment",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the license.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                },
                {
                  "name": "assignmentId",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the assignment.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/ComputerAssignmentRequest"
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ComputerAssignment"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 404,
                          "message": "Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.crud"
                  ]
                }
              ]
            },
            "delete": {
              "tags": [
                "Assignments"
              ],
              "summary": "Delete license assignment to computer",
              "description": "Removes the given license assignment to computer.",
              "operationId": "deleteComputerAssignment",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the license.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                },
                {
                  "name": "assignmentId",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the assignment.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                }
              ],
              "responses": {
                "204": {
                  "description": "No Content: Your request succeeded, but the response message was empty."
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 404,
                          "message": "Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.crud"
                  ]
                }
              ]
            }
          },
          "/api/sam/v1/licenses/{id}/assignments/datacenters": {
            "get": {
              "tags": [
                "Assignments"
              ],
              "summary": "Get license assignments to datacenters",
              "description": "Returns a collection of a license's assignments to datacenters.",
              "operationId": "getDatacenterAssignmentCollection",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the license.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                },
                {
                  "name": "filter",
                  "in": "query",
                  "description": "For more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).",
                  "schema": {
                    "type": "string"
                  },
                  "example": "filter=status -eq \"active\""
                },
                {
                  "name": "page_number",
                  "in": "query",
                  "description": "The page number.",
                  "schema": {
                    "type": "integer",
                    "default": 1,
                    "minimum": 1
                  }
                },
                {
                  "name": "page_size",
                  "in": "query",
                  "description": "The maximum number of items in the response.",
                  "schema": {
                    "type": "integer",
                    "default": 100,
                    "minimum": 1
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/HateoasCollectionOfDatacenterAssignment"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 404,
                          "message": "Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.r"
                  ]
                }
              ]
            },
            "post": {
              "tags": [
                "Assignments"
              ],
              "summary": "Add license assignment to datacenter",
              "description": "Creates a license assignment to datacenter.",
              "operationId": "addDatacenterAssignment",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the license.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/DatacenterAssignmentRequest"
                    }
                  }
                }
              },
              "responses": {
                "201": {
                  "description": "Created: Your request created something new. Usually, this is a call that used the POST method and will allow a GET method to retrieve it later.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CreatedHateoasResponse"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 404,
                          "message": "Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.crud"
                  ]
                }
              ]
            },
            "put": {
              "tags": [
                "Assignments"
              ],
              "summary": "Replace license assignments to datacenters",
              "description": "Replaces the given license’s assignments to datacenters.",
              "operationId": "replaceDataCenterAssignmentCollection",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the license.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/ListOfDatacenterAssignmentRequest"
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/HateoasCollectionOfDatacenterAssignment"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 404,
                          "message": "Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.crud"
                  ]
                }
              ]
            },
            "delete": {
              "tags": [
                "Assignments"
              ],
              "summary": "Delete license assignments to datacenters",
              "description": "Removes the given license’s assignments to datacenters.",
              "operationId": "deleteDataCenterAssignmentCollection",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the license.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                }
              ],
              "responses": {
                "204": {
                  "description": "No Content: Your request succeeded, but the response message was empty."
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 404,
                          "message": "Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.crud"
                  ]
                }
              ]
            }
          },
          "/api/sam/v1/licenses/{id}/assignments/datacenters/{assignmentId}": {
            "get": {
              "tags": [
                "Assignments"
              ],
              "summary": "Get license assignment to datacenter",
              "description": "Returns the details of the given license assignment to datacenter.",
              "operationId": "getDatacenterAssignment",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the license.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                },
                {
                  "name": "assignmentId",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the assignment.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                },
                {
                  "name": "filter",
                  "in": "query",
                  "description": "For more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).",
                  "schema": {
                    "type": "string"
                  },
                  "example": "filter=status -eq \"active\""
                },
                {
                  "name": "page_number",
                  "in": "query",
                  "description": "The page number.",
                  "schema": {
                    "type": "integer",
                    "default": 1,
                    "minimum": 1
                  }
                },
                {
                  "name": "page_size",
                  "in": "query",
                  "description": "The maximum number of items in the response.",
                  "schema": {
                    "type": "integer",
                    "default": 100,
                    "minimum": 1
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/DatacenterAssignment"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 404,
                          "message": "Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.r"
                  ]
                }
              ]
            },
            "put": {
              "tags": [
                "Assignments"
              ],
              "summary": "Replace license assignment to datacenter",
              "description": "Replaces the given license assignment to datacenter.",
              "operationId": "replaceDatacenterAssignment",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the license.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                },
                {
                  "name": "assignmentId",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the assignment.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/DatacenterAssignmentRequest"
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/DatacenterAssignment"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 404,
                          "message": "Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.crud"
                  ]
                }
              ]
            },
            "delete": {
              "tags": [
                "Assignments"
              ],
              "summary": "Delete license assignment to datacenter",
              "description": "Removes the given license assignment to datacenter.",
              "operationId": "deleteDatacenterAssignment",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the license.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                },
                {
                  "name": "assignmentId",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the assignment.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                }
              ],
              "responses": {
                "204": {
                  "description": "No Content: Your request succeeded, but the response message was empty."
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 404,
                          "message": "Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.crud"
                  ]
                }
              ]
            }
          },
          "/api/sam/v1/licenses/{id}/assignments-summary": {
            "get": {
              "tags": [
                "Assignments"
              ],
              "summary": "Get license assignments summary",
              "description": "Returns the details of a license's assignments.",
              "operationId": "getLicenseAssignmentDetails",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the license.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/LicenseAssignmentDetails"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 404,
                          "message": "Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.r"
                  ]
                }
              ]
            }
          },
          "/api/sam/v1/licenses/{id}/assignments/organizations": {
            "get": {
              "tags": [
                "Assignments"
              ],
              "summary": "Get license assignments to organizations",
              "description": "Returns a collection of a license's assignments to organizations.",
              "operationId": "getOrganizationAssignmentCollection",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the license.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                },
                {
                  "name": "filter",
                  "in": "query",
                  "description": "For more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).",
                  "schema": {
                    "type": "string"
                  },
                  "example": "filter=status -eq \"active\""
                },
                {
                  "name": "page_number",
                  "in": "query",
                  "description": "The page number.",
                  "schema": {
                    "type": "integer",
                    "default": 1,
                    "minimum": 1
                  }
                },
                {
                  "name": "page_size",
                  "in": "query",
                  "description": "The maximum number of items in the response.",
                  "schema": {
                    "type": "integer",
                    "default": 100,
                    "minimum": 1
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/HateoasCollectionOfOrganizationAssignment"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 404,
                          "message": "Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.r"
                  ]
                }
              ]
            },
            "post": {
              "tags": [
                "Assignments"
              ],
              "summary": "Add license assignment to organization",
              "description": "Creates a license assignment to organization.",
              "operationId": "addOrganizationAssignment",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the license.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/OrganizationAssignmentRequest"
                    }
                  }
                }
              },
              "responses": {
                "201": {
                  "description": "Created: Your request created something new. Usually, this is a call that used the POST method and will allow a GET method to retrieve it later.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CreatedHateoasResponse"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 404,
                          "message": "Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.crud"
                  ]
                }
              ]
            },
            "put": {
              "tags": [
                "Assignments"
              ],
              "summary": "Replace license assignments to organizations",
              "description": "Replaces the given license’s assignments to organizations.",
              "operationId": "replaceOrganizationAssignmentCollection",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the license.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/ListOfOrganizationAssignmentRequest"
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/HateoasCollectionOfOrganizationAssignment"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 404,
                          "message": "Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.crud"
                  ]
                }
              ]
            },
            "delete": {
              "tags": [
                "Assignments"
              ],
              "summary": "Delete license assignments to organizations",
              "description": "Removes the given license’s assignments to organizations.",
              "operationId": "deleteOrganizationAssignmentCollection",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the license.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                }
              ],
              "responses": {
                "204": {
                  "description": "No Content: Your request succeeded, but the response message was empty."
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 404,
                          "message": "Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.crud"
                  ]
                }
              ]
            }
          },
          "/api/sam/v1/licenses/{id}/assignments/organizations/{assignmentId}": {
            "get": {
              "tags": [
                "Assignments"
              ],
              "summary": "Get license assignment to organization",
              "description": "Returns the details of the given license assignment to organization.",
              "operationId": "getOrganizationAssignment",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the license.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                },
                {
                  "name": "assignmentId",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the assignment.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/OrganizationAssignment"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 404,
                          "message": "Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.r"
                  ]
                }
              ]
            },
            "put": {
              "tags": [
                "Assignments"
              ],
              "summary": "Replace license assignment to organization",
              "description": "Replaces the given license assignment to organization.",
              "operationId": "replaceOrganizationAssignment",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the license.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                },
                {
                  "name": "assignmentId",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the assignment.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/OrganizationAssignmentRequest"
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/OrganizationAssignment"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 404,
                          "message": "Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.crud"
                  ]
                }
              ]
            },
            "delete": {
              "tags": [
                "Assignments"
              ],
              "summary": "Delete license assignment to organization",
              "description": "Removes the given license assignment to organization.",
              "operationId": "deleteOrganizationAssignment",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the license.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                },
                {
                  "name": "assignmentId",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the assignment.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                }
              ],
              "responses": {
                "204": {
                  "description": "No Content: Your request succeeded, but the response message was empty."
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 404,
                          "message": "Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.crud"
                  ]
                }
              ]
            }
          },
          "/api/sam/v1/licenses/{id}/assignments/site": {
            "get": {
              "tags": [
                "Assignments"
              ],
              "summary": "Get license assignment to site",
              "description": "Returns the details of the given license’s assignment to site.",
              "operationId": "getSiteAssignment2",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the license.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/SiteAssignment"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 404,
                          "message": "Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.r"
                  ]
                }
              ]
            },
            "post": {
              "tags": [
                "Assignments"
              ],
              "summary": "Add license assignment to site",
              "description": "Creates a license assignment to site.",
              "operationId": "createSiteAssignment",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the license.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/SiteAssignmentRequest"
                    }
                  }
                }
              },
              "responses": {
                "201": {
                  "description": "Created: Your request created something new. Usually, this is a call that used the POST method and will allow a GET method to retrieve it later.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CreatedHateoasResponse"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 404,
                          "message": "Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.crud"
                  ]
                }
              ]
            }
          },
          "/api/sam/v1/licenses/{id}/assignments/site/{assignmentId}": {
            "put": {
              "tags": [
                "Assignments"
              ],
              "summary": "Replace license assignment to site",
              "description": "Replaces the given license assignment to site.",
              "operationId": "replaceSiteAssignment",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the license.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                },
                {
                  "name": "assignmentId",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the assignment.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/SiteAssignmentRequest"
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CreatedHateoasResponse"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 404,
                          "message": "Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.crud"
                  ]
                }
              ]
            },
            "delete": {
              "tags": [
                "Assignments"
              ],
              "summary": "Delete license assignment to site",
              "description": "Removes the given license assignment to site.",
              "operationId": "deleteSiteAssignment",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the license.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                },
                {
                  "name": "assignmentId",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the assignment.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                }
              ],
              "responses": {
                "204": {
                  "description": "No Content: Your request succeeded, but the response message was empty."
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 404,
                          "message": "Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.crud"
                  ]
                }
              ]
            }
          },
          "/api/sam/v1/licenses/{id}/assignments/users": {
            "get": {
              "tags": [
                "Assignments"
              ],
              "summary": "Get license assignments to users",
              "description": "Returns a collection of a license's assignments to users.",
              "operationId": "getUserAssignmentCollection",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the license.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                },
                {
                  "name": "filter",
                  "in": "query",
                  "description": "For more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).",
                  "schema": {
                    "type": "string"
                  },
                  "example": "filter=status -eq \"active\""
                },
                {
                  "name": "page_number",
                  "in": "query",
                  "description": "The page number.",
                  "schema": {
                    "type": "integer",
                    "default": 1,
                    "minimum": 1
                  }
                },
                {
                  "name": "page_size",
                  "in": "query",
                  "description": "The maximum number of items in the response.",
                  "schema": {
                    "type": "integer",
                    "default": 100,
                    "minimum": 1
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/HateoasCollectionOfUserAssignment"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 404,
                          "message": "Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.r"
                  ]
                }
              ]
            },
            "post": {
              "tags": [
                "Assignments"
              ],
              "summary": "Add license assignment to user",
              "description": "Creates a license assignment to user.",
              "operationId": "addUserAssignment",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the license.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/UserAssignmentRequest"
                    }
                  }
                }
              },
              "responses": {
                "201": {
                  "description": "Created: Your request created something new. Usually, this is a call that used the POST method and will allow a GET method to retrieve it later.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CreatedHateoasResponse"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 404,
                          "message": "Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.crud"
                  ]
                }
              ]
            },
            "put": {
              "tags": [
                "Assignments"
              ],
              "summary": "Replace license assignments to users",
              "description": "Replaces the given license’s assignments to users.",
              "operationId": "replaceUserAssignmentCollection",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the license.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/ListOfUserAssignmentRequest"
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/HateoasCollectionOfUserAssignment"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 404,
                          "message": "Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.crud"
                  ]
                }
              ]
            },
            "delete": {
              "tags": [
                "Assignments"
              ],
              "summary": "Delete license assignments to users",
              "description": "Removes the given license’s assignment to users.",
              "operationId": "deleteUserAssignmentCollection",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the license.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                }
              ],
              "responses": {
                "204": {
                  "description": "No Content: Your request succeeded, but the response message was empty."
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 404,
                          "message": "Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.crud"
                  ]
                }
              ]
            }
          },
          "/api/sam/v1/licenses/{id}/assignments/users/{assignmentId}": {
            "get": {
              "tags": [
                "Assignments"
              ],
              "summary": "Get license assignment to user",
              "description": "Returns the details of the given license assignment to user.",
              "operationId": "getUserAssignment",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the license.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                },
                {
                  "name": "assignmentId",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the assignment.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/UserAssignment"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 404,
                          "message": "Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.r"
                  ]
                }
              ]
            },
            "delete": {
              "tags": [
                "Assignments"
              ],
              "summary": "Delete license assignment to user",
              "description": "Removes the given license assignment to user.",
              "operationId": "deleteUserAssignment",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the license.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                },
                {
                  "name": "assignmentId",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the assignment.",
                  "schema": {
                    "type": "string"
                  },
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                }
              ],
              "responses": {
                "204": {
                  "description": "No Content: Your request succeeded, but the response message was empty."
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 400,
                          "message": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request."
                        }
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 404,
                          "message": "Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found."
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      },
                      "example": {
                        "error": {
                          "code": 500,
                          "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.license.crud"
                  ]
                }
              ]
            }
          }
        },
        "components": {
          "schemas": {
            "Pagination": {
              "type": "object",
              "description": "The pagination details.",
              "additionalProperties": false,
              "required": [
                "page_size",
                "page_number"
              ],
              "properties": {
                "page_size": {
                  "type": "integer",
                  "description": "The page size you requested.",
                  "format": "int32",
                  "example": 25
                },
                "page_number": {
                  "type": "integer",
                  "description": "The page number you requested.",
                  "format": "int32",
                  "example": 1
                },
                "total_pages": {
                  "type": "integer",
                  "description": "The total number of pages.",
                  "format": "int32",
                  "nullable": true,
                  "example": 5
                },
                "total_items": {
                  "type": "integer",
                  "description": "The total number of items.",
                  "format": "int32",
                  "nullable": true,
                  "example": 100
                }
              }
            },
            "Link": {
              "type": "object",
              "description": "Represents a hypermedia link referenced from a IResource, according to HATEOAS.",
              "additionalProperties": false,
              "properties": {
                "href": {
                  "type": "string",
                  "description": "The associated relative URL.",
                  "nullable": true,
                  "example": "/api/custom-fields/v1/custom-fields"
                },
                "rel": {
                  "type": "string",
                  "description": "Specifies the relationship between the current document and the linked document/resource.",
                  "nullable": true,
                  "example": "self"
                },
                "method": {
                  "type": "string",
                  "description": "The method to access related resources.",
                  "nullable": true,
                  "example": "GET"
                }
              }
            },
            "HateoasResource": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "_links"
              ],
              "properties": {
                "_links": {
                  "type": "array",
                  "description": "A collection of links to related resources.",
                  "items": {
                    "$ref": "#/components/schemas/Link"
                  }
                }
              }
            },
            "LicenseUpgrade": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/HateoasResource"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "licenseId": {
                      "type": "string",
                      "description": "The unique ID of the license.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "quantity": {
                      "type": "integer",
                      "description": "The quantity.",
                      "format": "int32",
                      "example": 1
                    },
                    "upgradedLicenseId": {
                      "type": "string",
                      "description": "The unique ID of the upgraded license.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "upgradedQuantity": {
                      "type": "integer",
                      "description": "The upgraded quantity.",
                      "format": "int32",
                      "example": 1
                    }
                  }
                }
              ]
            },
            "FilteredResponseOfLicenseUpgrade": {
              "type": "object",
              "description": "Filtered response.",
              "additionalProperties": false,
              "required": [
                "items",
                "pagination"
              ],
              "properties": {
                "items": {
                  "type": "array",
                  "description": "A collection of items.",
                  "items": {
                    "$ref": "#/components/schemas/LicenseUpgrade"
                  }
                },
                "pagination": {
                  "description": "The pagination details.",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  ]
                }
              }
            },
            "HateoasCollectionOfLicenseUpgrade": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/FilteredResponseOfLicenseUpgrade"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "_links"
                  ],
                  "properties": {
                    "_links": {
                      "type": "array",
                      "description": "A collection of links to related resources.",
                      "items": {
                        "$ref": "#/components/schemas/Link"
                      }
                    }
                  }
                }
              ]
            },
            "ErrorResponse": {
              "type": "object",
              "required": [
                "error"
              ],
              "properties": {
                "error": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "Error": {
              "description": "The error details.",
              "type": "object",
              "required": [
                "code",
                "message"
              ],
              "properties": {
                "code": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The HTTP status code."
                },
                "message": {
                  "type": "string",
                  "description": "The error message."
                }
              }
            },
            "ComputerTransferCollection": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/HateoasResource"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "licenseId": {
                      "type": "string",
                      "description": "The unique ID of the license.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "organizationId": {
                      "type": "string",
                      "description": "The unique ID of the organization.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "computerId": {
                      "type": "string",
                      "description": "The unique ID of the computer.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "fromApplicationId": {
                      "type": "string",
                      "description": "The unique ID of the application.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "toApplicationId": {
                      "type": "string",
                      "description": "The unique ID of the application.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    }
                  }
                }
              ]
            },
            "FilteredResponseOfComputerTransferCollection": {
              "type": "object",
              "description": "Filtered response.",
              "additionalProperties": false,
              "required": [
                "items",
                "pagination"
              ],
              "properties": {
                "items": {
                  "type": "array",
                  "description": "A collection of items.",
                  "items": {
                    "$ref": "#/components/schemas/ComputerTransferCollection"
                  }
                },
                "pagination": {
                  "description": "The pagination details.",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  ]
                }
              }
            },
            "HateoasCollectionOfComputerTransferCollection": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/FilteredResponseOfComputerTransferCollection"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "_links"
                  ],
                  "properties": {
                    "_links": {
                      "type": "array",
                      "description": "A collection of links to related resources.",
                      "items": {
                        "$ref": "#/components/schemas/Link"
                      }
                    }
                  }
                }
              ]
            },
            "ComputerTransferDetailsCollection": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/HateoasResource"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The unique ID of the computer transfer.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "metricId": {
                      "type": "string",
                      "description": "The unique ID of the metric.",
                      "format": "guid",
                      "example": "5891a1d8-7fb0-45bd-b1f6-01c943f9c572"
                    },
                    "fromApplicationId": {
                      "type": "string",
                      "description": "The unique ID of the application.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "toApplicationId": {
                      "type": "string",
                      "description": "The unique ID of the application.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "computerId": {
                      "type": "string",
                      "description": "The unique ID of the computer.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "licenseId": {
                      "type": "string",
                      "description": "The unique ID of the license.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "organizationId": {
                      "type": "string",
                      "description": "The unique ID of the organization.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "isUpgrade": {
                      "type": "boolean",
                      "description": "```true``` if is upgrade; otherwise, ```false```.",
                      "example": true
                    },
                    "isDowngrade": {
                      "type": "boolean",
                      "description": "```true``` if is downgrade; otherwise, ```false```.",
                      "example": true
                    },
                    "isCrossEdition": {
                      "type": "boolean",
                      "description": "```true``` if is cross-edition; otherwise, ```false```.",
                      "example": true
                    },
                    "isCrossPlatform": {
                      "type": "boolean",
                      "description": "```true``` if is cross-platform; otherwise, ```false```.",
                      "example": true
                    },
                    "quantity": {
                      "type": "integer",
                      "description": "The transferred quantity.",
                      "format": "int32",
                      "example": 1
                    }
                  }
                }
              ]
            },
            "FilteredResponseOfComputerTransferDetailsCollection": {
              "type": "object",
              "description": "Filtered response.",
              "additionalProperties": false,
              "required": [
                "items",
                "pagination"
              ],
              "properties": {
                "items": {
                  "type": "array",
                  "description": "A collection of items.",
                  "items": {
                    "$ref": "#/components/schemas/ComputerTransferDetailsCollection"
                  }
                },
                "pagination": {
                  "description": "The pagination details.",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  ]
                }
              }
            },
            "HateoasCollectionOfComputerTransferDetailsCollection": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/FilteredResponseOfComputerTransferDetailsCollection"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "_links"
                  ],
                  "properties": {
                    "_links": {
                      "type": "array",
                      "description": "A collection of links to related resources.",
                      "items": {
                        "$ref": "#/components/schemas/Link"
                      }
                    }
                  }
                }
              ]
            },
            "CustomValueTransferCollection": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/HateoasResource"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "customCompareValueId": {
                      "type": "string",
                      "description": "The unique ID of the custom compare value.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "licenseId": {
                      "type": "string",
                      "description": "The unique ID of the license.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "organizationId": {
                      "type": "string",
                      "description": "The unique ID of the organization.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "fromApplicationId": {
                      "type": "string",
                      "description": "The unique ID of the application.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "toApplicationId": {
                      "type": "string",
                      "description": "The unique ID of the application.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    }
                  }
                }
              ]
            },
            "FilteredResponseOfCustomValueTransferCollection": {
              "type": "object",
              "description": "Filtered response.",
              "additionalProperties": false,
              "required": [
                "items",
                "pagination"
              ],
              "properties": {
                "items": {
                  "type": "array",
                  "description": "A collection of items.",
                  "items": {
                    "$ref": "#/components/schemas/CustomValueTransferCollection"
                  }
                },
                "pagination": {
                  "description": "The pagination details.",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  ]
                }
              }
            },
            "HateoasCollectionOfCustomValueTransferCollection": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/FilteredResponseOfCustomValueTransferCollection"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "_links"
                  ],
                  "properties": {
                    "_links": {
                      "type": "array",
                      "description": "A collection of links to related resources.",
                      "items": {
                        "$ref": "#/components/schemas/Link"
                      }
                    }
                  }
                }
              ]
            },
            "UseRightType": {
              "type": "integer",
              "description": "The use rights type.",
              "x-enumFlags": true,
              "x-enumNames": [
                "None",
                "Standard",
                "UpgradeRights",
                "DowngradeRights",
                "CrossEdition",
                "VirtualDesktopAccess",
                "VmSupport",
                "NinetyDayRule",
                "ProcessorLimitations",
                "ProcessorCoreLimitations",
                "NamedComputer",
                "NamedDatacenter",
                "NamedApplicationCluster",
                "NamedUser",
                "Site",
                "CrossPlatform"
              ],
              "enum": [
                0,
                1,
                2,
                4,
                8,
                16,
                32,
                256,
                512,
                1024,
                8192,
                16384,
                32768,
                65536,
                131072,
                262144
              ]
            },
            "CustomValueTransferDetailsCollection": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/HateoasResource"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The unique ID of the custom compare value transfer.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "metricId": {
                      "type": "string",
                      "description": "The unique ID of the metric.",
                      "format": "guid",
                      "example": "5891a1d8-7fb0-45bd-b1f6-01c943f9c572"
                    },
                    "licenseId": {
                      "type": "string",
                      "description": "The unique ID of the license.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "organizationId": {
                      "type": "string",
                      "description": "The unique ID of the organization.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "customCompareValueId": {
                      "type": "string",
                      "description": "The unique ID of the custom compare value.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "fromApplicationId": {
                      "type": "string",
                      "description": "The unique ID of the application.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "toApplicationId": {
                      "type": "string",
                      "description": "The unique ID of the application.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "isUpgrade": {
                      "type": "boolean",
                      "description": "```true``` if is upgrade; otherwise, ```false```.",
                      "example": true
                    },
                    "isDowngrade": {
                      "type": "boolean",
                      "description": "```true``` if is downgrade; otherwise, ```false```.",
                      "example": true
                    },
                    "isCrossEdition": {
                      "type": "boolean",
                      "description": "```true``` if is cross-edition; otherwise, ```false```.",
                      "example": true
                    },
                    "isCrossPlatform": {
                      "type": "boolean",
                      "description": "```true``` if is cross-platform; otherwise, ```false```.",
                      "example": true
                    },
                    "quantity": {
                      "type": "integer",
                      "description": "The transferred quantity.",
                      "format": "int32",
                      "example": 1
                    },
                    "useRights": {
                      "description": "The use right type.",
                      "example": [
                        "Standard"
                      ],
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/UseRightType"
                        }
                      ]
                    }
                  }
                }
              ]
            },
            "FilteredResponseOfCustomValueTransferDetailsCollection": {
              "type": "object",
              "description": "Filtered response.",
              "additionalProperties": false,
              "required": [
                "items",
                "pagination"
              ],
              "properties": {
                "items": {
                  "type": "array",
                  "description": "A collection of items.",
                  "items": {
                    "$ref": "#/components/schemas/CustomValueTransferDetailsCollection"
                  }
                },
                "pagination": {
                  "description": "The pagination details.",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  ]
                }
              }
            },
            "HateoasCollectionOfCustomValueTransferDetailsCollection": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/FilteredResponseOfCustomValueTransferDetailsCollection"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "_links"
                  ],
                  "properties": {
                    "_links": {
                      "type": "array",
                      "description": "A collection of links to related resources.",
                      "items": {
                        "$ref": "#/components/schemas/Link"
                      }
                    }
                  }
                }
              ]
            },
            "LicenseTransferCollection": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/HateoasResource"
                },
                {
                  "type": "object",
                  "description": "A collection of license transfers.",
                  "additionalProperties": false,
                  "properties": {
                    "licenseId": {
                      "type": "string",
                      "description": "The unique ID of the license.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "hasComputerTransfer": {
                      "type": "boolean",
                      "description": "```true``` if has computer transfer; otherwise, ```false```.",
                      "example": true
                    },
                    "hasUserTransfer": {
                      "type": "boolean",
                      "description": "```true``` if has user transfer; otherwise, ```false```.",
                      "example": true
                    },
                    "hasCustomCompareValueTransfer": {
                      "type": "boolean",
                      "description": "```true``` if has custom compare value transfer; otherwise, ```false```.",
                      "example": true
                    }
                  }
                }
              ]
            },
            "FilteredResponseOfLicenseTransferCollection": {
              "type": "object",
              "description": "Filtered response.",
              "additionalProperties": false,
              "required": [
                "items",
                "pagination"
              ],
              "properties": {
                "items": {
                  "type": "array",
                  "description": "A collection of items.",
                  "items": {
                    "$ref": "#/components/schemas/LicenseTransferCollection"
                  }
                },
                "pagination": {
                  "description": "The pagination details.",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  ]
                }
              }
            },
            "HateoasCollectionOfLicenseTransferCollection": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/FilteredResponseOfLicenseTransferCollection"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "_links"
                  ],
                  "properties": {
                    "_links": {
                      "type": "array",
                      "description": "A collection of links to related resources.",
                      "items": {
                        "$ref": "#/components/schemas/Link"
                      }
                    }
                  }
                }
              ]
            },
            "UserTransferCollection": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/HateoasResource"
                },
                {
                  "type": "object",
                  "description": "A collection of application license transfers for user.",
                  "additionalProperties": false,
                  "properties": {
                    "licenseId": {
                      "type": "string",
                      "description": "The unique ID of the license.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "organizationId": {
                      "type": "string",
                      "description": "The unique ID of the organization.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "userId": {
                      "type": "string",
                      "description": "The unique ID of the user.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "fromApplicationId": {
                      "type": "string",
                      "description": "The unique ID of the application.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "toApplicationId": {
                      "type": "string",
                      "description": "The unique ID of the application.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    }
                  }
                }
              ]
            },
            "FilteredResponseOfUserTransferCollection": {
              "type": "object",
              "description": "Filtered response.",
              "additionalProperties": false,
              "required": [
                "items",
                "pagination"
              ],
              "properties": {
                "items": {
                  "type": "array",
                  "description": "A collection of items.",
                  "items": {
                    "$ref": "#/components/schemas/UserTransferCollection"
                  }
                },
                "pagination": {
                  "description": "The pagination details.",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  ]
                }
              }
            },
            "HateoasCollectionOfUserTransferCollection": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/FilteredResponseOfUserTransferCollection"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "_links"
                  ],
                  "properties": {
                    "_links": {
                      "type": "array",
                      "description": "A collection of links to related resources.",
                      "items": {
                        "$ref": "#/components/schemas/Link"
                      }
                    }
                  }
                }
              ]
            },
            "UserTransferDetailsCollection": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/HateoasResource"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The unique ID of the user transfer.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "metricId": {
                      "type": "string",
                      "description": "The unique ID of the metric.",
                      "format": "guid",
                      "example": "5891a1d8-7fb0-45bd-b1f6-01c943f9c572"
                    },
                    "licenseId": {
                      "type": "string",
                      "description": "The unique ID of the license.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "organizationId": {
                      "type": "string",
                      "description": "The unique ID of the organization.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "userId": {
                      "type": "string",
                      "description": "The unique ID of the user.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "fromApplicationId": {
                      "type": "string",
                      "description": "The unique ID of the application.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "toApplicationId": {
                      "type": "string",
                      "description": "The unique ID of the application.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "isUpgrade": {
                      "type": "boolean",
                      "description": "```true``` if is upgrade; otherwise, ```false```.",
                      "example": true
                    },
                    "isDowngrade": {
                      "type": "boolean",
                      "description": "```true``` if is downgrade; otherwise, ```false```.",
                      "example": true
                    },
                    "isCrossPlatform": {
                      "type": "boolean",
                      "description": "```true``` if is cross-platform; otherwise, ```false```.",
                      "example": true
                    },
                    "isCrossEdition": {
                      "type": "boolean",
                      "description": "```true``` if is cross-edition; otherwise, ```false```.",
                      "example": true
                    },
                    "quantity": {
                      "type": "integer",
                      "description": "The transferred quantity.",
                      "format": "int32",
                      "example": 1
                    }
                  }
                }
              ]
            },
            "FilteredResponseOfUserTransferDetailsCollection": {
              "type": "object",
              "description": "Filtered response.",
              "additionalProperties": false,
              "required": [
                "items",
                "pagination"
              ],
              "properties": {
                "items": {
                  "type": "array",
                  "description": "A collection of items.",
                  "items": {
                    "$ref": "#/components/schemas/UserTransferDetailsCollection"
                  }
                },
                "pagination": {
                  "description": "The pagination details.",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  ]
                }
              }
            },
            "HateoasCollectionOfUserTransferDetailsCollection": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/FilteredResponseOfUserTransferDetailsCollection"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "_links"
                  ],
                  "properties": {
                    "_links": {
                      "type": "array",
                      "description": "A collection of links to related resources.",
                      "items": {
                        "$ref": "#/components/schemas/Link"
                      }
                    }
                  }
                }
              ]
            },
            "ApplicationComputerTrackingCollection": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/HateoasResource"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The unique ID of the computer application tracking.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "metricId": {
                      "type": "string",
                      "description": "The unique ID of the metric.",
                      "format": "guid",
                      "example": "5891a1d8-7fb0-45bd-b1f6-01c943f9c572"
                    },
                    "applicationId": {
                      "type": "string",
                      "description": "The unique ID of the application.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "computerId": {
                      "type": "string",
                      "description": "The unique ID of the computer.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "primaryUseRights": {
                      "description": "The primary user rights.",
                      "example": [
                        "NamedComputer"
                      ],
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/UseRightType"
                        }
                      ]
                    }
                  }
                }
              ]
            },
            "FilteredResponseOfApplicationComputerTrackingCollection": {
              "type": "object",
              "description": "Filtered response.",
              "additionalProperties": false,
              "required": [
                "items",
                "pagination"
              ],
              "properties": {
                "items": {
                  "type": "array",
                  "description": "A collection of items.",
                  "items": {
                    "$ref": "#/components/schemas/ApplicationComputerTrackingCollection"
                  }
                },
                "pagination": {
                  "description": "The pagination details.",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  ]
                }
              }
            },
            "HateoasCollectionOfApplicationComputerTrackingCollection": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/FilteredResponseOfApplicationComputerTrackingCollection"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "_links"
                  ],
                  "properties": {
                    "_links": {
                      "type": "array",
                      "description": "A collection of links to related resources.",
                      "items": {
                        "$ref": "#/components/schemas/Link"
                      }
                    }
                  }
                }
              ]
            },
            "ComputerTrackingDetailsCollection": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/HateoasResource"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The unique ID of the computer application tracking.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "metricId": {
                      "type": "string",
                      "description": "The unique ID of the metric.",
                      "format": "guid",
                      "example": "5891a1d8-7fb0-45bd-b1f6-01c943f9c572"
                    },
                    "applicationId": {
                      "type": "string",
                      "description": "The unique ID of the application.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "computerId": {
                      "type": "string",
                      "description": "The unique ID of the computer.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "licenseId": {
                      "type": "string",
                      "description": "The unique ID of the license.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "organizationId": {
                      "type": "string",
                      "description": "The unique ID of the organization.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "coverageTrait": {
                      "type": "integer",
                      "description": "The coverage tait.",
                      "format": "int32",
                      "example": 1
                    },
                    "initialRequirement": {
                      "type": "integer",
                      "description": "The initial requirement.",
                      "format": "int32",
                      "example": 1
                    },
                    "requirement": {
                      "type": "integer",
                      "description": "The requirement.",
                      "format": "int32",
                      "example": 1
                    },
                    "receivedCoverage": {
                      "type": "integer",
                      "description": "The received coverage.",
                      "format": "int32",
                      "example": 1
                    },
                    "primaryUseRights": {
                      "description": "The primary user rights.",
                      "example": [
                        "NamedComputer"
                      ],
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/UseRightType"
                        }
                      ]
                    },
                    "fullUseRights": {
                      "description": "The full use rights.",
                      "example": [
                        "NamedComputer",
                        "UpgradeRights"
                      ],
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/UseRightType"
                        }
                      ]
                    }
                  }
                }
              ]
            },
            "ComputerTrackingCollection": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ComputerTrackingDetailsCollection"
                },
                {
                  "type": "object",
                  "additionalProperties": false
                }
              ]
            },
            "FilteredResponseOfComputerTrackingCollection": {
              "type": "object",
              "description": "Filtered response.",
              "additionalProperties": false,
              "required": [
                "items",
                "pagination"
              ],
              "properties": {
                "items": {
                  "type": "array",
                  "description": "A collection of items.",
                  "items": {
                    "$ref": "#/components/schemas/ComputerTrackingCollection"
                  }
                },
                "pagination": {
                  "description": "The pagination details.",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  ]
                }
              }
            },
            "HateoasCollectionOfComputerTrackingCollection": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/FilteredResponseOfComputerTrackingCollection"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "_links"
                  ],
                  "properties": {
                    "_links": {
                      "type": "array",
                      "description": "A collection of links to related resources.",
                      "items": {
                        "$ref": "#/components/schemas/Link"
                      }
                    }
                  }
                }
              ]
            },
            "FilteredResponseOfComputerTrackingDetailsCollection": {
              "type": "object",
              "description": "Filtered response.",
              "additionalProperties": false,
              "required": [
                "items",
                "pagination"
              ],
              "properties": {
                "items": {
                  "type": "array",
                  "description": "A collection of items.",
                  "items": {
                    "$ref": "#/components/schemas/ComputerTrackingDetailsCollection"
                  }
                },
                "pagination": {
                  "description": "The pagination details.",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  ]
                }
              }
            },
            "HateoasCollectionOfComputerTrackingDetailsCollection": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/FilteredResponseOfComputerTrackingDetailsCollection"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "_links"
                  ],
                  "properties": {
                    "_links": {
                      "type": "array",
                      "description": "A collection of links to related resources.",
                      "items": {
                        "$ref": "#/components/schemas/Link"
                      }
                    }
                  }
                }
              ]
            },
            "LicenseTracking": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/HateoasResource"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "licenseId": {
                      "type": "string",
                      "description": "The unique ID of the license.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "hasComputerTracking": {
                      "type": "boolean",
                      "description": "```true``` if has computer tracking; otherwise, ```false```.",
                      "example": true
                    },
                    "hasUserTracking": {
                      "type": "boolean",
                      "description": "```true``` if has user tracking; otherwise, ```false```.",
                      "example": true
                    }
                  }
                }
              ]
            },
            "FilteredResponseOfLicenseTracking": {
              "type": "object",
              "description": "Filtered response.",
              "additionalProperties": false,
              "required": [
                "items",
                "pagination"
              ],
              "properties": {
                "items": {
                  "type": "array",
                  "description": "A collection of items.",
                  "items": {
                    "$ref": "#/components/schemas/LicenseTracking"
                  }
                },
                "pagination": {
                  "description": "The pagination details.",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  ]
                }
              }
            },
            "HateoasCollectionOfLicenseTracking": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/FilteredResponseOfLicenseTracking"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "_links"
                  ],
                  "properties": {
                    "_links": {
                      "type": "array",
                      "description": "A collection of links to related resources.",
                      "items": {
                        "$ref": "#/components/schemas/Link"
                      }
                    }
                  }
                }
              ]
            },
            "UserTrackingDetailsCollection": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/HateoasResource"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The unique ID of the user application tracking.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "metricId": {
                      "type": "string",
                      "description": "The unique ID of the metric.",
                      "format": "guid",
                      "example": "5891a1d8-7fb0-45bd-b1f6-01c943f9c572"
                    },
                    "applicationId": {
                      "type": "string",
                      "description": "The unique ID of the application.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "userId": {
                      "type": "string",
                      "description": "The unique ID of the user.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "licenseId": {
                      "type": "string",
                      "description": "The unique ID of the license.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "organizationId": {
                      "type": "string",
                      "description": "The unique ID of the organization.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "coverageTrait": {
                      "type": "integer",
                      "description": "The coverage tait.",
                      "format": "int32",
                      "example": 1
                    },
                    "initialRequirement": {
                      "type": "integer",
                      "description": "The initial requirement.",
                      "format": "int32",
                      "example": 1
                    },
                    "receivedCoverage": {
                      "type": "integer",
                      "description": "The received coverage.",
                      "format": "int32",
                      "example": 1
                    },
                    "primaryUseRights": {
                      "description": "The primary user rights.",
                      "example": [
                        "NamedComputer"
                      ],
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/UseRightType"
                        }
                      ]
                    },
                    "fullUseRights": {
                      "description": "The full use rights.",
                      "example": [
                        "NamedComputer",
                        "UpgradeRights"
                      ],
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/UseRightType"
                        }
                      ]
                    }
                  }
                }
              ]
            },
            "UserTrackingCollection": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/UserTrackingDetailsCollection"
                },
                {
                  "type": "object",
                  "additionalProperties": false
                }
              ]
            },
            "FilteredResponseOfUserTrackingCollection": {
              "type": "object",
              "description": "Filtered response.",
              "additionalProperties": false,
              "required": [
                "items",
                "pagination"
              ],
              "properties": {
                "items": {
                  "type": "array",
                  "description": "A collection of items.",
                  "items": {
                    "$ref": "#/components/schemas/UserTrackingCollection"
                  }
                },
                "pagination": {
                  "description": "The pagination details.",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  ]
                }
              }
            },
            "HateoasCollectionOfUserTrackingCollection": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/FilteredResponseOfUserTrackingCollection"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "_links"
                  ],
                  "properties": {
                    "_links": {
                      "type": "array",
                      "description": "A collection of links to related resources.",
                      "items": {
                        "$ref": "#/components/schemas/Link"
                      }
                    }
                  }
                }
              ]
            },
            "FilteredResponseOfUserTrackingDetailsCollection": {
              "type": "object",
              "description": "Filtered response.",
              "additionalProperties": false,
              "required": [
                "items",
                "pagination"
              ],
              "properties": {
                "items": {
                  "type": "array",
                  "description": "A collection of items.",
                  "items": {
                    "$ref": "#/components/schemas/UserTrackingDetailsCollection"
                  }
                },
                "pagination": {
                  "description": "The pagination details.",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  ]
                }
              }
            },
            "HateoasCollectionOfUserTrackingDetailsCollection": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/FilteredResponseOfUserTrackingDetailsCollection"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "_links"
                  ],
                  "properties": {
                    "_links": {
                      "type": "array",
                      "description": "A collection of links to related resources.",
                      "items": {
                        "$ref": "#/components/schemas/Link"
                      }
                    }
                  }
                }
              ]
            },
            "LicensePolicyFieldCollection": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/HateoasResource"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The unique ID of the policy field.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "name": {
                      "type": "string",
                      "description": "The policy field name.",
                      "nullable": true,
                      "example": "InvoiceReference"
                    },
                    "description": {
                      "type": "string",
                      "description": "The policy field description.",
                      "nullable": true,
                      "example": "InvoiceReference"
                    },
                    "isRequired": {
                      "type": "boolean",
                      "description": "```true``` if is required; otherwise, ```false```.",
                      "example": true
                    },
                    "isComboBox": {
                      "type": "boolean",
                      "description": "```true``` if is combo box; otherwise, ```false```.",
                      "example": true
                    },
                    "isEditingAllowed": {
                      "type": "boolean",
                      "description": "```true``` if is editing allowed; otherwise, ```false```.",
                      "example": true
                    },
                    "listItems": {
                      "type": "array",
                      "description": "The list of item values.",
                      "nullable": true,
                      "example": [
                        "Item"
                      ],
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            },
            "FilteredResponseOfLicensePolicyFieldCollection": {
              "type": "object",
              "description": "Filtered response.",
              "additionalProperties": false,
              "required": [
                "items",
                "pagination"
              ],
              "properties": {
                "items": {
                  "type": "array",
                  "description": "A collection of items.",
                  "items": {
                    "$ref": "#/components/schemas/LicensePolicyFieldCollection"
                  }
                },
                "pagination": {
                  "description": "The pagination details.",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  ]
                }
              }
            },
            "HateoasCollectionOfLicensePolicyFieldCollection": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/FilteredResponseOfLicensePolicyFieldCollection"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "_links"
                  ],
                  "properties": {
                    "_links": {
                      "type": "array",
                      "description": "A collection of links to related resources.",
                      "items": {
                        "$ref": "#/components/schemas/Link"
                      }
                    }
                  }
                }
              ]
            },
            "LicensePolicyField": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/HateoasResource"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The unique ID of the policy field.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "name": {
                      "type": "string",
                      "description": "The policy field name.",
                      "nullable": true,
                      "example": "InvoiceReference"
                    },
                    "description": {
                      "type": "string",
                      "description": "The policy field description.",
                      "nullable": true,
                      "example": "InvoiceReference"
                    },
                    "isRequired": {
                      "type": "boolean",
                      "description": "```true``` if is required; otherwise, ```false```.",
                      "nullable": true,
                      "example": true
                    },
                    "isComboBox": {
                      "type": "boolean",
                      "description": "```true``` if is combo box; otherwise, ```false```.",
                      "nullable": true,
                      "example": true
                    },
                    "isEditingAllowed": {
                      "type": "boolean",
                      "description": "```true``` if editing is allowed; otherwise, ```false```.",
                      "nullable": true,
                      "example": true
                    },
                    "listItems": {
                      "type": "array",
                      "description": "The list of item values.",
                      "nullable": true,
                      "example": [
                        "Item"
                      ],
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            },
            "Policy": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/HateoasResource"
                },
                {
                  "type": "object",
                  "description": "The license policy.",
                  "additionalProperties": false,
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The unique ID of the license policy.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    }
                  }
                }
              ]
            },
            "FilteredResponseOfPolicy": {
              "type": "object",
              "description": "Filtered response.",
              "additionalProperties": false,
              "required": [
                "items",
                "pagination"
              ],
              "properties": {
                "items": {
                  "type": "array",
                  "description": "A collection of items.",
                  "items": {
                    "$ref": "#/components/schemas/Policy"
                  }
                },
                "pagination": {
                  "description": "The pagination details.",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  ]
                }
              }
            },
            "HateoasCollectionOfPolicy": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/FilteredResponseOfPolicy"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "_links"
                  ],
                  "properties": {
                    "_links": {
                      "type": "array",
                      "description": "A collection of links to related resources.",
                      "items": {
                        "$ref": "#/components/schemas/Link"
                      }
                    }
                  }
                }
              ]
            },
            "MaintenancePeriodCollection": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/HateoasResource"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The unique ID of the maintenance period.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "agreementPeriodId": {
                      "type": "string",
                      "description": "The unique ID of the agreement period.",
                      "format": "guid",
                      "nullable": true,
                      "example": "17597d2f-ae4b-4505-a85d-52a78421873c"
                    },
                    "licenseId": {
                      "type": "string",
                      "description": "The unique ID of the license.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "validFrom": {
                      "type": "string",
                      "description": "The valid form date.",
                      "format": "date-time",
                      "nullable": true,
                      "example": "2024-01-01T00:00:00Z"
                    },
                    "validTo": {
                      "type": "string",
                      "description": "The valid to date.",
                      "format": "date-time",
                      "nullable": true,
                      "example": "2025-01-01T00:00:00Z"
                    },
                    "hasUpgradeRights": {
                      "type": "boolean",
                      "description": "```true``` if has upgrade rights; otherwise, ```false```.",
                      "nullable": true,
                      "example": true
                    },
                    "invoiceReference": {
                      "type": "string",
                      "description": "The invoice reference.",
                      "nullable": true,
                      "example": "INV12345"
                    },
                    "notes": {
                      "type": "string",
                      "description": "The notes.",
                      "nullable": true,
                      "example": "Notes"
                    },
                    "maintenanceCost": {
                      "type": "number",
                      "description": "The maintenance cost.",
                      "format": "decimal",
                      "nullable": true,
                      "example": 1000
                    },
                    "supportCost": {
                      "type": "number",
                      "description": "The support cost.",
                      "format": "decimal",
                      "nullable": true,
                      "example": 1000
                    },
                    "purchaseCurrency": {
                      "type": "string",
                      "description": "The purchase currency.",
                      "nullable": true,
                      "example": "USD"
                    }
                  }
                }
              ]
            },
            "FilteredResponseOfMaintenancePeriodCollection": {
              "type": "object",
              "description": "Filtered response.",
              "additionalProperties": false,
              "required": [
                "items",
                "pagination"
              ],
              "properties": {
                "items": {
                  "type": "array",
                  "description": "A collection of items.",
                  "items": {
                    "$ref": "#/components/schemas/MaintenancePeriodCollection"
                  }
                },
                "pagination": {
                  "description": "The pagination details.",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  ]
                }
              }
            },
            "HateoasCollectionOfMaintenancePeriodCollection": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/FilteredResponseOfMaintenancePeriodCollection"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "_links"
                  ],
                  "properties": {
                    "_links": {
                      "type": "array",
                      "description": "A collection of links to related resources.",
                      "items": {
                        "$ref": "#/components/schemas/Link"
                      }
                    }
                  }
                }
              ]
            },
            "MaintenancePeriodRequest": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "agreementPeriodId": {
                  "type": "string",
                  "description": "The unique ID of the agreement period.",
                  "format": "guid",
                  "nullable": true,
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                },
                "validFrom": {
                  "type": "string",
                  "description": "The valid form date.",
                  "format": "date-time",
                  "nullable": true,
                  "example": "2024-01-01T00:00:00Z"
                },
                "validTo": {
                  "type": "string",
                  "description": "The valid to date.",
                  "format": "date-time",
                  "nullable": true,
                  "example": "2025-01-01T00:00:00Z"
                },
                "hasUpgradeRights": {
                  "type": "boolean",
                  "description": "```true``` if has upgrade rights; otherwise, ```false```.",
                  "example": true
                },
                "invoiceReference": {
                  "type": "string",
                  "description": "The invoice reference.",
                  "nullable": true,
                  "example": "INV12345"
                },
                "notes": {
                  "type": "string",
                  "description": "The notes.",
                  "nullable": true,
                  "example": "Notes"
                },
                "maintenanceCost": {
                  "type": "number",
                  "description": "The maintenance cost.",
                  "format": "decimal",
                  "nullable": true,
                  "example": 1000
                },
                "supportCost": {
                  "type": "number",
                  "description": "The support cost.",
                  "format": "decimal",
                  "nullable": true,
                  "example": 1000
                }
              }
            },
            "ListOfMaintenancePeriodRequest": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/MaintenancePeriodRequest"
              }
            },
            "HateoasResponse": {
              "type": "object",
              "description": "Abstract class for IResource.",
              "x-abstract": true,
              "additionalProperties": false,
              "properties": {
                "_links": {
                  "type": "array",
                  "description": "A collection of links to related resources.",
                  "items": {
                    "$ref": "#/components/schemas/Link"
                  }
                }
              }
            },
            "CreatedHateoasResponse": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/HateoasResponse"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The unique ID of the resource.",
                      "format": "guid"
                    }
                  }
                }
              ]
            },
            "MaintenancePeriod": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/CreatedHateoasResponse"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "validFrom": {
                      "type": "string",
                      "description": "The valid form date.",
                      "format": "date-time",
                      "nullable": true,
                      "example": "2024-01-01T00:00:00Z"
                    },
                    "validTo": {
                      "type": "string",
                      "description": "The valid to date.",
                      "format": "date-time",
                      "nullable": true,
                      "example": "2025-01-01T00:00:00Z"
                    },
                    "hasUpgradeRights": {
                      "type": "boolean",
                      "description": "```true``` if has upgrade rights; otherwise, ```false```.",
                      "example": true
                    },
                    "maintenanceCost": {
                      "type": "number",
                      "description": "The maintenance cost.",
                      "format": "decimal",
                      "nullable": true,
                      "example": 1000
                    },
                    "supportCost": {
                      "type": "number",
                      "description": "The support cost.",
                      "format": "decimal",
                      "nullable": true,
                      "example": 1000
                    },
                    "purchaseCurrency": {
                      "type": "string",
                      "description": "The purchase currency.",
                      "nullable": true,
                      "example": "USD"
                    },
                    "invoiceReference": {
                      "type": "string",
                      "description": "The invoice reference.",
                      "nullable": true,
                      "example": "INV12345"
                    },
                    "notes": {
                      "type": "string",
                      "description": "The notes.",
                      "nullable": true,
                      "example": "Notes"
                    }
                  }
                }
              ]
            },
            "IncompleteLicenseReason": {
              "type": "integer",
              "description": "The incomplete reason.",
              "x-enumFlags": true,
              "x-enumNames": [
                "None",
                "MissingApplication",
                "MissingLicenseCount",
                "MissingMetric",
                "MissingBaseLicenses",
                "InvalidSubscriptionPeriod",
                "MissingValidFromToDate",
                "MissingAgreementNumber",
                "MissingAssignmentType",
                "All"
              ],
              "enum": [
                0,
                1,
                2,
                4,
                8,
                16,
                32,
                64,
                128,
                255
              ]
            },
            "LicenseCollectionUpgrade": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "licenseId": {
                  "type": "string",
                  "description": "The unique ID of the license.",
                  "format": "guid",
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                },
                "quantity": {
                  "type": "integer",
                  "description": "The quantity.",
                  "format": "int32",
                  "example": 1
                },
                "upgradedLicenseId": {
                  "type": "string",
                  "description": "The unique ID of the upgraded license.",
                  "format": "guid",
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                },
                "upgradedQuantity": {
                  "type": "integer",
                  "description": "The upgraded quantity.",
                  "format": "int32",
                  "example": 1
                }
              }
            },
            "LicenseCollection": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/HateoasResource"
                },
                {
                  "type": "object",
                  "description": "The collection of licenses.",
                  "additionalProperties": false,
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The unique ID of the license.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "organizationId": {
                      "type": "string",
                      "description": "The unique ID of the organization.",
                      "format": "guid",
                      "nullable": true,
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "applicationId": {
                      "type": "string",
                      "description": "The unique ID of the application.",
                      "format": "guid",
                      "nullable": true,
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "contractId": {
                      "type": "string",
                      "description": "The unique ID of the agreement.",
                      "format": "guid",
                      "nullable": true,
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "agreementId": {
                      "type": "string",
                      "description": "The unique ID of the agreement.",
                      "format": "guid",
                      "nullable": true,
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "metricId": {
                      "type": "string",
                      "description": "The unique ID of the metric.",
                      "format": "guid",
                      "nullable": true,
                      "example": "5891a1d8-7fb0-45bd-b1f6-01c943f9c572"
                    },
                    "assignmentTypeId": {
                      "type": "string",
                      "description": "The unique ID of the assignment type.",
                      "format": "guid",
                      "nullable": true,
                      "example": "8e5d8f69-c818-4575-9a91-aebae9a9eacc"
                    },
                    "purchaseDate": {
                      "type": "string",
                      "description": "The purchase date.",
                      "format": "date-time",
                      "example": "2024-01-01T00:00:00Z"
                    },
                    "purchaseValue": {
                      "type": "number",
                      "description": "The purchase value.",
                      "format": "decimal",
                      "nullable": true,
                      "example": 1000
                    },
                    "purchaseCurrency": {
                      "type": "string",
                      "description": "The purchase currency.",
                      "nullable": true,
                      "example": "USD"
                    },
                    "quantity": {
                      "type": "integer",
                      "description": "The quantity.",
                      "format": "int32",
                      "nullable": true,
                      "example": 1
                    },
                    "initialQuantity": {
                      "type": "integer",
                      "description": "The initial quantity.",
                      "format": "int32",
                      "nullable": true,
                      "example": 1
                    },
                    "mediaStorage": {
                      "type": "string",
                      "description": "The media storage.",
                      "nullable": true,
                      "example": "path/to/file"
                    },
                    "licenseProofLocation": {
                      "type": "string",
                      "description": "The license proof location.",
                      "nullable": true,
                      "example": "path/to/licenseproof"
                    },
                    "invoiceReference": {
                      "type": "string",
                      "description": "The invoice reference.",
                      "nullable": true,
                      "example": "INV12345"
                    },
                    "vendor": {
                      "type": "string",
                      "description": "The vendor.",
                      "nullable": true,
                      "example": "Microsoft"
                    },
                    "externalId": {
                      "type": "string",
                      "description": "The external ID.",
                      "nullable": true,
                      "example": "EXT12345"
                    },
                    "productDescription": {
                      "type": "string",
                      "description": "The product description.",
                      "nullable": true,
                      "example": "MSDN"
                    },
                    "isSubscription": {
                      "type": "boolean",
                      "description": "```true``` if is subscription; otherwise, ```false```.",
                      "example": true
                    },
                    "isCrossEdition": {
                      "type": "boolean",
                      "description": "```true``` if is cross-edition; otherwise, ```false```.",
                      "example": true
                    },
                    "isCrossPlatform": {
                      "type": "boolean",
                      "description": "```true``` if is cross-platform; otherwise, ```false```.",
                      "example": true
                    },
                    "isUpgrade": {
                      "type": "boolean",
                      "description": "```true``` if is upgrade; otherwise, ```false```.",
                      "example": true
                    },
                    "isDowngrade": {
                      "type": "boolean",
                      "description": "```true``` if is downgrade; otherwise, ```false```.",
                      "example": true
                    },
                    "isIncomplete": {
                      "type": "boolean",
                      "description": "```true``` if is incomplete; otherwise, ```false```.",
                      "example": true
                    },
                    "incompleteReasons": {
                      "description": "The incomplete license reasons.",
                      "example": [
                        "MissingApplication"
                      ],
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/IncompleteLicenseReason"
                        }
                      ]
                    },
                    "updatedDate": {
                      "type": "string",
                      "description": "The updated date.",
                      "format": "date-time",
                      "example": "2024-01-01T00:00:00Z"
                    },
                    "createdDate": {
                      "type": "string",
                      "description": "The created date.",
                      "format": "date-time",
                      "example": "2024-01-01T00:00:00Z"
                    },
                    "subscriptionValidFrom": {
                      "type": "string",
                      "description": "The subscription valid from date.",
                      "format": "date-time",
                      "nullable": true,
                      "example": "2024-01-01T00:00:00Z"
                    },
                    "subscriptionValidTo": {
                      "type": "string",
                      "description": "The subscription valid to date.",
                      "format": "date-time",
                      "nullable": true,
                      "example": "2025-01-01T00:00:00Z"
                    },
                    "activeMaintenanceCost": {
                      "type": "number",
                      "description": "The active maintenance cost.",
                      "format": "decimal",
                      "example": 1000
                    },
                    "totalMaintenanceCost": {
                      "type": "number",
                      "description": "The total maintenance cost.",
                      "format": "decimal",
                      "example": 1000
                    },
                    "activeSupportCost": {
                      "type": "number",
                      "description": "The active support cost.",
                      "format": "decimal",
                      "example": 1000
                    },
                    "totalSupportCost": {
                      "type": "number",
                      "description": "The total support cost.",
                      "format": "decimal",
                      "example": 1000
                    },
                    "totalLicenseCost": {
                      "type": "number",
                      "description": "The total license cost.",
                      "format": "decimal",
                      "example": 1000
                    },
                    "upgradedLicenseCount": {
                      "type": "integer",
                      "description": "The upgraded license count.",
                      "format": "int32",
                      "nullable": true,
                      "example": 1000
                    },
                    "autoAllocateOnce": {
                      "type": "boolean",
                      "description": "```true``` if has auto allocate once selected; otherwise, ```false```.",
                      "nullable": true,
                      "example": true
                    },
                    "isAutoAllocated": {
                      "type": "boolean",
                      "description": "```true``` if has auto allocate selected; otherwise, ```false```.",
                      "nullable": true,
                      "example": true
                    },
                    "maintenanceAccordingToAgreement": {
                      "type": "boolean",
                      "description": "```true``` if is maintenance periods are based on the agreement; otherwise, ```false```..",
                      "example": true
                    },
                    "skuId": {
                      "type": "string",
                      "description": "The unique ID of the sku.",
                      "format": "guid",
                      "nullable": true,
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "upgrades": {
                      "type": "array",
                      "description": "The collection of license upgrades.",
                      "nullable": true,
                      "items": {
                        "$ref": "#/components/schemas/LicenseCollectionUpgrade"
                      }
                    },
                    "status": {
                      "type": "string",
                      "description": "The status of the license.",
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/Status"
                        }
                      ],
                      "example": "Active"
                    },
                    "archivedDate": {
                      "type": "string",
                      "description": "The archived date.",
                      "format": "date-time",
                      "nullable": true,
                      "example": "2024-01-01T00:00:00Z"
                    }
                  }
                }
              ]
            },
            "FilteredResponseOfLicenseCollection": {
              "type": "object",
              "description": "Filtered response.",
              "additionalProperties": false,
              "required": [
                "items",
                "pagination"
              ],
              "properties": {
                "items": {
                  "type": "array",
                  "description": "A collection of items.",
                  "items": {
                    "$ref": "#/components/schemas/LicenseCollection"
                  }
                },
                "pagination": {
                  "description": "The pagination details.",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  ]
                }
              }
            },
            "HateoasCollectionOfLicenseCollection": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/FilteredResponseOfLicenseCollection"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "_links"
                  ],
                  "properties": {
                    "_links": {
                      "type": "array",
                      "description": "A collection of links to related resources.",
                      "items": {
                        "$ref": "#/components/schemas/Link"
                      }
                    }
                  }
                }
              ]
            },
            "License": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/HateoasResource"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The unique ID of the license.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "organizationId": {
                      "type": "string",
                      "description": "The unique ID of the organization.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "applicationId": {
                      "type": "string",
                      "description": "The unique ID of the application.",
                      "format": "guid",
                      "nullable": true,
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "assignmentTypeId": {
                      "type": "string",
                      "description": "The unique ID of the assignment type.",
                      "format": "guid",
                      "nullable": true,
                      "example": "8e5d8f69-c818-4575-9a91-aebae9a9eacc"
                    },
                    "autoAllocateOnce": {
                      "type": "boolean",
                      "description": "```true``` if has auto allocate once selected; otherwise, ```false```.",
                      "nullable": true,
                      "example": true
                    },
                    "isAutoAllocated": {
                      "type": "boolean",
                      "description": "```true``` if has auto allocate selected; otherwise, ```false```.",
                      "nullable": true,
                      "example": true
                    },
                    "metricId": {
                      "type": "string",
                      "description": "The unique ID of the metric.",
                      "format": "guid",
                      "example": "5891a1d8-7fb0-45bd-b1f6-01c943f9c572"
                    },
                    "purchaseDate": {
                      "type": "string",
                      "description": "The purchase date.",
                      "format": "date-time",
                      "example": "2024-01-01T00:00:00Z"
                    },
                    "purchaseValue": {
                      "type": "number",
                      "description": "The purchase value.",
                      "format": "decimal",
                      "example": 1000
                    },
                    "purchaseCurrency": {
                      "type": "string",
                      "description": "The purchase currency.",
                      "nullable": true,
                      "example": "USD"
                    },
                    "quantity": {
                      "type": "integer",
                      "description": "The quantity.",
                      "format": "int32",
                      "nullable": true,
                      "example": 1
                    },
                    "licenseKeys": {
                      "type": "string",
                      "description": "The license keys.",
                      "nullable": true,
                      "example": "69658998-12-12031517-23"
                    },
                    "mediaStorage": {
                      "type": "string",
                      "description": "The media storage.",
                      "nullable": true,
                      "example": "path/to/file"
                    },
                    "licenseProofLocation": {
                      "type": "string",
                      "description": "The license proof location.",
                      "nullable": true,
                      "example": "path/to/licenseproof"
                    },
                    "invoiceReference": {
                      "type": "string",
                      "description": "The invoice reference.",
                      "nullable": true,
                      "example": "INV12345"
                    },
                    "vendor": {
                      "type": "string",
                      "description": "The vendor.",
                      "nullable": true,
                      "example": "Microsoft"
                    },
                    "notes": {
                      "type": "string",
                      "description": "The notes.",
                      "nullable": true,
                      "example": "Notes"
                    },
                    "externalId": {
                      "type": "string",
                      "description": "The external ID.",
                      "nullable": true,
                      "example": "EXT12345"
                    },
                    "sku": {
                      "type": "string",
                      "description": "The stock keeping unit.",
                      "nullable": true,
                      "example": "ABC-12345-S-BL"
                    },
                    "productDescription": {
                      "type": "string",
                      "description": "The product description.",
                      "nullable": true,
                      "example": "MSDN"
                    },
                    "isSubscription": {
                      "type": "boolean",
                      "description": "```true``` if is subscription; otherwise, ```false```.",
                      "example": true
                    },
                    "isCrossEdition": {
                      "type": "boolean",
                      "description": "```true``` if is cross-edition; otherwise, ```false```.",
                      "example": true
                    },
                    "isCrossPlatform": {
                      "type": "boolean",
                      "description": "```true``` if is cross-platform; otherwise, ```false```.",
                      "example": true
                    },
                    "isUpgrade": {
                      "type": "boolean",
                      "description": "```true``` if is upgrade; otherwise, ```false```.",
                      "example": true
                    },
                    "isDowngrade": {
                      "type": "boolean",
                      "description": "```true``` if is downgrade; otherwise, ```false```.",
                      "example": true
                    },
                    "isIncomplete": {
                      "type": "boolean",
                      "description": "```true``` if is incomplete; otherwise, ```false```.",
                      "example": true
                    },
                    "incompleteReasons": {
                      "description": "The incomplete license reasons.",
                      "example": [
                        "MissingApplication"
                      ],
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/IncompleteLicenseReason"
                        }
                      ]
                    },
                    "contractId": {
                      "type": "string",
                      "description": "The unique ID of the agreement.",
                      "format": "guid",
                      "nullable": true,
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "agreementId": {
                      "type": "string",
                      "description": "The unique ID of the agreement.",
                      "format": "guid",
                      "nullable": true,
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "updatedDate": {
                      "type": "string",
                      "description": "The updated date.",
                      "format": "date-time",
                      "example": "2024-01-01T00:00:00Z"
                    },
                    "createdDate": {
                      "type": "string",
                      "description": "The created date.",
                      "format": "date-time",
                      "example": "2024-01-01T00:00:00Z"
                    },
                    "subscriptionValidFrom": {
                      "type": "string",
                      "description": "The subscription valid from date.",
                      "format": "date-time",
                      "nullable": true,
                      "example": "2024-01-01T00:00:00Z"
                    },
                    "subscriptionValidTo": {
                      "type": "string",
                      "description": "The subscription valid to date.",
                      "format": "date-time",
                      "nullable": true,
                      "example": "2025-01-01T00:00:00Z"
                    },
                    "upgradedLicenseCount": {
                      "type": "integer",
                      "description": "The upgraded license count.",
                      "format": "int32",
                      "nullable": true,
                      "example": 1
                    },
                    "maintenanceAccordingToAgreement": {
                      "type": "boolean",
                      "description": "```true``` if is maintenance periods are based on the agreement; otherwise, ```false```..",
                      "example": true
                    },
                    "skuId": {
                      "type": "string",
                      "description": "The unique ID of the sku.",
                      "format": "guid",
                      "nullable": true,
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "hasVmUseRights": {
                      "type": "boolean",
                      "description": "```true``` if has VM use rights; otherwise, ```false```.",
                      "nullable": true,
                      "example": true
                    },
                    "numberOfSupportedVirtualMachines": {
                      "type": "integer",
                      "description": "The number of supported virtual machines.",
                      "format": "int32",
                      "nullable": true,
                      "example": 100
                    },
                    "status": {
                      "type": "string",
                      "description": "The status of the license.",
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/Status"
                        }
                      ],
                      "example": "Active"
                    },
                    "archivedDate": {
                      "type": "string",
                      "description": "The archived date.",
                      "format": "date-time",
                      "nullable": true,
                      "example": "2024-01-01T00:00:00Z"
                    }
                  }
                }
              ]
            },
            "SiteAssignmentRequest": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "organizationId": {
                  "type": "string",
                  "description": "The unique ID of the organization.",
                  "format": "guid",
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                }
              }
            },
            "LicenseUpgradeRequest": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "upgradedLicenseId": {
                  "type": "string",
                  "description": "The unique ID of the base license.",
                  "format": "guid",
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                },
                "upgradedQuantity": {
                  "type": "integer",
                  "description": "The quantity sent from the base license.",
                  "format": "int32",
                  "example": 1
                },
                "quantity": {
                  "type": "integer",
                  "description": "The quantity received on the upgraded license.",
                  "format": "int32",
                  "example": 1
                }
              }
            },
            "ComputerAssignmentRequest": {
              "type": "object",
              "description": "A collection of computer license assignments.",
              "additionalProperties": false,
              "properties": {
                "computerId": {
                  "type": "string",
                  "description": "The unique ID of the computer.",
                  "format": "guid",
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                },
                "quantity": {
                  "type": "integer",
                  "description": "The assigned quantity of licenses.",
                  "format": "int32",
                  "example": 1
                },
                "virtualMachines": {
                  "type": "array",
                  "description": "The list of virtual machines.",
                  "nullable": true,
                  "example": [
                    "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                  ],
                  "items": {
                    "type": "string",
                    "format": "guid"
                  }
                }
              }
            },
            "DatacenterAssignmentRequest": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "datacenterId": {
                  "type": "string",
                  "description": "The unique ID of the DCC.",
                  "format": "guid",
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                },
                "quantity": {
                  "type": "integer",
                  "description": "The assigned quantity of licenses.",
                  "format": "int32",
                  "example": 1
                },
                "virtualMachines": {
                  "type": "array",
                  "description": "The list of virtual machines.",
                  "nullable": true,
                  "example": [
                    "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                  ],
                  "items": {
                    "type": "string",
                    "format": "guid"
                  }
                }
              }
            },
            "OrganizationAssignmentRequest": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "organizationId": {
                  "type": "string",
                  "description": "The unique ID of the organization.",
                  "format": "guid",
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                },
                "quantity": {
                  "type": "integer",
                  "description": "The assigned quantity of licenses.",
                  "format": "int32",
                  "example": 1
                }
              }
            },
            "UserAssignmentRequest": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "userId": {
                  "type": "string",
                  "description": "The unique ID of the user.",
                  "format": "guid",
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                }
              }
            },
            "LicenseRequest": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "agreementId": {
                  "type": "string",
                  "description": "The unique ID of the agreement.",
                  "format": "guid",
                  "nullable": true,
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                },
                "applicationId": {
                  "type": "string",
                  "description": "The unique ID of the application.",
                  "format": "guid",
                  "nullable": true,
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                },
                "autoAllocateOnce": {
                  "type": "boolean",
                  "description": "```true``` if has auto allocate once selected; otherwise, ```false```.",
                  "nullable": true,
                  "example": true
                },
                "assignmentTypeId": {
                  "type": "string",
                  "description": "The unique ID of the assignment type.",
                  "format": "guid",
                  "nullable": true,
                  "example": "8e5d8f69-c818-4575-9a91-aebae9a9eacc"
                },
                "externalId": {
                  "type": "string",
                  "description": "The external ID.",
                  "nullable": true,
                  "example": "EXT12345"
                },
                "invoiceReference": {
                  "type": "string",
                  "description": "The invoice reference.",
                  "nullable": true,
                  "example": "INV12345"
                },
                "isAutoAllocated": {
                  "type": "boolean",
                  "description": "```true``` if has auto allocate selected; otherwise, ```false```.",
                  "nullable": true,
                  "example": true
                },
                "isCrossEdition": {
                  "type": "boolean",
                  "description": "```true``` if is cross-edition; otherwise, ```false```.",
                  "example": true
                },
                "isCrossPlatform": {
                  "type": "boolean",
                  "description": "```true``` if is cross-platform; otherwise, ```false```.",
                  "example": true
                },
                "isDowngrade": {
                  "type": "boolean",
                  "description": "```true``` if is downgrade; otherwise, ```false```.",
                  "example": true
                },
                "isSubscription": {
                  "type": "boolean",
                  "description": "```true``` if is subscription; otherwise, ```false```.",
                  "nullable": true,
                  "example": true
                },
                "isUpgrade": {
                  "type": "boolean",
                  "description": "```true``` if is upgrade; otherwise, ```false```.",
                  "example": true
                },
                "quantity": {
                  "type": "integer",
                  "description": "The quantity.",
                  "format": "int32",
                  "nullable": true,
                  "example": 1
                },
                "licenseKeys": {
                  "type": "string",
                  "description": "The license keys.",
                  "nullable": true,
                  "example": "69658998-12-12031517-23"
                },
                "licenseProofLocation": {
                  "type": "string",
                  "description": "The license proof location.",
                  "nullable": true,
                  "example": "path/to/licenseproof"
                },
                "maintenanceAccordingToAgreement": {
                  "type": "boolean",
                  "description": "```true``` if has maintenance according to agreement selected; otherwise, ```false```.",
                  "example": true
                },
                "mediaStorage": {
                  "type": "string",
                  "description": "The media storage.",
                  "nullable": true,
                  "example": "path/to/file"
                },
                "metricId": {
                  "type": "string",
                  "description": "The unique ID of the metric.",
                  "format": "guid",
                  "nullable": true,
                  "example": "5891a1d8-7fb0-45bd-b1f6-01c943f9c572"
                },
                "notes": {
                  "type": "string",
                  "description": "The notes.",
                  "nullable": true,
                  "example": "Notes"
                },
                "organizationId": {
                  "type": "string",
                  "description": "The unique ID of the organization.",
                  "format": "guid",
                  "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                },
                "productDescription": {
                  "type": "string",
                  "description": "The product description.",
                  "nullable": true,
                  "example": "MSDN"
                },
                "purchaseDate": {
                  "type": "string",
                  "description": "The purchase date.",
                  "format": "date-time",
                  "example": "2024-01-01T00:00:00Z"
                },
                "purchaseValue": {
                  "type": "number",
                  "description": "The purchase value.",
                  "format": "decimal",
                  "nullable": true,
                  "example": 1000
                },
                "purchaseCurrency": {
                  "type": "string",
                  "description": "The purchase currency.",
                  "nullable": true,
                  "example": "USD"
                },
                "sku": {
                  "type": "string",
                  "description": "The stock keeping unit.",
                  "nullable": true,
                  "example": "ABC-12345-S-BL"
                },
                "subscriptionValidFrom": {
                  "type": "string",
                  "description": "The subscription valid from date.",
                  "format": "date-time",
                  "nullable": true,
                  "example": "2024-01-01T00:00:00Z"
                },
                "subscriptionValidTo": {
                  "type": "string",
                  "description": "The subscription valid to date.",
                  "format": "date-time",
                  "nullable": true,
                  "example": "2025-01-01T00:00:00Z"
                },
                "vendor": {
                  "type": "string",
                  "description": "The vendor.",
                  "nullable": true,
                  "example": "Microsoft"
                },
                "upgrades": {
                  "type": "array",
                  "description": "The license upgrades.",
                  "nullable": true,
                  "items": {
                    "$ref": "#/components/schemas/LicenseUpgradeRequest"
                  }
                },
                "maintenancePeriods": {
                  "type": "array",
                  "description": "The maintenance periods.",
                  "nullable": true,
                  "items": {
                    "$ref": "#/components/schemas/MaintenancePeriodRequest"
                  }
                },
                "computerAssignments": {
                  "type": "array",
                  "description": "The computer assignments.",
                  "nullable": true,
                  "items": {
                    "$ref": "#/components/schemas/ComputerAssignmentRequest"
                  }
                },
                "datacenterAssignments": {
                  "type": "array",
                  "description": "The datacenter assignments.",
                  "nullable": true,
                  "items": {
                    "$ref": "#/components/schemas/DatacenterAssignmentRequest"
                  }
                },
                "organizationAssignments": {
                  "type": "array",
                  "description": "The organization assignments.",
                  "nullable": true,
                  "items": {
                    "$ref": "#/components/schemas/OrganizationAssignmentRequest"
                  }
                },
                "userAssignments": {
                  "type": "array",
                  "description": "The user assignments.",
                  "nullable": true,
                  "items": {
                    "$ref": "#/components/schemas/UserAssignmentRequest"
                  }
                },
                "siteAssignment": {
                  "description": "The site assignment.",
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/SiteAssignmentRequest"
                    }
                  ]
                },
                "hasVmUseRights": {
                  "type": "boolean",
                  "description": "```true``` if has VM use rights; otherwise, ```false```.",
                  "nullable": true,
                  "example": true
                },
                "numberOfSupportedVirtualMachines": {
                  "type": "integer",
                  "description": "The number of VM supported by license.",
                  "format": "int32",
                  "nullable": true,
                  "example": 3
                }
              }
            },
            "IContractResolver": {
              "type": "object",
              "x-abstract": true,
              "additionalProperties": false
            },
            "Object": {},
            "OperationType": {
              "type": "string",
              "description": "The type of patch operation.",
              "x-enumNames": [
                "Add",
                "Remove",
                "Replace",
                "Move",
                "Copy",
                "Test",
                "Invalid"
              ],
              "enum": [
                "Add",
                "Remove",
                "Replace",
                "Move",
                "Copy",
                "Test",
                "Invalid"
              ]
            },
            "OperationBase": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "path": {
                  "type": "string",
                  "description": "A JSON Pointer path.",
                  "nullable": true,
                  "example": "/status"
                },
                "op": {
                  "type": "string",
                  "description": "The operation to perform.",
                  "nullable": true,
                  "example": "Replace"
                },
                "from": {
                  "type": "string",
                  "description": "A JSON Pointer path.",
                  "nullable": true
                }
              }
            },
            "Operation": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/OperationBase"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "value": {
                      "description": "The value to add, replace, or test.",
                      "nullable": true,
                      "example": "Archived"
                    }
                  }
                }
              ]
            },
            "OperationOfPatchLicenseRequest": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Operation"
                },
                {
                  "type": "object",
                  "additionalProperties": false
                }
              ]
            },
            "JsonPatchDocumentOfPatchLicenseRequest": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/OperationOfPatchLicenseRequest"
              }
            },
            "AssignmentType": {
              "type": "string",
              "description": "The assignment type.",
              "x-enumNames": [
                "Organization",
                "Computer",
                "User",
                "Site"
              ],
              "enum": [
                "Organization",
                "Computer",
                "User",
                "Site"
              ]
            },
            "LicenseEntitlement": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/HateoasResource"
                },
                {
                  "type": "object",
                  "description": "The license entitlement.",
                  "additionalProperties": false,
                  "properties": {
                    "applicationId": {
                      "type": "string",
                      "description": "The unique ID of the application.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "organizationId": {
                      "type": "string",
                      "description": "The unique ID of the organization.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "metricId": {
                      "type": "string",
                      "description": "The unique ID of the metric.",
                      "format": "guid",
                      "example": "5891a1d8-7fb0-45bd-b1f6-01c943f9c572"
                    },
                    "assignmentType": {
                      "description": "The assignment type.",
                      "example": "Organization",
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/AssignmentType"
                        }
                      ]
                    },
                    "quantity": {
                      "type": "integer",
                      "description": "The quantity.",
                      "format": "int32",
                      "example": 1
                    }
                  }
                }
              ]
            },
            "FilteredResponseOfLicenseEntitlement": {
              "type": "object",
              "description": "Filtered response.",
              "additionalProperties": false,
              "required": [
                "items",
                "pagination"
              ],
              "properties": {
                "items": {
                  "type": "array",
                  "description": "A collection of items.",
                  "items": {
                    "$ref": "#/components/schemas/LicenseEntitlement"
                  }
                },
                "pagination": {
                  "description": "The pagination details.",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  ]
                }
              }
            },
            "HateoasCollectionOfLicenseEntitlement": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/FilteredResponseOfLicenseEntitlement"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "_links"
                  ],
                  "properties": {
                    "_links": {
                      "type": "array",
                      "description": "A collection of links to related resources.",
                      "items": {
                        "$ref": "#/components/schemas/Link"
                      }
                    }
                  }
                }
              ]
            },
            "ComputerApplicationEntitlement": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/HateoasResource"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "computerId": {
                      "type": "string",
                      "description": "The unique ID of the computer.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "applicationId": {
                      "type": "string",
                      "description": "The unique ID of the application.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "metricId": {
                      "type": "string",
                      "description": "The unique ID of the metric.",
                      "format": "guid",
                      "example": "5891a1d8-7fb0-45bd-b1f6-01c943f9c572"
                    },
                    "entitlementStateId": {
                      "type": "string",
                      "description": "The unique ID of the entitlement state.",
                      "format": "guid",
                      "example": "6fb32edf-1d45-44e3-a55d-6df6068c0c08"
                    }
                  }
                }
              ]
            },
            "FilteredResponseOfComputerApplicationEntitlement": {
              "type": "object",
              "description": "Filtered response.",
              "additionalProperties": false,
              "required": [
                "items",
                "pagination"
              ],
              "properties": {
                "items": {
                  "type": "array",
                  "description": "A collection of items.",
                  "items": {
                    "$ref": "#/components/schemas/ComputerApplicationEntitlement"
                  }
                },
                "pagination": {
                  "description": "The pagination details.",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  ]
                }
              }
            },
            "HateoasCollectionOfComputerApplicationEntitlement": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/FilteredResponseOfComputerApplicationEntitlement"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "_links"
                  ],
                  "properties": {
                    "_links": {
                      "type": "array",
                      "description": "A collection of links to related resources.",
                      "items": {
                        "$ref": "#/components/schemas/Link"
                      }
                    }
                  }
                }
              ]
            },
            "EntitlementState": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/HateoasResource"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The unique ID of the entitlement state.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "name": {
                      "type": "string",
                      "description": "The name of the entitlement state.",
                      "nullable": true,
                      "example": "Partially covered"
                    },
                    "description": {
                      "type": "string",
                      "description": "The description of the entitlement state.",
                      "nullable": true,
                      "example": "The virtual machine is licensed by the host it is running on."
                    }
                  }
                }
              ]
            },
            "FilteredResponseOfEntitlementState": {
              "type": "object",
              "description": "Filtered response.",
              "additionalProperties": false,
              "required": [
                "items",
                "pagination"
              ],
              "properties": {
                "items": {
                  "type": "array",
                  "description": "A collection of items.",
                  "items": {
                    "$ref": "#/components/schemas/EntitlementState"
                  }
                },
                "pagination": {
                  "description": "The pagination details.",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  ]
                }
              }
            },
            "HateoasCollectionOfEntitlementState": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/FilteredResponseOfEntitlementState"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "_links"
                  ],
                  "properties": {
                    "_links": {
                      "type": "array",
                      "description": "A collection of links to related resources.",
                      "items": {
                        "$ref": "#/components/schemas/Link"
                      }
                    }
                  }
                }
              ]
            },
            "UserApplicationEntitlement": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/HateoasResource"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "userId": {
                      "type": "string",
                      "description": "The unique ID of the user.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "applicationId": {
                      "type": "string",
                      "description": "The unique ID of the application.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "metricId": {
                      "type": "string",
                      "description": "The unique ID of the metric.",
                      "format": "guid",
                      "example": "5891a1d8-7fb0-45bd-b1f6-01c943f9c572"
                    },
                    "entitlementStateId": {
                      "type": "string",
                      "description": "The unique ID of the entitlement state.",
                      "format": "guid",
                      "example": "6fb32edf-1d45-44e3-a55d-6df6068c0c08"
                    }
                  }
                }
              ]
            },
            "FilteredResponseOfUserApplicationEntitlement": {
              "type": "object",
              "description": "Filtered response.",
              "additionalProperties": false,
              "required": [
                "items",
                "pagination"
              ],
              "properties": {
                "items": {
                  "type": "array",
                  "description": "A collection of items.",
                  "items": {
                    "$ref": "#/components/schemas/UserApplicationEntitlement"
                  }
                },
                "pagination": {
                  "description": "The pagination details.",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  ]
                }
              }
            },
            "HateoasCollectionOfUserApplicationEntitlement": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/FilteredResponseOfUserApplicationEntitlement"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "_links"
                  ],
                  "properties": {
                    "_links": {
                      "type": "array",
                      "description": "A collection of links to related resources.",
                      "items": {
                        "$ref": "#/components/schemas/Link"
                      }
                    }
                  }
                }
              ]
            },
            "ExtendedCoverageType": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/HateoasResource"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The type of the extended coverage.",
                      "nullable": true,
                      "example": "Passive"
                    }
                  }
                }
              ]
            },
            "FilteredResponseOfExtendedCoverageType": {
              "type": "object",
              "description": "Filtered response.",
              "additionalProperties": false,
              "required": [
                "items",
                "pagination"
              ],
              "properties": {
                "items": {
                  "type": "array",
                  "description": "A collection of items.",
                  "items": {
                    "$ref": "#/components/schemas/ExtendedCoverageType"
                  }
                },
                "pagination": {
                  "description": "The pagination details.",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  ]
                }
              }
            },
            "HateoasCollectionOfExtendedCoverageType": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/FilteredResponseOfExtendedCoverageType"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "_links"
                  ],
                  "properties": {
                    "_links": {
                      "type": "array",
                      "description": "A collection of links to related resources.",
                      "items": {
                        "$ref": "#/components/schemas/Link"
                      }
                    }
                  }
                }
              ]
            },
            "ExtendedCoverageReason": {
              "type": "string",
              "description": "The extended coverage reason.",
              "x-enumNames": [
                "Other",
                "Passive",
                "Disaster",
                "TestingOrDevelopment"
              ],
              "enum": [
                "Other",
                "Passive",
                "Disaster",
                "TestingOrDevelopment"
              ]
            },
            "LicenseExtendedCoverage": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/HateoasResource"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The unique ID of the license.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "parentComputerId": {
                      "type": "string",
                      "description": "The unique ID of the parent computer.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "isParentComputerDatacenter": {
                      "type": "boolean",
                      "description": "```true``` if parent is datacenter; otherwise, ```false```.",
                      "example": true
                    },
                    "extendedComputerId": {
                      "type": "string",
                      "description": "The unique ID of the extended computer.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "applicationId": {
                      "type": "string",
                      "description": "The unique ID of the application.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "coveredApplicationId": {
                      "type": "string",
                      "description": "The unique ID of the application.",
                      "format": "guid",
                      "nullable": true,
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "reason": {
                      "description": "The incomplete license reason.",
                      "example": "Disaster",
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/ExtendedCoverageReason"
                        }
                      ]
                    },
                    "reasonDescription": {
                      "type": "string",
                      "description": "The reason description.",
                      "nullable": true,
                      "example": "The recovery reason description"
                    }
                  }
                }
              ]
            },
            "FilteredResponseOfLicenseExtendedCoverage": {
              "type": "object",
              "description": "Filtered response.",
              "additionalProperties": false,
              "required": [
                "items",
                "pagination"
              ],
              "properties": {
                "items": {
                  "type": "array",
                  "description": "A collection of items.",
                  "items": {
                    "$ref": "#/components/schemas/LicenseExtendedCoverage"
                  }
                },
                "pagination": {
                  "description": "The pagination details.",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  ]
                }
              }
            },
            "HateoasCollectionOfLicenseExtendedCoverage": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/FilteredResponseOfLicenseExtendedCoverage"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "_links"
                  ],
                  "properties": {
                    "_links": {
                      "type": "array",
                      "description": "A collection of links to related resources.",
                      "items": {
                        "$ref": "#/components/schemas/Link"
                      }
                    }
                  }
                }
              ]
            },
            "LicenseCost": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/HateoasResource"
                },
                {
                  "type": "object",
                  "description": "The license cost.",
                  "additionalProperties": false,
                  "properties": {
                    "licenseId": {
                      "type": "string",
                      "description": "The unique ID of the license.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "organizationId": {
                      "type": "string",
                      "description": "The unique ID of the organization.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "licenseQuantity": {
                      "type": "integer",
                      "description": "The quantity.",
                      "format": "int32",
                      "example": 1
                    },
                    "licensePurchaseCost": {
                      "type": "number",
                      "description": "The license purchase value.",
                      "format": "decimal",
                      "example": 1000
                    },
                    "currentMaintenanceCost": {
                      "type": "number",
                      "description": "The current maintenance cost.",
                      "format": "decimal",
                      "example": 1000
                    },
                    "accumulatedMaintenanceCost": {
                      "type": "number",
                      "description": "The accumulated maintenance cost.",
                      "format": "decimal",
                      "example": 1000
                    },
                    "currentSupportCost": {
                      "type": "number",
                      "description": "The current support cost.",
                      "format": "decimal",
                      "example": 1000
                    },
                    "accumulatedSupportCost": {
                      "type": "number",
                      "description": "The accumulated support cost.",
                      "format": "decimal",
                      "example": 1000
                    },
                    "totalCost": {
                      "type": "number",
                      "description": "The total license cost.",
                      "format": "decimal",
                      "example": 1000
                    },
                    "currency": {
                      "type": "string",
                      "description": "The currency.",
                      "nullable": true,
                      "example": "USD"
                    }
                  }
                }
              ]
            },
            "FilteredResponseOfLicenseCost": {
              "type": "object",
              "description": "Filtered response.",
              "additionalProperties": false,
              "required": [
                "items",
                "pagination"
              ],
              "properties": {
                "items": {
                  "type": "array",
                  "description": "A collection of items.",
                  "items": {
                    "$ref": "#/components/schemas/LicenseCost"
                  }
                },
                "pagination": {
                  "description": "The pagination details.",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  ]
                }
              }
            },
            "HateoasCollectionOfLicenseCost": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/FilteredResponseOfLicenseCost"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "_links"
                  ],
                  "properties": {
                    "_links": {
                      "type": "array",
                      "description": "A collection of links to related resources.",
                      "items": {
                        "$ref": "#/components/schemas/Link"
                      }
                    }
                  }
                }
              ]
            },
            "LicenseCostSummary": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/HateoasResource"
                },
                {
                  "type": "object",
                  "description": "The license cost summary.",
                  "additionalProperties": false,
                  "properties": {
                    "licenseId": {
                      "type": "string",
                      "description": "The unique ID of the license.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "quantity": {
                      "type": "integer",
                      "description": "The quantity.",
                      "format": "int32",
                      "example": 1
                    },
                    "purchaseCost": {
                      "type": "number",
                      "description": "The license purchase value.",
                      "format": "decimal",
                      "example": 1000
                    },
                    "currentMaintenanceCost": {
                      "type": "number",
                      "description": "The current maintenance cost.",
                      "format": "decimal",
                      "example": 1000
                    },
                    "accumulatedMaintenanceCost": {
                      "type": "number",
                      "description": "The accumulated maintenance cost.",
                      "format": "decimal",
                      "example": 1000
                    },
                    "currentSupportCost": {
                      "type": "number",
                      "description": "The current support cost.",
                      "format": "decimal",
                      "example": 1000
                    },
                    "accumulatedSupportCost": {
                      "type": "number",
                      "description": "The accumulated support cost.",
                      "format": "decimal",
                      "example": 1000
                    },
                    "totalCost": {
                      "type": "number",
                      "description": "The total license cost.",
                      "format": "decimal",
                      "example": 1000
                    },
                    "averageCostPerLicensePurchase": {
                      "type": "number",
                      "description": "The average cost per license purchase.",
                      "format": "decimal",
                      "example": 100
                    },
                    "currency": {
                      "type": "string",
                      "description": "The currency.",
                      "nullable": true,
                      "example": "USD"
                    }
                  }
                }
              ]
            },
            "AllocationSummaryCollectionItem": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/HateoasResource"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "applicationId": {
                      "type": "string",
                      "description": "The unique ID of the application.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "metricId": {
                      "type": "string",
                      "description": "The unique ID of the metric.",
                      "format": "guid",
                      "example": "5891a1d8-7fb0-45bd-b1f6-01c943f9c572"
                    },
                    "organizationId": {
                      "type": "string",
                      "description": "The unique ID of the organization.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "requirement": {
                      "type": "integer",
                      "description": "The requirement quantity.",
                      "format": "int32",
                      "example": 1
                    },
                    "coverage": {
                      "type": "integer",
                      "description": "The coverage of the assigned licenses.",
                      "format": "int32",
                      "example": 1
                    },
                    "compliance": {
                      "type": "integer",
                      "description": "The compliance value.",
                      "format": "int32",
                      "example": 1
                    }
                  }
                }
              ]
            },
            "FilteredResponseOfAllocationSummaryCollectionItem": {
              "type": "object",
              "description": "Filtered response.",
              "additionalProperties": false,
              "required": [
                "items",
                "pagination"
              ],
              "properties": {
                "items": {
                  "type": "array",
                  "description": "A collection of items.",
                  "items": {
                    "$ref": "#/components/schemas/AllocationSummaryCollectionItem"
                  }
                },
                "pagination": {
                  "description": "The pagination details.",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  ]
                }
              }
            },
            "HateoasCollectionOfAllocationSummaryCollectionItem": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/FilteredResponseOfAllocationSummaryCollectionItem"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "_links"
                  ],
                  "properties": {
                    "_links": {
                      "type": "array",
                      "description": "A collection of links to related resources.",
                      "items": {
                        "$ref": "#/components/schemas/Link"
                      }
                    }
                  }
                }
              ]
            },
            "ComplianceSummaryCollection": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/HateoasResource"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "applicationId": {
                      "type": "string",
                      "description": "The unique ID of the application.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "metricId": {
                      "type": "string",
                      "description": "The unique ID of the metric.",
                      "format": "guid",
                      "example": "5891a1d8-7fb0-45bd-b1f6-01c943f9c572"
                    },
                    "availableLicenses": {
                      "type": "integer",
                      "description": "The available licenses quantity.",
                      "format": "int32",
                      "example": 1
                    },
                    "compliance": {
                      "type": "integer",
                      "description": "The compliance value.",
                      "format": "int32",
                      "example": 1
                    },
                    "licensesPurchased": {
                      "type": "integer",
                      "description": "The number of licenses that have been purchased.",
                      "format": "int32",
                      "example": 1
                    },
                    "incompleteLicenses": {
                      "type": "integer",
                      "description": "The number of incomplete licenses.",
                      "format": "int32",
                      "example": 1
                    },
                    "expiredSubscriptionLicenses": {
                      "type": "integer",
                      "description": "The number of expired subscription licenses.",
                      "format": "int32",
                      "example": 1
                    },
                    "invalidAssignments": {
                      "type": "integer",
                      "description": "The number of invalid assignments.",
                      "format": "int32",
                      "example": 1
                    },
                    "unassigned": {
                      "type": "integer",
                      "description": "The number of unassigned licenses.",
                      "format": "int32",
                      "example": 1
                    },
                    "assignedNamedUsers": {
                      "type": "integer",
                      "description": "The number of licenses assigned to named users.",
                      "format": "int32",
                      "example": 1
                    },
                    "siteLicenses": {
                      "type": "integer",
                      "description": "The number of site licenses.",
                      "format": "int32",
                      "example": 1
                    },
                    "downgradesGiven": {
                      "type": "integer",
                      "description": "The number of license downgrades given.",
                      "format": "int32",
                      "example": 1
                    },
                    "downgradesReceived": {
                      "type": "integer",
                      "description": "The number of license downgrades received.",
                      "format": "int32",
                      "example": 1
                    },
                    "upgradesGiven": {
                      "type": "integer",
                      "description": "The number of license upgrades given.",
                      "format": "int32",
                      "example": 1
                    },
                    "upgradesReceived": {
                      "type": "integer",
                      "description": "The number of license upgrades received.",
                      "format": "int32",
                      "example": 1
                    },
                    "crossPlatformGiven": {
                      "type": "integer",
                      "description": "The number of cross-platform licenses given.",
                      "format": "int32",
                      "example": 1
                    },
                    "crossPlatformReceived": {
                      "type": "integer",
                      "description": "The number of cross-platform licenses received.",
                      "format": "int32",
                      "example": 1
                    },
                    "crossEditionGiven": {
                      "type": "integer",
                      "description": "The number of cross-edition licenses given.",
                      "format": "int32",
                      "example": 1
                    },
                    "crossEditionReceived": {
                      "type": "integer",
                      "description": "The number of cross-edition licenses received.",
                      "format": "int32",
                      "example": 1
                    },
                    "initialRequirement": {
                      "type": "integer",
                      "description": "The initial requirement.",
                      "format": "int32",
                      "example": 1
                    },
                    "includedInBundle": {
                      "type": "integer",
                      "description": "The number of licenses included in a bundle.",
                      "format": "int32",
                      "example": 1
                    },
                    "outsideMetricPeriod": {
                      "type": "integer",
                      "description": "The number of licenses outside the metric period.",
                      "format": "int32",
                      "example": 1
                    },
                    "secondaryUseRightsDesktopLaptop": {
                      "type": "integer",
                      "description": "The number of licenses for secondary use on desktop or laptop computers.",
                      "format": "int32",
                      "example": 1
                    },
                    "secondaryUseRightsDevice": {
                      "type": "integer",
                      "description": "The number of licenses for secondary use on devices.",
                      "format": "int32",
                      "example": 1
                    },
                    "extendedCoverageForDcc": {
                      "type": "integer",
                      "description": "The number of licenses for extended coverage for datacenter components.",
                      "format": "int32",
                      "example": 1
                    },
                    "extendedCoverageForHosts": {
                      "type": "integer",
                      "description": "The number of licenses for extended coverage for hosts.",
                      "format": "int32",
                      "example": 1
                    },
                    "multipleVersionEdition": {
                      "type": "integer",
                      "description": "The number of licenses for multiple version/edition rights.",
                      "format": "int32",
                      "example": 1
                    },
                    "virtualDesktopInfrastructure": {
                      "type": "integer",
                      "description": "The number of licenses for virtual desktop infrastructure.",
                      "format": "int32",
                      "example": 1
                    },
                    "minimumRequirement": {
                      "type": "integer",
                      "description": "The minimum license requirement.",
                      "format": "int32",
                      "example": 1
                    },
                    "coreFactor": {
                      "type": "integer",
                      "description": "The core factor used for licensing.",
                      "format": "int32",
                      "example": 1
                    },
                    "physicalHost": {
                      "type": "integer",
                      "description": "The number of licenses required for physical hosts.",
                      "format": "int32",
                      "example": 1
                    },
                    "licenseRequirement": {
                      "type": "integer",
                      "description": "The license requirement.",
                      "format": "int32",
                      "example": 1
                    },
                    "computerAppExclusions": {
                      "type": "integer",
                      "description": "The number of licenses excluded for a specific computer application.",
                      "format": "int32",
                      "example": 1
                    },
                    "windowsServer": {
                      "type": "integer",
                      "description": "The number of licenses for Windows Server.",
                      "format": "int32",
                      "example": 1
                    },
                    "sqlServer": {
                      "type": "integer",
                      "description": "The number of licenses for SQL Server.",
                      "format": "int32",
                      "example": 1
                    },
                    "otherMetricCoverage": {
                      "type": "integer",
                      "description": "The coverage value for the other metric.",
                      "format": "int32",
                      "example": 1
                    },
                    "siteCoverage": {
                      "type": "integer",
                      "description": "The number of licenses for site coverage.",
                      "format": "int32",
                      "example": 1
                    },
                    "vmCoverage": {
                      "type": "integer",
                      "description": "The number of licenses for virtual machines.",
                      "format": "int32",
                      "example": 1
                    },
                    "licenseStacking": {
                      "type": "integer",
                      "description": "The number of licenses for license stacking.",
                      "format": "int32",
                      "example": 1
                    },
                    "namedUserCoverage": {
                      "type": "integer",
                      "description": "The number of licenses for named user coverage.",
                      "format": "int32",
                      "example": 1
                    },
                    "licensingOtherMetrics": {
                      "type": "integer",
                      "description": "The number of licenses for other metrics.",
                      "format": "int32",
                      "example": 1
                    },
                    "virtualDesktopAccess": {
                      "type": "integer",
                      "description": "The number of licenses for virtual desktop access.",
                      "format": "int32",
                      "example": 1
                    },
                    "totalCoverage": {
                      "type": "integer",
                      "description": "The total coverage of licenses.",
                      "format": "int32",
                      "example": 1
                    }
                  }
                }
              ]
            },
            "FilteredResponseOfComplianceSummaryCollection": {
              "type": "object",
              "description": "Filtered response.",
              "additionalProperties": false,
              "required": [
                "items",
                "pagination"
              ],
              "properties": {
                "items": {
                  "type": "array",
                  "description": "A collection of items.",
                  "items": {
                    "$ref": "#/components/schemas/ComplianceSummaryCollection"
                  }
                },
                "pagination": {
                  "description": "The pagination details.",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  ]
                }
              }
            },
            "HateoasCollectionOfComplianceSummaryCollection": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/FilteredResponseOfComplianceSummaryCollection"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "_links"
                  ],
                  "properties": {
                    "_links": {
                      "type": "array",
                      "description": "A collection of links to related resources.",
                      "items": {
                        "$ref": "#/components/schemas/Link"
                      }
                    }
                  }
                }
              ]
            },
            "ComplianceSummaryUsageCollection": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/HateoasResource"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "metricId": {
                      "type": "string",
                      "description": "The unique ID of the metric.",
                      "format": "guid",
                      "example": "5891a1d8-7fb0-45bd-b1f6-01c943f9c572"
                    },
                    "licenseMetricId": {
                      "type": "string",
                      "description": "The unique ID of the metric.",
                      "format": "guid",
                      "example": "5891a1d8-7fb0-45bd-b1f6-01c943f9c572"
                    },
                    "otherMetricCoverage": {
                      "type": "integer",
                      "description": "The coverage value for the other metric.",
                      "format": "int32",
                      "example": 1
                    },
                    "mainCoverage": {
                      "type": "integer",
                      "description": "The coverage value.",
                      "format": "int32",
                      "example": 1
                    },
                    "isPartial": {
                      "type": "boolean",
                      "description": "```true``` if is partial coverage; otherwise, ```false```.",
                      "example": true
                    },
                    "applicationId": {
                      "type": "string",
                      "description": "The unique ID of the application.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    }
                  }
                }
              ]
            },
            "FilteredResponseOfComplianceSummaryUsageCollection": {
              "type": "object",
              "description": "Filtered response.",
              "additionalProperties": false,
              "required": [
                "items",
                "pagination"
              ],
              "properties": {
                "items": {
                  "type": "array",
                  "description": "A collection of items.",
                  "items": {
                    "$ref": "#/components/schemas/ComplianceSummaryUsageCollection"
                  }
                },
                "pagination": {
                  "description": "The pagination details.",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  ]
                }
              }
            },
            "HateoasCollectionOfComplianceSummaryUsageCollection": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/FilteredResponseOfComplianceSummaryUsageCollection"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "_links"
                  ],
                  "properties": {
                    "_links": {
                      "type": "array",
                      "description": "A collection of links to related resources.",
                      "items": {
                        "$ref": "#/components/schemas/Link"
                      }
                    }
                  }
                }
              ]
            },
            "AssignmentTypeCollection": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/HateoasResource"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "assignmentType": {
                      "type": "integer",
                      "description": "The assignment type.",
                      "format": "int32",
                      "example": 0
                    },
                    "assignmentTypeId": {
                      "type": "string",
                      "description": "The unique ID of the assignment type.",
                      "format": "guid",
                      "example": "8e5d8f69-c818-4575-9a91-aebae9a9eacc"
                    },
                    "name": {
                      "type": "string",
                      "description": "The name of the assignment type.",
                      "nullable": true,
                      "example": "Organization"
                    }
                  }
                }
              ]
            },
            "FilteredResponseOfAssignmentTypeCollection": {
              "type": "object",
              "description": "Filtered response.",
              "additionalProperties": false,
              "required": [
                "items",
                "pagination"
              ],
              "properties": {
                "items": {
                  "type": "array",
                  "description": "A collection of items.",
                  "items": {
                    "$ref": "#/components/schemas/AssignmentTypeCollection"
                  }
                },
                "pagination": {
                  "description": "The pagination details.",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  ]
                }
              }
            },
            "HateoasCollectionOfAssignmentTypeCollection": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/FilteredResponseOfAssignmentTypeCollection"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "_links"
                  ],
                  "properties": {
                    "_links": {
                      "type": "array",
                      "description": "A collection of links to related resources.",
                      "items": {
                        "$ref": "#/components/schemas/Link"
                      }
                    }
                  }
                }
              ]
            },
            "InvalidAssignmentReasons": {
              "type": "integer",
              "description": "The invalid assignment reason.",
              "x-enumFlags": true,
              "x-enumNames": [
                "None",
                "SubscriptionExpired",
                "Unassigned",
                "ComputerMissing",
                "InactiveComputer",
                "UserMissing",
                "DatacenterMissing",
                "InvalidMetric",
                "NoEliglibleApplicationInstalled",
                "NoEligibleApplicationIsInstalledOnAnyComputerWhereUserIsPrimary",
                "UserHasNotUsedAnyEligibleApplication",
                "Incomplete",
                "OverAssignment",
                "InvalidQuantity",
                "UserHasNotUsedAnyEligibleApplicationWithinPeriod",
                "InvalidMetricGroup",
                "InvalidProcessorCount"
              ],
              "enum": [
                0,
                1,
                2,
                4,
                8,
                16,
                32,
                64,
                128,
                256,
                512,
                1024,
                2048,
                4096,
                8192,
                16384,
                32768
              ]
            },
            "ComputerAssignment": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/CreatedHateoasResponse"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "licenseId": {
                      "type": "string",
                      "description": "The unique ID of the license.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "applicationId": {
                      "type": "string",
                      "description": "The unique ID of the application.",
                      "format": "guid",
                      "nullable": true,
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "computerId": {
                      "type": "string",
                      "description": "The unique ID of the computer.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "quantity": {
                      "type": "integer",
                      "description": "The assigned quantity of licenses.",
                      "format": "int32",
                      "nullable": true,
                      "example": 1
                    },
                    "numberOfSupportedVirtualMachines": {
                      "type": "integer",
                      "description": "The number of supported virtual machines.",
                      "format": "int32",
                      "nullable": true,
                      "example": 1
                    },
                    "hasVmUseRights": {
                      "type": "boolean",
                      "description": "```true``` if has VM use rights; otherwise, ```false```.",
                      "nullable": true,
                      "example": true
                    },
                    "invalidAssignmentReasons": {
                      "description": "Invalid assignment reasons.",
                      "nullable": true,
                      "example": [
                        "OverAssignment"
                      ],
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/InvalidAssignmentReasons"
                        }
                      ]
                    },
                    "virtualMachines": {
                      "type": "array",
                      "description": "The virtual machines.",
                      "nullable": true,
                      "example": [
                        "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                      ],
                      "items": {
                        "type": "string",
                        "format": "guid"
                      }
                    }
                  }
                }
              ]
            },
            "FilteredResponseOfComputerAssignment": {
              "type": "object",
              "description": "Filtered response.",
              "additionalProperties": false,
              "required": [
                "items",
                "pagination"
              ],
              "properties": {
                "items": {
                  "type": "array",
                  "description": "A collection of items.",
                  "items": {
                    "$ref": "#/components/schemas/ComputerAssignment"
                  }
                },
                "pagination": {
                  "description": "The pagination details.",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  ]
                }
              }
            },
            "HateoasCollectionOfComputerAssignment": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/FilteredResponseOfComputerAssignment"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "_links"
                  ],
                  "properties": {
                    "_links": {
                      "type": "array",
                      "description": "A collection of links to related resources.",
                      "items": {
                        "$ref": "#/components/schemas/Link"
                      }
                    }
                  }
                }
              ]
            },
            "ListOfComputerAssignmentRequest": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ComputerAssignmentRequest"
              }
            },
            "DatacenterAssignment": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/CreatedHateoasResponse"
                },
                {
                  "type": "object",
                  "description": "The DCC assignment.",
                  "additionalProperties": false,
                  "properties": {
                    "licenseId": {
                      "type": "string",
                      "description": "The unique ID of the license.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "applicationId": {
                      "type": "string",
                      "description": "The unique ID of the application.",
                      "format": "guid",
                      "nullable": true,
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "datacenterId": {
                      "type": "string",
                      "description": "The unique ID of the DCC.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "quantity": {
                      "type": "integer",
                      "description": "The assigned quantity of licenses.",
                      "format": "int32",
                      "nullable": true,
                      "example": 1
                    },
                    "numberOfSupportedVirtualMachines": {
                      "type": "integer",
                      "description": "The number of supported virtual machines.",
                      "format": "int32",
                      "nullable": true,
                      "example": 1
                    },
                    "hasVmUseRights": {
                      "type": "boolean",
                      "description": "```true``` if has VM use rights; otherwise, ```false```.",
                      "nullable": true,
                      "example": true
                    },
                    "invalidAssignmentReasons": {
                      "description": "Invalid assignment reasons.",
                      "nullable": true,
                      "example": [
                        "OverAssignment"
                      ],
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/InvalidAssignmentReasons"
                        }
                      ]
                    },
                    "virtualMachines": {
                      "type": "array",
                      "description": "The virtual machines.",
                      "nullable": true,
                      "example": [
                        "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                      ],
                      "items": {
                        "type": "string",
                        "format": "guid"
                      }
                    }
                  }
                }
              ]
            },
            "FilteredResponseOfDatacenterAssignment": {
              "type": "object",
              "description": "Filtered response.",
              "additionalProperties": false,
              "required": [
                "items",
                "pagination"
              ],
              "properties": {
                "items": {
                  "type": "array",
                  "description": "A collection of items.",
                  "items": {
                    "$ref": "#/components/schemas/DatacenterAssignment"
                  }
                },
                "pagination": {
                  "description": "The pagination details.",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  ]
                }
              }
            },
            "HateoasCollectionOfDatacenterAssignment": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/FilteredResponseOfDatacenterAssignment"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "_links"
                  ],
                  "properties": {
                    "_links": {
                      "type": "array",
                      "description": "A collection of links to related resources.",
                      "items": {
                        "$ref": "#/components/schemas/Link"
                      }
                    }
                  }
                }
              ]
            },
            "ListOfDatacenterAssignmentRequest": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/DatacenterAssignmentRequest"
              }
            },
            "LicenseAssignmentDetails": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/HateoasResource"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "licenseId": {
                      "type": "string",
                      "description": "The unique ID of the license.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "hasOrganizationAssignment": {
                      "type": "boolean",
                      "description": "```true``` if has organization assignment; otherwise, ```false```.",
                      "example": true
                    },
                    "hasComputerAssignment": {
                      "type": "boolean",
                      "description": "```true``` if has computer assignment; otherwise, ```false```.",
                      "example": true
                    },
                    "hasUserAssignment": {
                      "type": "boolean",
                      "description": "```true``` if has user assignment; otherwise, ```false```.",
                      "example": true
                    },
                    "hasSiteAssignment": {
                      "type": "boolean",
                      "description": "```true``` if has site assignment; otherwise, ```false```.",
                      "example": true
                    }
                  }
                }
              ]
            },
            "OrganizationAssignment": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/CreatedHateoasResponse"
                },
                {
                  "type": "object",
                  "description": "The organization assignment.",
                  "additionalProperties": false,
                  "properties": {
                    "licenseId": {
                      "type": "string",
                      "description": "The unique ID of the license.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "applicationId": {
                      "type": "string",
                      "description": "The unique ID of the application.",
                      "format": "guid",
                      "nullable": true,
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "organizationId": {
                      "type": "string",
                      "description": "The unique ID of the organization.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "quantity": {
                      "type": "integer",
                      "description": "The assigned quantity of licenses.",
                      "format": "int32",
                      "nullable": true,
                      "example": 1
                    },
                    "isAutoAllocated": {
                      "type": "boolean",
                      "description": "```true``` if has auto allocate selected; otherwise, ```false```.",
                      "example": true
                    }
                  }
                }
              ]
            },
            "FilteredResponseOfOrganizationAssignment": {
              "type": "object",
              "description": "Filtered response.",
              "additionalProperties": false,
              "required": [
                "items",
                "pagination"
              ],
              "properties": {
                "items": {
                  "type": "array",
                  "description": "A collection of items.",
                  "items": {
                    "$ref": "#/components/schemas/OrganizationAssignment"
                  }
                },
                "pagination": {
                  "description": "The pagination details.",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  ]
                }
              }
            },
            "HateoasCollectionOfOrganizationAssignment": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/FilteredResponseOfOrganizationAssignment"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "_links"
                  ],
                  "properties": {
                    "_links": {
                      "type": "array",
                      "description": "A collection of links to related resources.",
                      "items": {
                        "$ref": "#/components/schemas/Link"
                      }
                    }
                  }
                }
              ]
            },
            "ListOfOrganizationAssignmentRequest": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/OrganizationAssignmentRequest"
              }
            },
            "SiteAssignment": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/HateoasResource"
                },
                {
                  "type": "object",
                  "description": "The site assignment.",
                  "additionalProperties": false,
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The unique ID of the assignment.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "licenseId": {
                      "type": "string",
                      "description": "The unique ID of the license.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "applicationId": {
                      "type": "string",
                      "description": "The unique ID of the application.",
                      "format": "guid",
                      "nullable": true,
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "organizationId": {
                      "type": "string",
                      "description": "The unique ID of the organization.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "quantity": {
                      "type": "integer",
                      "description": "The assigned quantity of licenses.",
                      "format": "int32",
                      "nullable": true,
                      "example": 1
                    }
                  }
                }
              ]
            },
            "UserAssignment": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/CreatedHateoasResponse"
                },
                {
                  "type": "object",
                  "description": "The user assignment.",
                  "additionalProperties": false,
                  "properties": {
                    "licenseId": {
                      "type": "string",
                      "description": "The unique ID of the license.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "applicationId": {
                      "type": "string",
                      "description": "The unique ID of the application.",
                      "format": "guid",
                      "nullable": true,
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "userId": {
                      "type": "string",
                      "description": "The unique ID of the user.",
                      "format": "guid",
                      "example": "49cdd99f-bc16-40f9-ad40-48f12182fb30"
                    },
                    "quantity": {
                      "type": "integer",
                      "description": "The assigned quantity of licenses.",
                      "format": "int32",
                      "example": 1
                    },
                    "invalidAssignmentReasons": {
                      "description": "Invalid assignment reasons.",
                      "nullable": true,
                      "example": [
                        "OverAssignment"
                      ],
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/InvalidAssignmentReasons"
                        }
                      ]
                    }
                  }
                }
              ]
            },
            "FilteredResponseOfUserAssignment": {
              "type": "object",
              "description": "Filtered response.",
              "additionalProperties": false,
              "required": [
                "items",
                "pagination"
              ],
              "properties": {
                "items": {
                  "type": "array",
                  "description": "A collection of items.",
                  "items": {
                    "$ref": "#/components/schemas/UserAssignment"
                  }
                },
                "pagination": {
                  "description": "The pagination details.",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  ]
                }
              }
            },
            "HateoasCollectionOfUserAssignment": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/FilteredResponseOfUserAssignment"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "_links"
                  ],
                  "properties": {
                    "_links": {
                      "type": "array",
                      "description": "A collection of links to related resources.",
                      "items": {
                        "$ref": "#/components/schemas/Link"
                      }
                    }
                  }
                }
              ]
            },
            "ListOfUserAssignmentRequest": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/UserAssignmentRequest"
              }
            },
            "Status": {
              "type": "string",
              "description": "The status of the license.",
              "x-enumDescriptions": {
                "Active": "The license is active and affects compliance position.",
                "Archived": "The license is archived and does not affect compliance position."
              },
              "example": "Active"
            }
          },
          "securitySchemes": {
            "BearerAuth": {
              "type": "http",
              "scheme": "bearer",
              "bearerFormat": "JWT"
            }
          }
        },
        "tags": [
          {
            "name": "Assignments"
          },
          {
            "name": "Compliance"
          },
          {
            "name": "Costs"
          },
          {
            "name": "Coverage"
          },
          {
            "name": "Entitlements"
          },
          {
            "name": "Licenses"
          },
          {
            "name": "Periods"
          },
          {
            "name": "Policies"
          },
          {
            "name": "Tracking"
          },
          {
            "name": "Transfers"
          },
          {
            "name": "Upgrades"
          }
        ]
      }
    },
    "sam_api_useraccounts": {
      "converted": {
        "openapi": "3.0.3",
        "info": {
          "title": "SAM: User accounts",
          "description": "API for interacting with SAM user accounts.",
          "version": "1.0.0",
          "contact": {
            "name": "Flexera",
            "url": "https://www.flexera.com"
          }
        },
        "servers": [
          {
            "url": "https://{region}.snowsoftware.io",
            "variables": {
              "region": {
                "enum": [
                  "westeurope",
                  "australiasoutheast",
                  "eastus2",
                  "uksouth"
                ],
                "default": "westeurope"
              }
            }
          }
        ],
        "paths": {
          "/api/sam/estate/v1/user-accounts/{id}": {
            "get": {
              "summary": "Get user",
              "description": "Returns the details of the given user.",
              "operationId": "getUserAccount",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "description": "The unique ID of the user.",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/UserAccountDetail"
                      }
                    }
                  }
                },
                "400": {
                  "$ref": "#/components/responses/400"
                },
                "404": {
                  "$ref": "#/components/responses/404"
                },
                "500": {
                  "$ref": "#/components/responses/500"
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.user.r"
                  ]
                }
              ],
              "tags": [
                "User"
              ]
            },
            "patch": {
              "summary": "Update user",
              "description": "Modifies the details of the given user.",
              "operationId": "updateUser",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "description": "The unique ID of the user.",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "requestBody": {
                "content": {
                  "application/json-patch+json": {
                    "schema": {
                      "$ref": "#/components/schemas/PatchRequest"
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/UserAccountDetail"
                      }
                    }
                  }
                },
                "400": {
                  "$ref": "#/components/responses/400"
                },
                "404": {
                  "$ref": "#/components/responses/404"
                },
                "429": {
                  "$ref": "#/components/responses/429"
                },
                "500": {
                  "$ref": "#/components/responses/500"
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.user.u"
                  ]
                }
              ],
              "tags": [
                "User"
              ]
            }
          },
          "/api/sam/estate/v1/user-accounts/{id}/application-rights": {
            "get": {
              "summary": "Get user application rights",
              "description": "Returns a collection of user application rights for the given user.",
              "operationId": "getUserApplicationRights",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "description": "The unique ID of the user.",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "page_size",
                  "in": "query",
                  "description": "The maximum number of items in the response.",
                  "schema": {
                    "type": "integer",
                    "default": 100
                  }
                },
                {
                  "name": "page_number",
                  "in": "query",
                  "description": "The page number.",
                  "schema": {
                    "type": "integer",
                    "default": 1
                  }
                },
                {
                  "name": "filter",
                  "in": "query",
                  "description": "Filter the collection of application rights. Format of the query string parameter:\n\n```\n<filter name> <operator>  -<value>\n```\n\nFilter name | Description | Data type | Example\n:--- | --- | --- | ---\napplicationId | The unique ID of the target application  | String | ?filter=applicationId  -eq \"85d5dc09-115c-40db-a2f6-09f9c935852e\"\n\nFor more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).",
                  "required": false,
                  "schema": {
                    "type": "string",
                    "example": "applicationId  -eq \"85d5dc09-115c-40db-a2f6-09f9c935852e\""
                  }
                },
                {
                  "name": "sort",
                  "in": "query",
                  "description": "Sort the collection of application rights. Format of the query string parameter:\n\n```\n?sort=<field name 1>:<asc|desc>,<field name 2>:<asc|desc>\n```\n\nField name | Description | Example\n:--- | --- | ---\napplicationId | The unique ID of the target application  | ?sort=applicationId:asc\nFor more information on sorting capability and examples, see [Sort API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#sort-api-call-results).\n",
                  "required": false,
                  "schema": {
                    "type": "string",
                    "example": "sort=applicationId:asc"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/FilteredResponseWithLinksOfApplicationRights"
                      }
                    }
                  }
                },
                "400": {
                  "$ref": "#/components/responses/400"
                },
                "404": {
                  "$ref": "#/components/responses/404"
                },
                "500": {
                  "$ref": "#/components/responses/500"
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.user.r"
                  ]
                }
              ],
              "tags": [
                "Application rights"
              ]
            },
            "post": {
              "description": "Creates an application right for the given user.",
              "summary": "Add user application right",
              "operationId": "addUserApplicationRight",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "description": "The unique ID of the user.",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "requestBody": {
                "description": "The application right to add.",
                "required": true,
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/ApplicationRight"
                    }
                  }
                }
              },
              "responses": {
                "201": {
                  "description": "Created: Your request created something new. Usually, this is a call that used the POST method and will allow a GET method to retrieve it later.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ApplicationRight"
                      }
                    }
                  },
                  "headers": {
                    "Location": {
                      "description": "The relative path to the newly created resource.",
                      "schema": {
                        "type": "string",
                        "example": "/api/sam/estate/v1/user-accounts/85d5dc09-115c-40db-a2f6-09f9c935852e/application-rights"
                      }
                    }
                  }
                },
                "400": {
                  "$ref": "#/components/responses/400"
                },
                "404": {
                  "$ref": "#/components/responses/404"
                },
                "409": {
                  "$ref": "#/components/responses/409"
                },
                "500": {
                  "$ref": "#/components/responses/500"
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.user.c"
                  ]
                }
              ],
              "tags": [
                "Application rights"
              ]
            }
          },
          "/api/sam/estate/v1/user-accounts/{id}/application-rights/{appId}": {
            "delete": {
              "description": "Removes the given application right for a user.",
              "summary": "Delete user application right",
              "operationId": "deleteUserApplicationRight",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "description": "The unique ID of the user.",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "appId",
                  "in": "path",
                  "description": "The unique ID of the application.",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "204": {
                  "description": "No Content: Your request succeeded, but the response message was empty."
                },
                "404": {
                  "$ref": "#/components/responses/404"
                },
                "500": {
                  "$ref": "#/components/responses/500"
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.user.d"
                  ]
                }
              ],
              "tags": [
                "Application rights"
              ]
            }
          },
          "/api/sam/estate/v1/user-accounts": {
            "get": {
              "description": "Returns a collection of users.",
              "summary": "Get users",
              "operationId": "getUserAccounts",
              "parameters": [
                {
                  "name": "page_size",
                  "in": "query",
                  "description": "The maximum number of items in the response.",
                  "schema": {
                    "type": "integer",
                    "default": 100
                  }
                },
                {
                  "name": "page_number",
                  "in": "query",
                  "description": "The page number.",
                  "schema": {
                    "type": "integer",
                    "default": 1
                  }
                },
                {
                  "name": "filter",
                  "in": "query",
                  "description": "Filter the collection of Users. Format of the query string parameter:\n\n```\n<filter name> <operator>  -<value>\n```\n\nFilter name | Description | Data type | Example\n:--- | --- | --- | ---\nuserName | The username of a user  | String | ?filter=userName -eq \"Sammy\"\nstatus | The status of a user  | String | ?filter=status -ne \"active\"\nfullName | The full name of a user | String | ?filter=fullName -contains \"Sammy\"\n\nFor more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).",
                  "required": false,
                  "schema": {
                    "type": "string",
                    "example": "status -eq \"active\""
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/FilteredResponseWithLinksOfUserAccount"
                      }
                    }
                  }
                },
                "400": {
                  "$ref": "#/components/responses/400"
                },
                "500": {
                  "$ref": "#/components/responses/500"
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.user.r"
                  ]
                }
              ],
              "tags": [
                "Collection"
              ]
            }
          },
          "/api/sam/estate/v1/user-accounts-discovery/{id}": {
            "get": {
              "description": "Returns the discovery data for the given user.",
              "summary": "Get user discovery data",
              "operationId": "getUserAccountDiscovery",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "description": "The unique ID of the user account.",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/UserAccountDiscoveryDetail"
                      }
                    }
                  }
                },
                "400": {
                  "$ref": "#/components/responses/400"
                },
                "404": {
                  "$ref": "#/components/responses/404"
                },
                "500": {
                  "$ref": "#/components/responses/500"
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.user.r"
                  ]
                }
              ],
              "tags": [
                "User"
              ]
            }
          },
          "/api/sam/estate/v1/user-accounts-discovery": {
            "get": {
              "description": "Returns discovery data for a collection of users.",
              "summary": "Get users discovery data",
              "operationId": "getUserAccountsDiscovery",
              "parameters": [
                {
                  "name": "page_size",
                  "in": "query",
                  "description": "The maximum number of items in the response.",
                  "schema": {
                    "type": "integer",
                    "default": 100
                  }
                },
                {
                  "name": "page_number",
                  "in": "query",
                  "description": "The page number.",
                  "schema": {
                    "type": "integer",
                    "default": 1
                  }
                },
                {
                  "name": "filter",
                  "in": "query",
                  "description": "Filter the collection of user discovery details. Format of the query string parameter:\n\n```\n<filter name> <operator>  -<value>\n```\n\nFilter name | Description | Data type | Example\n:--- | --- | --- | ---\n domainName | The domain name for users | String | ?filter=domainName -eq \"thebagel.co\"\nsamAccountName | The SAM account name of a user  | String | ?filter=samAccountName -eq \"thebagel\\ssmith\"\nemail | The email of a user | String | ?filter=email -eq \"ssmith@example.com\"\n\nFor more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).",
                  "required": false,
                  "schema": {
                    "type": "string",
                    "example": "domainName -eq \"example.com\""
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/FilteredResponseWithLinksOfUserAccountDiscovery"
                      }
                    }
                  }
                },
                "400": {
                  "$ref": "#/components/responses/400"
                },
                "500": {
                  "$ref": "#/components/responses/500"
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.user.r"
                  ]
                }
              ],
              "tags": [
                "Collection"
              ]
            }
          },
          "/api/sam/estate/v1/user-accounts-metering": {
            "get": {
              "description": "Returns metering data for a collection of users.",
              "summary": "Get users metering data",
              "operationId": "getUserAccountsMetering",
              "parameters": [
                {
                  "name": "page_size",
                  "in": "query",
                  "description": "The maximum number of items in the response.",
                  "schema": {
                    "type": "integer",
                    "default": 100
                  }
                },
                {
                  "name": "page_number",
                  "in": "query",
                  "description": "The page number.",
                  "schema": {
                    "type": "integer",
                    "default": 1
                  }
                },
                {
                  "name": "filter",
                  "in": "query",
                  "description": "Filter the collection account metering. Format of the query string parameter:\n\n```\n<filter name> <operator>  -<value>\n```\n\nFilter name | Description | Data type | Example\n:--- | --- | --- | ---\nmetricID | The user account's metric ID | String | ?filter=metricID -eq \"2823fbea-bd7b-4f4f-9f0c-780a5f26218c\"\napplicationID | The user account's application ID  | String | ?filter=applicationID  -eq \"85d5dc09-115c-40db-a2f6-09f9c935852e\"\norganizationID | The user account's organization ID | String | ?filter=organizationID -eq\"317db6a5-e16d-4e3b-a745-1f973690e982\"\n\nFor more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).",
                  "required": false,
                  "schema": {
                    "type": "string",
                    "example": "applicationID  -eq \"85d5dc09-115c-40db-a2f6-09f9c935852e\""
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/FilteredResponseWithLinksOfUserAccountMetering"
                      }
                    }
                  }
                },
                "400": {
                  "$ref": "#/components/responses/400"
                },
                "500": {
                  "$ref": "#/components/responses/500"
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.user.r"
                  ]
                }
              ],
              "tags": [
                "Collection"
              ]
            }
          },
          "/api/sam/estate/v1/user-accounts/{id}/metering": {
            "get": {
              "description": "Returns metering data for the given user.",
              "summary": "Get user metering data",
              "operationId": "getUserMetering",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "description": "The unique ID of the user.",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "page_size",
                  "in": "query",
                  "description": "The maximum number of items in the response.",
                  "schema": {
                    "type": "integer",
                    "default": 100
                  }
                },
                {
                  "name": "page_number",
                  "in": "query",
                  "description": "The page number.",
                  "schema": {
                    "type": "integer",
                    "default": 1
                  }
                },
                {
                  "name": "filter",
                  "in": "query",
                  "description": "Filter the collection account metering. Format of the query string parameter:\n\n```\n<filter name> <operator>  -<value>\n```\n\nFilter name | Description | Data type | Example\n:--- | --- | --- | ---\nmetricID | The user account's metric ID | String | ?filter=metricID -eq \"2823fbea-bd7b-4f4f-9f0c-780a5f26218c\"\napplicationID | The user account's application ID  | String | ?filter=applicationID  -eq \"85d5dc09-115c-40db-a2f6-09f9c935852e\"\norganizationID | The user account's organization ID | String | ?filter=organizationID -eq\"317db6a5-e16d-4e3b-a745-1f973690e982\"\n\nFor more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).",
                  "required": false,
                  "schema": {
                    "type": "string",
                    "example": "applicationID  -eq \"85d5dc09-115c-40db-a2f6-09f9c935852e\""
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/FilteredResponseWithLinksOfUserAccountMetering"
                      }
                    }
                  }
                },
                "400": {
                  "$ref": "#/components/responses/400"
                },
                "404": {
                  "$ref": "#/components/responses/404"
                },
                "500": {
                  "$ref": "#/components/responses/500"
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.user.r"
                  ]
                }
              ],
              "tags": [
                "User"
              ]
            }
          }
        },
        "components": {
          "schemas": {
            "PatchRequest": {
              "items": {
                "$ref": "#/components/schemas/JSONPatchRequestReplace"
              }
            },
            "JSONPatchRequestReplace": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "value",
                "op",
                "path"
              ],
              "properties": {
                "path": {
                  "description": "A JSON Pointer path.",
                  "example": "/fullName",
                  "type": "string"
                },
                "value": {
                  "description": "The value to add, replace, or test.",
                  "example": "John Doe"
                },
                "op": {
                  "description": "The operation to perform.",
                  "example": "replace",
                  "type": "string",
                  "enum": [
                    "replace"
                  ],
                  "x-enumDescriptions": {
                    "replace": "Replaces a value."
                  }
                }
              }
            },
            "Link": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "href": {
                  "description": "The associated relative URL.",
                  "type": "string",
                  "example": "api/sam/estate/v1/...",
                  "nullable": true
                },
                "rel": {
                  "description": "Specifies the relationship between the current document and the linked document/resource.",
                  "type": "string",
                  "example": "self",
                  "nullable": true
                },
                "method": {
                  "description": "The method to access related resources.",
                  "type": "string",
                  "example": "GET",
                  "nullable": true
                }
              },
              "required": [
                "href",
                "rel",
                "method"
              ]
            },
            "UserAccountDetail": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "id": {
                  "type": "string",
                  "example": "d983ee47-92c9-47ad-9975-ec85d2a479a1",
                  "format": "guid",
                  "description": "The unique ID of the user."
                },
                "userName": {
                  "type": "string",
                  "example": "ssmith",
                  "nullable": true,
                  "description": "The login name for the user."
                },
                "status": {
                  "type": "string",
                  "example": "Active",
                  "nullable": true,
                  "description": "The current status of the user."
                },
                "email": {
                  "type": "string",
                  "example": "ssmith@example.com",
                  "nullable": true,
                  "description": "The user's email address."
                },
                "organizationId": {
                  "type": "string",
                  "example": "8b4f2d90-99e7-408a-bad6-68d491e94dba",
                  "format": "guid",
                  "description": "The unique ID of the user's organization."
                },
                "fullName": {
                  "type": "string",
                  "example": "Sammy Smith",
                  "nullable": true,
                  "description": "The user's full name."
                },
                "phoneNumber": {
                  "type": "string",
                  "example": "789-654-1236",
                  "nullable": true,
                  "description": "The user's phone number."
                },
                "location": {
                  "type": "string",
                  "example": "Austin",
                  "nullable": true,
                  "description": "The user's location."
                },
                "roomNumber": {
                  "type": "string",
                  "example": "5716",
                  "nullable": true,
                  "description": "The user's room number."
                },
                "quarantineDate": {
                  "type": "string",
                  "format": "date-time",
                  "nullable": true,
                  "description": "The date at which this user was marked as quarantined."
                },
                "lastLogon": {
                  "type": "string",
                  "format": "date-time",
                  "nullable": true,
                  "description": "The date this user last logged in."
                },
                "lastUpdate": {
                  "type": "string",
                  "format": "date-time",
                  "nullable": true,
                  "description": "The date this user was last updated."
                },
                "updatedDate": {
                  "type": "string",
                  "format": "date-time",
                  "nullable": true,
                  "description": "The date this user was last updated."
                },
                "updatedBy": {
                  "type": "string",
                  "example": "Data Update Job",
                  "nullable": true,
                  "description": "The name of the entity that last updated this user."
                },
                "autoQuarantineManagement": {
                  "type": "boolean",
                  "example": true,
                  "description": "```true``` if this user is subject to auto quarantine management; otherwise, ```false```."
                },
                "autoEditing": {
                  "type": "boolean",
                  "example": true,
                  "description": "```true``` if this user is subject to auto editing; otherwise, ```false```."
                },
                "_links": {
                  "type": "array",
                  "description": "A collection of links to related resources.",
                  "items": {
                    "$ref": "#/components/schemas/Link"
                  }
                }
              },
              "required": [
                "id",
                "_links"
              ]
            },
            "ErrorContent": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "code": {
                  "type": "integer",
                  "description": "The HTTP status code.",
                  "format": "int32"
                },
                "message": {
                  "type": "string",
                  "description": "The error message.",
                  "nullable": true
                }
              },
              "required": [
                "code",
                "message"
              ]
            },
            "ErrorResponse": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "error": {
                  "description": "The error details.",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorContent"
                    }
                  ]
                }
              },
              "required": [
                "error"
              ]
            },
            "Pagination": {
              "type": "object",
              "description": "The pagination details.",
              "additionalProperties": false,
              "properties": {
                "page_size": {
                  "type": "integer",
                  "description": "The page size you requested.",
                  "format": "int32",
                  "example": 100
                },
                "page_number": {
                  "type": "integer",
                  "description": "The page number you requested.",
                  "format": "int32",
                  "example": 1
                },
                "total_pages": {
                  "type": "integer",
                  "description": "The total number of pages.",
                  "format": "int32",
                  "nullable": true,
                  "example": 1
                },
                "total_items": {
                  "type": "integer",
                  "description": "The total number of items.",
                  "format": "int32",
                  "nullable": true,
                  "example": 732
                }
              },
              "required": [
                "page_size",
                "page_number"
              ]
            },
            "UserAccount": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "id": {
                  "type": "string",
                  "example": "8b4f2d90-99e7-408a-bad6-68d491e94dba",
                  "format": "guid",
                  "description": "The unique ID of the user."
                },
                "userName": {
                  "type": "string",
                  "example": "ssmith",
                  "nullable": true,
                  "description": "The login name of the user."
                },
                "status": {
                  "type": "string",
                  "example": "Active",
                  "nullable": true,
                  "description": "The current status of the user."
                },
                "email": {
                  "type": "string",
                  "example": "ssmith@example.com",
                  "nullable": true,
                  "description": "The user's email address."
                },
                "fullName": {
                  "type": "string",
                  "example": "Sammy Smith",
                  "nullable": true,
                  "description": "The user's full name."
                },
                "location": {
                  "type": "string",
                  "example": "Austin",
                  "nullable": true,
                  "description": "The user's location."
                },
                "lastLogon": {
                  "type": "string",
                  "format": "date-time",
                  "nullable": true,
                  "description": "The date of the user's last login."
                },
                "orgHierarchy": {
                  "type": "string",
                  "example": "Snow Software",
                  "nullable": true,
                  "description": "The user's organization."
                },
                "_links": {
                  "type": "array",
                  "description": "A collection of links to related resources.",
                  "items": {
                    "$ref": "#/components/schemas/Link"
                  }
                }
              },
              "required": [
                "id",
                "_links"
              ]
            },
            "FilteredResponseWithLinksOfUserAccount": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "pagination": {
                  "$ref": "#/components/schemas/Pagination"
                },
                "items": {
                  "type": "array",
                  "description": "A collection of filtered user accounts.",
                  "items": {
                    "$ref": "#/components/schemas/UserAccount"
                  }
                },
                "_links": {
                  "type": "array",
                  "description": "A collection of links to related resources.",
                  "items": {
                    "$ref": "#/components/schemas/Link"
                  }
                }
              },
              "required": [
                "pagination",
                "items",
                "_links"
              ]
            },
            "UserAccountDiscoveryDetail": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "objectId": {
                  "type": "string",
                  "example": "32aeda0a-80dc-475a-907f-2d250a3a8614",
                  "format": "guid",
                  "description": "The unique ID of the object."
                },
                "domainName": {
                  "type": "string",
                  "example": "thebagel",
                  "nullable": true,
                  "description": "The user's domain name."
                },
                "samAccountName": {
                  "type": "string",
                  "example": "thebagel\\ssmith",
                  "nullable": true,
                  "description": "The user's SAM account name."
                },
                "firstName": {
                  "type": "string",
                  "example": "Sammy",
                  "nullable": true,
                  "description": "The user's first name."
                },
                "lastName": {
                  "type": "string",
                  "example": "Smith",
                  "nullable": true,
                  "description": "The user's last name."
                },
                "email": {
                  "type": "string",
                  "example": "ssmith@example.com",
                  "nullable": true,
                  "description": "The user's email address."
                },
                "homePhoneNumber": {
                  "type": "string",
                  "example": "789-654-1236",
                  "nullable": true,
                  "description": "The user's home phone number."
                },
                "mobilePhoneNumber": {
                  "type": "string",
                  "example": "555-123-4567",
                  "nullable": true,
                  "description": "The user's mobile phone number."
                },
                "lastLogonActivity": {
                  "type": "string",
                  "format": "date-time",
                  "nullable": true,
                  "description": "The date of the user's last login."
                },
                "whenCreated": {
                  "type": "string",
                  "format": "date-time",
                  "nullable": true,
                  "description": "The date the user was created."
                },
                "whenChanged": {
                  "type": "string",
                  "format": "date-time",
                  "nullable": true,
                  "description": "The date the user was last modified."
                },
                "isEnabled": {
                  "type": "boolean",
                  "nullable": true,
                  "description": "```true``` if this user is enabled; otherwise, ```false```."
                },
                "userAccountControl": {
                  "type": "integer",
                  "format": "int32",
                  "nullable": true,
                  "description": "The user's account control value.",
                  "example": 32768
                },
                "managerName": {
                  "type": "string",
                  "example": "Billy Hare",
                  "nullable": true,
                  "description": "The full name of the user's manager."
                },
                "managerEmail": {
                  "type": "string",
                  "example": "bhare@example.com",
                  "nullable": true,
                  "description": "The email address of the user's manager."
                },
                "organizationalUnit": {
                  "type": "string",
                  "example": "Laurel_MI",
                  "nullable": true,
                  "description": "The name of the user's organizational unit."
                },
                "userPrincipalName": {
                  "type": "string",
                  "example": "ssmith@example.com",
                  "nullable": true,
                  "description": "The user's principal name."
                },
                "_links": {
                  "type": "array",
                  "description": "A collection of links to related resources.",
                  "items": {
                    "$ref": "#/components/schemas/Link"
                  }
                }
              },
              "required": [
                "objectId",
                "_links"
              ]
            },
            "UserAccountDiscovery": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "objectId": {
                  "type": "string",
                  "format": "guid",
                  "description": "The unique ID of the object.",
                  "example": "32aeda0a-80dc-475a-907f-2d250a3a8614"
                },
                "domainName": {
                  "type": "string",
                  "example": "thebagel.co",
                  "nullable": true,
                  "description": "The user's domain name."
                },
                "samAccountName": {
                  "type": "string",
                  "example": "thebagel\\ssmith",
                  "nullable": true,
                  "description": "The user's SAM account name."
                },
                "email": {
                  "type": "string",
                  "example": "ssmith@example.com",
                  "nullable": true,
                  "description": "The user's email address."
                },
                "_links": {
                  "type": "array",
                  "description": "A collection of links to related resources.",
                  "items": {
                    "$ref": "#/components/schemas/Link"
                  }
                }
              },
              "required": [
                "objectId",
                "_links"
              ]
            },
            "FilteredResponseWithLinksOfUserAccountDiscovery": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserAccountDiscovery"
                  },
                  "description": "A collection of filtered user discovery data."
                },
                "pagination": {
                  "$ref": "#/components/schemas/Pagination"
                },
                "_links": {
                  "type": "array",
                  "description": "A collection of links to related resources.",
                  "items": {
                    "$ref": "#/components/schemas/Link"
                  }
                }
              },
              "required": [
                "items",
                "pagination",
                "_links"
              ]
            },
            "UserAccountMetering": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "id": {
                  "type": "string",
                  "format": "guid",
                  "example": "32aeda0a-80dc-475a-907f-2d250a3a8614",
                  "description": "The unique ID of the object."
                },
                "metricID": {
                  "type": "string",
                  "example": "2823fbea-bd7b-4f4f-9f0c-780a5f26218c",
                  "format": "guid",
                  "description": "The unique ID of the metric object."
                },
                "applicationId": {
                  "type": "string",
                  "example": "85d5dc09-115c-40db-a2f6-09f9c935852e",
                  "format": "guid",
                  "description": "The unique ID of the application."
                },
                "organizationId": {
                  "type": "string",
                  "example": "317db6a5-e16d-4e3b-a745-1f973690e982",
                  "format": "guid",
                  "description": "The unique ID of the organization."
                },
                "initialRequirement": {
                  "type": "integer",
                  "format": "int32",
                  "example": 10000,
                  "description": "The initial requirement value."
                },
                "includedInBundle": {
                  "type": "integer",
                  "format": "int32",
                  "example": 100,
                  "description": "The included in bundle value."
                },
                "outsideMetricPeriod": {
                  "type": "integer",
                  "format": "int32",
                  "example": 100,
                  "description": "The outside metric period value."
                },
                "secondaryUseRightsDesktopLaptop": {
                  "type": "integer",
                  "format": "int32",
                  "example": 54221,
                  "description": "The secondary use rights desktop/laptop value."
                },
                "secondaryUseRightsDevice": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The secondary use rights device value.",
                  "example": 32342
                },
                "extendedCoverageForDcc": {
                  "type": "integer",
                  "format": "int32",
                  "example": 6345,
                  "description": "The extended coverage for DCC value."
                },
                "extendedCoverageForHost": {
                  "type": "integer",
                  "format": "int32",
                  "example": 5993,
                  "description": "The extended coverage for host value."
                },
                "multipleVersionEdition": {
                  "type": "integer",
                  "format": "int32",
                  "example": 1,
                  "description": "The multiple version edition value."
                },
                "virtualDesktopInfrastructure": {
                  "type": "integer",
                  "format": "int32",
                  "example": 5343,
                  "description": "The virtual desktop infrastructure value."
                },
                "minimumRequirement": {
                  "type": "integer",
                  "format": "int32",
                  "example": 1,
                  "description": "The minimum requirement value."
                },
                "coreFactor": {
                  "type": "integer",
                  "format": "int32",
                  "example": 2,
                  "description": "The core factor value."
                },
                "requirement": {
                  "type": "integer",
                  "format": "int32",
                  "example": 10,
                  "description": "The requirement value."
                },
                "_links": {
                  "type": "array",
                  "description": "A collection of links to related resources.",
                  "items": {
                    "$ref": "#/components/schemas/Link"
                  }
                }
              },
              "required": [
                "id",
                "_links"
              ]
            },
            "FilteredResponseWithLinksOfUserAccountMetering": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "items": {
                  "type": "array",
                  "description": "A collection of filtered responses that contain metering data links.",
                  "items": {
                    "$ref": "#/components/schemas/UserAccountMetering"
                  }
                },
                "pagination": {
                  "$ref": "#/components/schemas/Pagination"
                },
                "_links": {
                  "type": "array",
                  "description": "A collection of links to related resources.",
                  "items": {
                    "$ref": "#/components/schemas/Link"
                  }
                }
              },
              "required": [
                "items",
                "pagination",
                "_links"
              ]
            },
            "FilteredResponseWithLinksOfApplicationRights": {
              "type": "object",
              "additionalProperties": false,
              "description": "A collection of application rights associated with a user.",
              "properties": {
                "items": {
                  "type": "array",
                  "description": "A collection of application rights associated with a user.",
                  "items": {
                    "$ref": "#/components/schemas/ApplicationRight"
                  }
                },
                "_links": {
                  "type": "array",
                  "description": "A collection of links to related resources.",
                  "items": {
                    "$ref": "#/components/schemas/Link"
                  },
                  "example": [
                    {
                      "href": "/api/sam/software-registry/v1/applications/85d5dc09-115c-40db-a2f6-09f9c935852e",
                      "rel": "self",
                      "method": "GET"
                    }
                  ]
                },
                "pagination": {
                  "$ref": "#/components/schemas/Pagination"
                }
              },
              "required": [
                "items",
                "pagination",
                "_links"
              ]
            },
            "ApplicationRight": {
              "type": "object",
              "additionalProperties": false,
              "description": "An individual application right associated with a user.",
              "properties": {
                "applicationId": {
                  "type": "string",
                  "format": "guid",
                  "description": "The unique ID of the application.",
                  "example": "32aeda0a-80dc-475a-907f-2d250a3a8614"
                }
              },
              "required": [
                "applicationId"
              ]
            }
          },
          "securitySchemes": {
            "BearerAuth": {
              "type": "http",
              "scheme": "bearer",
              "bearerFormat": "JWT"
            }
          },
          "responses": {
            "400": {
              "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  },
                  "example": {
                    "error": {
                      "code": 400,
                      "message": "Invoice ID field needs to be a string."
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  },
                  "example": {
                    "error": {
                      "code": 404,
                      "message": "Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found."
                    }
                  }
                }
              }
            },
            "409": {
              "description": "Conflict: Your request cannot be completed because the requested operation would conflict with an existing item.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  },
                  "example": {
                    "error": {
                      "code": 409,
                      "message": "Unable to create Application Right, user already has a right for application."
                    }
                  }
                }
              }
            },
            "429": {
              "description": "Too Many Requests: You have sent too many requests within a given time span. The recommended action is to check the response header for the backoff time. If it exists, it is indicated by the `Retry-After` response header, in seconds. Abort for the duration specified by Retry-After, and retry.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  },
                  "example": {
                    "error": {
                      "code": 429,
                      "message": "Too Many Requests: You have sent too many requests within a given time span. The recommended action is to check 'Retry-After' response header for the backoff time."
                    }
                  }
                }
              },
              "headers": {
                "Reply-After": {
                  "description": "Returns \"backoff\" time when the bucket is full.",
                  "schema": {
                    "type": "integer"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error: Your request failed due to an internal error.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  },
                  "example": {
                    "error": {
                      "code": 500,
                      "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          {
            "name": "Application rights",
            "description": "Returns or creates a given user's application rights."
          },
          {
            "name": "Collection",
            "description": "Returns a collection of users details."
          },
          {
            "name": "User",
            "description": "Returns or modifies a given user's details."
          }
        ]
      },
      "bundle": {
        "openapi": "3.0.3",
        "info": {
          "title": "SAM: User accounts",
          "description": "API for interacting with SAM user accounts.",
          "version": "1.0.0",
          "contact": {
            "name": "Flexera",
            "url": "https://www.flexera.com"
          }
        },
        "servers": [
          {
            "url": "https://{region}.snowsoftware.io",
            "variables": {
              "region": {
                "enum": [
                  "westeurope",
                  "australiasoutheast",
                  "eastus2",
                  "uksouth"
                ],
                "default": "westeurope"
              }
            }
          }
        ],
        "paths": {
          "/api/sam/estate/v1/user-accounts/{id}": {
            "get": {
              "summary": "Get user",
              "description": "Returns the details of the given user.",
              "operationId": "getUserAccount",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "description": "The unique ID of the user.",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/UserAccountDetail"
                      }
                    }
                  }
                },
                "400": {
                  "$ref": "#/components/responses/400"
                },
                "404": {
                  "$ref": "#/components/responses/404"
                },
                "500": {
                  "$ref": "#/components/responses/500"
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.user.r"
                  ]
                }
              ],
              "tags": [
                "User"
              ]
            },
            "patch": {
              "summary": "Update user",
              "description": "Modifies the details of the given user.",
              "operationId": "updateUser",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "description": "The unique ID of the user.",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "requestBody": {
                "content": {
                  "application/json-patch+json": {
                    "schema": {
                      "$ref": "#/components/schemas/PatchRequest"
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/UserAccountDetail"
                      }
                    }
                  }
                },
                "400": {
                  "$ref": "#/components/responses/400"
                },
                "404": {
                  "$ref": "#/components/responses/404"
                },
                "429": {
                  "$ref": "#/components/responses/429"
                },
                "500": {
                  "$ref": "#/components/responses/500"
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.user.u"
                  ]
                }
              ],
              "tags": [
                "User"
              ]
            }
          },
          "/api/sam/estate/v1/user-accounts/{id}/application-rights": {
            "get": {
              "summary": "Get user application rights",
              "description": "Returns a collection of user application rights for the given user.",
              "operationId": "getUserApplicationRights",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "description": "The unique ID of the user.",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "page_size",
                  "in": "query",
                  "description": "The maximum number of items in the response.",
                  "schema": {
                    "type": "integer",
                    "default": 100
                  }
                },
                {
                  "name": "page_number",
                  "in": "query",
                  "description": "The page number.",
                  "schema": {
                    "type": "integer",
                    "default": 1
                  }
                },
                {
                  "name": "filter",
                  "in": "query",
                  "description": "Filter the collection of application rights. Format of the query string parameter:\n\n```\n<filter name> <operator>  -<value>\n```\n\nFilter name | Description | Data type | Example\n:--- | --- | --- | ---\napplicationId | The unique ID of the target application  | String | ?filter=applicationId  -eq \"85d5dc09-115c-40db-a2f6-09f9c935852e\"\n\nFor more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).",
                  "required": false,
                  "schema": {
                    "type": "string",
                    "example": "applicationId  -eq \"85d5dc09-115c-40db-a2f6-09f9c935852e\""
                  }
                },
                {
                  "name": "sort",
                  "in": "query",
                  "description": "Sort the collection of application rights. Format of the query string parameter:\n\n```\n?sort=<field name 1>:<asc|desc>,<field name 2>:<asc|desc>\n```\n\nField name | Description | Example\n:--- | --- | ---\napplicationId | The unique ID of the target application  | ?sort=applicationId:asc\nFor more information on sorting capability and examples, see [Sort API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#sort-api-call-results).\n",
                  "required": false,
                  "schema": {
                    "type": "string",
                    "example": "sort=applicationId:asc"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/FilteredResponseWithLinksOfApplicationRights"
                      }
                    }
                  }
                },
                "400": {
                  "$ref": "#/components/responses/400"
                },
                "404": {
                  "$ref": "#/components/responses/404"
                },
                "500": {
                  "$ref": "#/components/responses/500"
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.user.r"
                  ]
                }
              ],
              "tags": [
                "Application rights"
              ]
            },
            "post": {
              "description": "Creates an application right for the given user.",
              "summary": "Add user application right",
              "operationId": "addUserApplicationRight",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "description": "The unique ID of the user.",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "requestBody": {
                "description": "The application right to add.",
                "required": true,
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/ApplicationRight"
                    }
                  }
                }
              },
              "responses": {
                "201": {
                  "description": "Created: Your request created something new. Usually, this is a call that used the POST method and will allow a GET method to retrieve it later.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ApplicationRight"
                      }
                    }
                  },
                  "headers": {
                    "Location": {
                      "description": "The relative path to the newly created resource.",
                      "schema": {
                        "type": "string",
                        "example": "/api/sam/estate/v1/user-accounts/85d5dc09-115c-40db-a2f6-09f9c935852e/application-rights"
                      }
                    }
                  }
                },
                "400": {
                  "$ref": "#/components/responses/400"
                },
                "404": {
                  "$ref": "#/components/responses/404"
                },
                "409": {
                  "$ref": "#/components/responses/409"
                },
                "500": {
                  "$ref": "#/components/responses/500"
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.user.c"
                  ]
                }
              ],
              "tags": [
                "Application rights"
              ]
            }
          },
          "/api/sam/estate/v1/user-accounts/{id}/application-rights/{appId}": {
            "delete": {
              "description": "Removes the given application right for a user.",
              "summary": "Delete user application right",
              "operationId": "deleteUserApplicationRight",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "description": "The unique ID of the user.",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "appId",
                  "in": "path",
                  "description": "The unique ID of the application.",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "204": {
                  "description": "No Content: Your request succeeded, but the response message was empty."
                },
                "404": {
                  "$ref": "#/components/responses/404"
                },
                "500": {
                  "$ref": "#/components/responses/500"
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.user.d"
                  ]
                }
              ],
              "tags": [
                "Application rights"
              ]
            }
          },
          "/api/sam/estate/v1/user-accounts": {
            "get": {
              "description": "Returns a collection of users.",
              "summary": "Get users",
              "operationId": "getUserAccounts",
              "parameters": [
                {
                  "name": "page_size",
                  "in": "query",
                  "description": "The maximum number of items in the response.",
                  "schema": {
                    "type": "integer",
                    "default": 100
                  }
                },
                {
                  "name": "page_number",
                  "in": "query",
                  "description": "The page number.",
                  "schema": {
                    "type": "integer",
                    "default": 1
                  }
                },
                {
                  "name": "filter",
                  "in": "query",
                  "description": "Filter the collection of Users. Format of the query string parameter:\n\n```\n<filter name> <operator>  -<value>\n```\n\nFilter name | Description | Data type | Example\n:--- | --- | --- | ---\nuserName | The username of a user  | String | ?filter=userName -eq \"Sammy\"\nstatus | The status of a user  | String | ?filter=status -ne \"active\"\nfullName | The full name of a user | String | ?filter=fullName -contains \"Sammy\"\n\nFor more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).",
                  "required": false,
                  "schema": {
                    "type": "string",
                    "example": "status -eq \"active\""
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/FilteredResponseWithLinksOfUserAccount"
                      }
                    }
                  }
                },
                "400": {
                  "$ref": "#/components/responses/400"
                },
                "500": {
                  "$ref": "#/components/responses/500"
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.user.r"
                  ]
                }
              ],
              "tags": [
                "Collection"
              ]
            }
          },
          "/api/sam/estate/v1/user-accounts-discovery/{id}": {
            "get": {
              "description": "Returns the discovery data for the given user.",
              "summary": "Get user discovery data",
              "operationId": "getUserAccountDiscovery",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "description": "The unique ID of the user account.",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/UserAccountDiscoveryDetail"
                      }
                    }
                  }
                },
                "400": {
                  "$ref": "#/components/responses/400"
                },
                "404": {
                  "$ref": "#/components/responses/404"
                },
                "500": {
                  "$ref": "#/components/responses/500"
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.user.r"
                  ]
                }
              ],
              "tags": [
                "User"
              ]
            }
          },
          "/api/sam/estate/v1/user-accounts-discovery": {
            "get": {
              "description": "Returns discovery data for a collection of users.",
              "summary": "Get users discovery data",
              "operationId": "getUserAccountsDiscovery",
              "parameters": [
                {
                  "name": "page_size",
                  "in": "query",
                  "description": "The maximum number of items in the response.",
                  "schema": {
                    "type": "integer",
                    "default": 100
                  }
                },
                {
                  "name": "page_number",
                  "in": "query",
                  "description": "The page number.",
                  "schema": {
                    "type": "integer",
                    "default": 1
                  }
                },
                {
                  "name": "filter",
                  "in": "query",
                  "description": "Filter the collection of user discovery details. Format of the query string parameter:\n\n```\n<filter name> <operator>  -<value>\n```\n\nFilter name | Description | Data type | Example\n:--- | --- | --- | ---\n domainName | The domain name for users | String | ?filter=domainName -eq \"thebagel.co\"\nsamAccountName | The SAM account name of a user  | String | ?filter=samAccountName -eq \"thebagel\\ssmith\"\nemail | The email of a user | String | ?filter=email -eq \"ssmith@example.com\"\n\nFor more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).",
                  "required": false,
                  "schema": {
                    "type": "string",
                    "example": "domainName -eq \"example.com\""
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/FilteredResponseWithLinksOfUserAccountDiscovery"
                      }
                    }
                  }
                },
                "400": {
                  "$ref": "#/components/responses/400"
                },
                "500": {
                  "$ref": "#/components/responses/500"
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.user.r"
                  ]
                }
              ],
              "tags": [
                "Collection"
              ]
            }
          },
          "/api/sam/estate/v1/user-accounts-metering": {
            "get": {
              "description": "Returns metering data for a collection of users.",
              "summary": "Get users metering data",
              "operationId": "getUserAccountsMetering",
              "parameters": [
                {
                  "name": "page_size",
                  "in": "query",
                  "description": "The maximum number of items in the response.",
                  "schema": {
                    "type": "integer",
                    "default": 100
                  }
                },
                {
                  "name": "page_number",
                  "in": "query",
                  "description": "The page number.",
                  "schema": {
                    "type": "integer",
                    "default": 1
                  }
                },
                {
                  "name": "filter",
                  "in": "query",
                  "description": "Filter the collection account metering. Format of the query string parameter:\n\n```\n<filter name> <operator>  -<value>\n```\n\nFilter name | Description | Data type | Example\n:--- | --- | --- | ---\nmetricID | The user account's metric ID | String | ?filter=metricID -eq \"2823fbea-bd7b-4f4f-9f0c-780a5f26218c\"\napplicationID | The user account's application ID  | String | ?filter=applicationID  -eq \"85d5dc09-115c-40db-a2f6-09f9c935852e\"\norganizationID | The user account's organization ID | String | ?filter=organizationID -eq\"317db6a5-e16d-4e3b-a745-1f973690e982\"\n\nFor more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).",
                  "required": false,
                  "schema": {
                    "type": "string",
                    "example": "applicationID  -eq \"85d5dc09-115c-40db-a2f6-09f9c935852e\""
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/FilteredResponseWithLinksOfUserAccountMetering"
                      }
                    }
                  }
                },
                "400": {
                  "$ref": "#/components/responses/400"
                },
                "500": {
                  "$ref": "#/components/responses/500"
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.user.r"
                  ]
                }
              ],
              "tags": [
                "Collection"
              ]
            }
          },
          "/api/sam/estate/v1/user-accounts/{id}/metering": {
            "get": {
              "description": "Returns metering data for the given user.",
              "summary": "Get user metering data",
              "operationId": "getUserMetering",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "description": "The unique ID of the user.",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "page_size",
                  "in": "query",
                  "description": "The maximum number of items in the response.",
                  "schema": {
                    "type": "integer",
                    "default": 100
                  }
                },
                {
                  "name": "page_number",
                  "in": "query",
                  "description": "The page number.",
                  "schema": {
                    "type": "integer",
                    "default": 1
                  }
                },
                {
                  "name": "filter",
                  "in": "query",
                  "description": "Filter the collection account metering. Format of the query string parameter:\n\n```\n<filter name> <operator>  -<value>\n```\n\nFilter name | Description | Data type | Example\n:--- | --- | --- | ---\nmetricID | The user account's metric ID | String | ?filter=metricID -eq \"2823fbea-bd7b-4f4f-9f0c-780a5f26218c\"\napplicationID | The user account's application ID  | String | ?filter=applicationID  -eq \"85d5dc09-115c-40db-a2f6-09f9c935852e\"\norganizationID | The user account's organization ID | String | ?filter=organizationID -eq\"317db6a5-e16d-4e3b-a745-1f973690e982\"\n\nFor more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).",
                  "required": false,
                  "schema": {
                    "type": "string",
                    "example": "applicationID  -eq \"85d5dc09-115c-40db-a2f6-09f9c935852e\""
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/FilteredResponseWithLinksOfUserAccountMetering"
                      }
                    }
                  }
                },
                "400": {
                  "$ref": "#/components/responses/400"
                },
                "404": {
                  "$ref": "#/components/responses/404"
                },
                "500": {
                  "$ref": "#/components/responses/500"
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.user.r"
                  ]
                }
              ],
              "tags": [
                "User"
              ]
            }
          }
        },
        "components": {
          "schemas": {
            "PatchRequest": {
              "items": {
                "$ref": "#/components/schemas/JSONPatchRequestReplace"
              }
            },
            "JSONPatchRequestReplace": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "value",
                "op",
                "path"
              ],
              "properties": {
                "path": {
                  "description": "A JSON Pointer path.",
                  "example": "/fullName",
                  "type": "string"
                },
                "value": {
                  "description": "The value to add, replace, or test.",
                  "example": "John Doe"
                },
                "op": {
                  "description": "The operation to perform.",
                  "example": "replace",
                  "type": "string",
                  "enum": [
                    "replace"
                  ],
                  "x-enumDescriptions": {
                    "replace": "Replaces a value."
                  }
                }
              }
            },
            "Link": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "href": {
                  "description": "The associated relative URL.",
                  "type": "string",
                  "example": "api/sam/estate/v1/...",
                  "nullable": true
                },
                "rel": {
                  "description": "Specifies the relationship between the current document and the linked document/resource.",
                  "type": "string",
                  "example": "self",
                  "nullable": true
                },
                "method": {
                  "description": "The method to access related resources.",
                  "type": "string",
                  "example": "GET",
                  "nullable": true
                }
              },
              "required": [
                "href",
                "rel",
                "method"
              ]
            },
            "UserAccountDetail": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "id": {
                  "type": "string",
                  "example": "d983ee47-92c9-47ad-9975-ec85d2a479a1",
                  "format": "guid",
                  "description": "The unique ID of the user."
                },
                "userName": {
                  "type": "string",
                  "example": "ssmith",
                  "nullable": true,
                  "description": "The login name for the user."
                },
                "status": {
                  "type": "string",
                  "example": "Active",
                  "nullable": true,
                  "description": "The current status of the user."
                },
                "email": {
                  "type": "string",
                  "example": "ssmith@example.com",
                  "nullable": true,
                  "description": "The user's email address."
                },
                "organizationId": {
                  "type": "string",
                  "example": "8b4f2d90-99e7-408a-bad6-68d491e94dba",
                  "format": "guid",
                  "description": "The unique ID of the user's organization."
                },
                "fullName": {
                  "type": "string",
                  "example": "Sammy Smith",
                  "nullable": true,
                  "description": "The user's full name."
                },
                "phoneNumber": {
                  "type": "string",
                  "example": "789-654-1236",
                  "nullable": true,
                  "description": "The user's phone number."
                },
                "location": {
                  "type": "string",
                  "example": "Austin",
                  "nullable": true,
                  "description": "The user's location."
                },
                "roomNumber": {
                  "type": "string",
                  "example": "5716",
                  "nullable": true,
                  "description": "The user's room number."
                },
                "quarantineDate": {
                  "type": "string",
                  "format": "date-time",
                  "nullable": true,
                  "description": "The date at which this user was marked as quarantined."
                },
                "lastLogon": {
                  "type": "string",
                  "format": "date-time",
                  "nullable": true,
                  "description": "The date this user last logged in."
                },
                "lastUpdate": {
                  "type": "string",
                  "format": "date-time",
                  "nullable": true,
                  "description": "The date this user was last updated."
                },
                "updatedDate": {
                  "type": "string",
                  "format": "date-time",
                  "nullable": true,
                  "description": "The date this user was last updated."
                },
                "updatedBy": {
                  "type": "string",
                  "example": "Data Update Job",
                  "nullable": true,
                  "description": "The name of the entity that last updated this user."
                },
                "autoQuarantineManagement": {
                  "type": "boolean",
                  "example": true,
                  "description": "```true``` if this user is subject to auto quarantine management; otherwise, ```false```."
                },
                "autoEditing": {
                  "type": "boolean",
                  "example": true,
                  "description": "```true``` if this user is subject to auto editing; otherwise, ```false```."
                },
                "_links": {
                  "type": "array",
                  "description": "A collection of links to related resources.",
                  "items": {
                    "$ref": "#/components/schemas/Link"
                  }
                }
              },
              "required": [
                "id",
                "_links"
              ]
            },
            "ErrorContent": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "code": {
                  "type": "integer",
                  "description": "The HTTP status code.",
                  "format": "int32"
                },
                "message": {
                  "type": "string",
                  "description": "The error message.",
                  "nullable": true
                }
              },
              "required": [
                "code",
                "message"
              ]
            },
            "ErrorResponse": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "error": {
                  "description": "The error details.",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorContent"
                    }
                  ]
                }
              },
              "required": [
                "error"
              ]
            },
            "Pagination": {
              "type": "object",
              "description": "The pagination details.",
              "additionalProperties": false,
              "properties": {
                "page_size": {
                  "type": "integer",
                  "description": "The page size you requested.",
                  "format": "int32",
                  "example": 100
                },
                "page_number": {
                  "type": "integer",
                  "description": "The page number you requested.",
                  "format": "int32",
                  "example": 1
                },
                "total_pages": {
                  "type": "integer",
                  "description": "The total number of pages.",
                  "format": "int32",
                  "nullable": true,
                  "example": 1
                },
                "total_items": {
                  "type": "integer",
                  "description": "The total number of items.",
                  "format": "int32",
                  "nullable": true,
                  "example": 732
                }
              },
              "required": [
                "page_size",
                "page_number"
              ]
            },
            "UserAccount": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "id": {
                  "type": "string",
                  "example": "8b4f2d90-99e7-408a-bad6-68d491e94dba",
                  "format": "guid",
                  "description": "The unique ID of the user."
                },
                "userName": {
                  "type": "string",
                  "example": "ssmith",
                  "nullable": true,
                  "description": "The login name of the user."
                },
                "status": {
                  "type": "string",
                  "example": "Active",
                  "nullable": true,
                  "description": "The current status of the user."
                },
                "email": {
                  "type": "string",
                  "example": "ssmith@example.com",
                  "nullable": true,
                  "description": "The user's email address."
                },
                "fullName": {
                  "type": "string",
                  "example": "Sammy Smith",
                  "nullable": true,
                  "description": "The user's full name."
                },
                "location": {
                  "type": "string",
                  "example": "Austin",
                  "nullable": true,
                  "description": "The user's location."
                },
                "lastLogon": {
                  "type": "string",
                  "format": "date-time",
                  "nullable": true,
                  "description": "The date of the user's last login."
                },
                "orgHierarchy": {
                  "type": "string",
                  "example": "Snow Software",
                  "nullable": true,
                  "description": "The user's organization."
                },
                "_links": {
                  "type": "array",
                  "description": "A collection of links to related resources.",
                  "items": {
                    "$ref": "#/components/schemas/Link"
                  }
                }
              },
              "required": [
                "id",
                "_links"
              ]
            },
            "FilteredResponseWithLinksOfUserAccount": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "pagination": {
                  "$ref": "#/components/schemas/Pagination"
                },
                "items": {
                  "type": "array",
                  "description": "A collection of filtered user accounts.",
                  "items": {
                    "$ref": "#/components/schemas/UserAccount"
                  }
                },
                "_links": {
                  "type": "array",
                  "description": "A collection of links to related resources.",
                  "items": {
                    "$ref": "#/components/schemas/Link"
                  }
                }
              },
              "required": [
                "pagination",
                "items",
                "_links"
              ]
            },
            "UserAccountDiscoveryDetail": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "objectId": {
                  "type": "string",
                  "example": "32aeda0a-80dc-475a-907f-2d250a3a8614",
                  "format": "guid",
                  "description": "The unique ID of the object."
                },
                "domainName": {
                  "type": "string",
                  "example": "thebagel",
                  "nullable": true,
                  "description": "The user's domain name."
                },
                "samAccountName": {
                  "type": "string",
                  "example": "thebagel\\ssmith",
                  "nullable": true,
                  "description": "The user's SAM account name."
                },
                "firstName": {
                  "type": "string",
                  "example": "Sammy",
                  "nullable": true,
                  "description": "The user's first name."
                },
                "lastName": {
                  "type": "string",
                  "example": "Smith",
                  "nullable": true,
                  "description": "The user's last name."
                },
                "email": {
                  "type": "string",
                  "example": "ssmith@example.com",
                  "nullable": true,
                  "description": "The user's email address."
                },
                "homePhoneNumber": {
                  "type": "string",
                  "example": "789-654-1236",
                  "nullable": true,
                  "description": "The user's home phone number."
                },
                "mobilePhoneNumber": {
                  "type": "string",
                  "example": "555-123-4567",
                  "nullable": true,
                  "description": "The user's mobile phone number."
                },
                "lastLogonActivity": {
                  "type": "string",
                  "format": "date-time",
                  "nullable": true,
                  "description": "The date of the user's last login."
                },
                "whenCreated": {
                  "type": "string",
                  "format": "date-time",
                  "nullable": true,
                  "description": "The date the user was created."
                },
                "whenChanged": {
                  "type": "string",
                  "format": "date-time",
                  "nullable": true,
                  "description": "The date the user was last modified."
                },
                "isEnabled": {
                  "type": "boolean",
                  "nullable": true,
                  "description": "```true``` if this user is enabled; otherwise, ```false```."
                },
                "userAccountControl": {
                  "type": "integer",
                  "format": "int32",
                  "nullable": true,
                  "description": "The user's account control value.",
                  "example": 32768
                },
                "managerName": {
                  "type": "string",
                  "example": "Billy Hare",
                  "nullable": true,
                  "description": "The full name of the user's manager."
                },
                "managerEmail": {
                  "type": "string",
                  "example": "bhare@example.com",
                  "nullable": true,
                  "description": "The email address of the user's manager."
                },
                "organizationalUnit": {
                  "type": "string",
                  "example": "Laurel_MI",
                  "nullable": true,
                  "description": "The name of the user's organizational unit."
                },
                "userPrincipalName": {
                  "type": "string",
                  "example": "ssmith@example.com",
                  "nullable": true,
                  "description": "The user's principal name."
                },
                "_links": {
                  "type": "array",
                  "description": "A collection of links to related resources.",
                  "items": {
                    "$ref": "#/components/schemas/Link"
                  }
                }
              },
              "required": [
                "objectId",
                "_links"
              ]
            },
            "UserAccountDiscovery": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "objectId": {
                  "type": "string",
                  "format": "guid",
                  "description": "The unique ID of the object.",
                  "example": "32aeda0a-80dc-475a-907f-2d250a3a8614"
                },
                "domainName": {
                  "type": "string",
                  "example": "thebagel.co",
                  "nullable": true,
                  "description": "The user's domain name."
                },
                "samAccountName": {
                  "type": "string",
                  "example": "thebagel\\ssmith",
                  "nullable": true,
                  "description": "The user's SAM account name."
                },
                "email": {
                  "type": "string",
                  "example": "ssmith@example.com",
                  "nullable": true,
                  "description": "The user's email address."
                },
                "_links": {
                  "type": "array",
                  "description": "A collection of links to related resources.",
                  "items": {
                    "$ref": "#/components/schemas/Link"
                  }
                }
              },
              "required": [
                "objectId",
                "_links"
              ]
            },
            "FilteredResponseWithLinksOfUserAccountDiscovery": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserAccountDiscovery"
                  },
                  "description": "A collection of filtered user discovery data."
                },
                "pagination": {
                  "$ref": "#/components/schemas/Pagination"
                },
                "_links": {
                  "type": "array",
                  "description": "A collection of links to related resources.",
                  "items": {
                    "$ref": "#/components/schemas/Link"
                  }
                }
              },
              "required": [
                "items",
                "pagination",
                "_links"
              ]
            },
            "UserAccountMetering": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "id": {
                  "type": "string",
                  "format": "guid",
                  "example": "32aeda0a-80dc-475a-907f-2d250a3a8614",
                  "description": "The unique ID of the object."
                },
                "metricID": {
                  "type": "string",
                  "example": "2823fbea-bd7b-4f4f-9f0c-780a5f26218c",
                  "format": "guid",
                  "description": "The unique ID of the metric object."
                },
                "applicationId": {
                  "type": "string",
                  "example": "85d5dc09-115c-40db-a2f6-09f9c935852e",
                  "format": "guid",
                  "description": "The unique ID of the application."
                },
                "organizationId": {
                  "type": "string",
                  "example": "317db6a5-e16d-4e3b-a745-1f973690e982",
                  "format": "guid",
                  "description": "The unique ID of the organization."
                },
                "initialRequirement": {
                  "type": "integer",
                  "format": "int32",
                  "example": 10000,
                  "description": "The initial requirement value."
                },
                "includedInBundle": {
                  "type": "integer",
                  "format": "int32",
                  "example": 100,
                  "description": "The included in bundle value."
                },
                "outsideMetricPeriod": {
                  "type": "integer",
                  "format": "int32",
                  "example": 100,
                  "description": "The outside metric period value."
                },
                "secondaryUseRightsDesktopLaptop": {
                  "type": "integer",
                  "format": "int32",
                  "example": 54221,
                  "description": "The secondary use rights desktop/laptop value."
                },
                "secondaryUseRightsDevice": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The secondary use rights device value.",
                  "example": 32342
                },
                "extendedCoverageForDcc": {
                  "type": "integer",
                  "format": "int32",
                  "example": 6345,
                  "description": "The extended coverage for DCC value."
                },
                "extendedCoverageForHost": {
                  "type": "integer",
                  "format": "int32",
                  "example": 5993,
                  "description": "The extended coverage for host value."
                },
                "multipleVersionEdition": {
                  "type": "integer",
                  "format": "int32",
                  "example": 1,
                  "description": "The multiple version edition value."
                },
                "virtualDesktopInfrastructure": {
                  "type": "integer",
                  "format": "int32",
                  "example": 5343,
                  "description": "The virtual desktop infrastructure value."
                },
                "minimumRequirement": {
                  "type": "integer",
                  "format": "int32",
                  "example": 1,
                  "description": "The minimum requirement value."
                },
                "coreFactor": {
                  "type": "integer",
                  "format": "int32",
                  "example": 2,
                  "description": "The core factor value."
                },
                "requirement": {
                  "type": "integer",
                  "format": "int32",
                  "example": 10,
                  "description": "The requirement value."
                },
                "_links": {
                  "type": "array",
                  "description": "A collection of links to related resources.",
                  "items": {
                    "$ref": "#/components/schemas/Link"
                  }
                }
              },
              "required": [
                "id",
                "_links"
              ]
            },
            "FilteredResponseWithLinksOfUserAccountMetering": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "items": {
                  "type": "array",
                  "description": "A collection of filtered responses that contain metering data links.",
                  "items": {
                    "$ref": "#/components/schemas/UserAccountMetering"
                  }
                },
                "pagination": {
                  "$ref": "#/components/schemas/Pagination"
                },
                "_links": {
                  "type": "array",
                  "description": "A collection of links to related resources.",
                  "items": {
                    "$ref": "#/components/schemas/Link"
                  }
                }
              },
              "required": [
                "items",
                "pagination",
                "_links"
              ]
            },
            "FilteredResponseWithLinksOfApplicationRights": {
              "type": "object",
              "additionalProperties": false,
              "description": "A collection of application rights associated with a user.",
              "properties": {
                "items": {
                  "type": "array",
                  "description": "A collection of application rights associated with a user.",
                  "items": {
                    "$ref": "#/components/schemas/ApplicationRight"
                  }
                },
                "_links": {
                  "type": "array",
                  "description": "A collection of links to related resources.",
                  "items": {
                    "$ref": "#/components/schemas/Link"
                  },
                  "example": [
                    {
                      "href": "/api/sam/software-registry/v1/applications/85d5dc09-115c-40db-a2f6-09f9c935852e",
                      "rel": "self",
                      "method": "GET"
                    }
                  ]
                },
                "pagination": {
                  "$ref": "#/components/schemas/Pagination"
                }
              },
              "required": [
                "items",
                "pagination",
                "_links"
              ]
            },
            "ApplicationRight": {
              "type": "object",
              "additionalProperties": false,
              "description": "An individual application right associated with a user.",
              "properties": {
                "applicationId": {
                  "type": "string",
                  "format": "guid",
                  "description": "The unique ID of the application.",
                  "example": "32aeda0a-80dc-475a-907f-2d250a3a8614"
                }
              },
              "required": [
                "applicationId"
              ]
            }
          },
          "securitySchemes": {
            "BearerAuth": {
              "type": "http",
              "scheme": "bearer",
              "bearerFormat": "JWT"
            }
          },
          "responses": {
            "400": {
              "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  },
                  "example": {
                    "error": {
                      "code": 400,
                      "message": "Invoice ID field needs to be a string."
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  },
                  "example": {
                    "error": {
                      "code": 404,
                      "message": "Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found."
                    }
                  }
                }
              }
            },
            "409": {
              "description": "Conflict: Your request cannot be completed because the requested operation would conflict with an existing item.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  },
                  "example": {
                    "error": {
                      "code": 409,
                      "message": "Unable to create Application Right, user already has a right for application."
                    }
                  }
                }
              }
            },
            "429": {
              "description": "Too Many Requests: You have sent too many requests within a given time span. The recommended action is to check the response header for the backoff time. If it exists, it is indicated by the `Retry-After` response header, in seconds. Abort for the duration specified by Retry-After, and retry.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  },
                  "example": {
                    "error": {
                      "code": 429,
                      "message": "Too Many Requests: You have sent too many requests within a given time span. The recommended action is to check 'Retry-After' response header for the backoff time."
                    }
                  }
                }
              },
              "headers": {
                "Reply-After": {
                  "description": "Returns \"backoff\" time when the bucket is full.",
                  "schema": {
                    "type": "integer"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error: Your request failed due to an internal error.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  },
                  "example": {
                    "error": {
                      "code": 500,
                      "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          {
            "name": "Application rights",
            "description": "Returns or creates a given user's application rights."
          },
          {
            "name": "Collection",
            "description": "Returns a collection of users details."
          },
          {
            "name": "User",
            "description": "Returns or modifies a given user's details."
          }
        ]
      }
    },
    "sam_api_useraccounts_views": {
      "converted": {
        "openapi": "3.0.3",
        "info": {
          "title": "SAM: Users view",
          "description": "API for interacting with aggregated user entity data.",
          "version": "1.0.0",
          "contact": {
            "name": "Flexera",
            "url": "https://www.flexera.com"
          }
        },
        "servers": [
          {
            "url": "https://{region}.snowsoftware.io",
            "variables": {
              "region": {
                "enum": [
                  "westeurope",
                  "australiasoutheast",
                  "eastus2",
                  "uksouth"
                ],
                "default": "westeurope"
              }
            }
          }
        ],
        "paths": {
          "/api/sam/estate/v1/view/user-accounts/{id}/overview": {
            "get": {
              "description": "Returns the number of computers, mobile devices, and applications associated with the given user along with the user's last sign-in date.",
              "summary": "Get user overview",
              "operationId": "getUserOverview",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "description": "The unique ID of the user.",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/UserOverview"
                      }
                    }
                  }
                },
                "400": {
                  "$ref": "#/components/responses/400"
                },
                "403": {
                  "$ref": "#/components/responses/403"
                },
                "404": {
                  "$ref": "#/components/responses/404"
                },
                "500": {
                  "$ref": "#/components/responses/500"
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.user.r",
                    "sam.computer.r",
                    "sam.application.r",
                    "sam.mobiledevice.r"
                  ]
                }
              ],
              "tags": [
                "Aggregation"
              ]
            }
          },
          "/api/sam/estate/v1/view/user-accounts/{id}/details": {
            "get": {
              "description": "Returns the details of a user account.",
              "summary": "Get user details",
              "operationId": "getUserDetails",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "description": "The unique ID of the user.",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/UserAccountDetail"
                      }
                    }
                  }
                },
                "400": {
                  "$ref": "#/components/responses/400"
                },
                "403": {
                  "$ref": "#/components/responses/403"
                },
                "404": {
                  "$ref": "#/components/responses/404"
                },
                "500": {
                  "$ref": "#/components/responses/500"
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.user.r",
                    "sam.application.r",
                    "sam.computer.r",
                    "sam.orgtree.r"
                  ]
                }
              ],
              "tags": [
                "Aggregation"
              ]
            }
          },
          "/api/sam/estate/v1/view/user-accounts/{id}/devices": {
            "get": {
              "description": "Returns a collection of devices associated with a user.",
              "summary": "Get user devices",
              "operationId": "getUserDevices",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "description": "The unique ID of the user.",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "page_size",
                  "in": "query",
                  "description": "The maximum number of items in the response.",
                  "schema": {
                    "type": "integer",
                    "default": 100
                  }
                },
                {
                  "name": "page_number",
                  "in": "query",
                  "description": "The page number.",
                  "schema": {
                    "type": "integer",
                    "default": 1
                  }
                },
                {
                  "name": "filter",
                  "in": "query",
                  "description": "Filter the collection of devices. Format of the query string parameter:\n\n```\n<filter name> <operator>  -<value>\n```\n\nFilter name | Description | Data type | Example\n:--- | --- | --- | ---\nid | The unique ID for this device | Guid | ?filter=id -eq \"123e4567-e89b-12d3-a456-426614174000\"\nlastScanDate | The date and time that the device was last scanned | String | ?filter=lastScanDate -eq \"2023-01-20T01:00:00Z\"\nlastSignIn | The date and time of the last sign-in | String | ?filter=lastSignIn -lt \"2023-05-26T14:30:00Z\"\nname | The name of the device | String | ?filter=name -eq \"MAC-02DQ5RXQ6LZ\"\norganizationName | The organization associated with the device | String | ?filter=organizationName -eq \"Flexera\"\nsignInCount | The number of times the device has been signed in to | Integer | ?filter=signInCount -gt 1\ntype | The type of device | String | ?filter=type -eq \"Computer\"\n\nFor more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).",
                  "required": false,
                  "schema": {
                    "type": "string",
                    "example": "status -eq \"active\""
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/FilteredResponseWithLinksOfUserDevices"
                      }
                    }
                  }
                },
                "400": {
                  "$ref": "#/components/responses/400"
                },
                "403": {
                  "$ref": "#/components/responses/403"
                },
                "404": {
                  "$ref": "#/components/responses/404"
                },
                "500": {
                  "$ref": "#/components/responses/500"
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.user.r",
                    "sam.computer.r",
                    "sam.mobiledevice.r",
                    "sam.orgtree.r"
                  ]
                }
              ],
              "tags": [
                "Aggregation"
              ]
            }
          },
          "/api/sam/estate/v1/view/user-accounts/{id}/applications": {
            "get": {
              "description": "Returns a collection of applications used by the given user.",
              "summary": "Get user applications",
              "operationId": "getUserApplications",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "description": "The unique ID of the user.",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "page_size",
                  "in": "query",
                  "description": "The maximum number of items in the response.",
                  "schema": {
                    "type": "integer",
                    "default": 100
                  }
                },
                {
                  "name": "page_number",
                  "in": "query",
                  "description": "The page number.",
                  "schema": {
                    "type": "integer",
                    "default": 1
                  }
                },
                {
                  "name": "filter",
                  "in": "query",
                  "description": "Filter the collection of applications. Format of the query string parameter:\n\n```\n<filter name> <operator>  -<value>\n```\n\nFilter name | Description | Data type | Example\n:--- | --- | --- | ---\napplicationId | The unique ID of the application | Guid |  ?filter=applicationId -eq \"25e6329f-2414-4ad4-8790-00bc0a81133b\"\napplicationName | The name of the application  | String | ?filter=applicationName -eq \"Snow Update Service\"\nentitlementState | The user's entitlement state for the application  | String | ?filter=entitlementState -eq \"Not covered\"\nisNoLicenseRequired | Whether the application does not require licenses | Boolean | ?filter=isNoLicenseRequired -eq true\n\nFor more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).",
                  "required": false,
                  "schema": {
                    "type": "string",
                    "example": "applicationName -eq \"Snow Update Service\""
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/FilteredResponseWithLinksOfUserApplications"
                      }
                    }
                  }
                },
                "400": {
                  "$ref": "#/components/responses/400"
                },
                "403": {
                  "$ref": "#/components/responses/403"
                },
                "404": {
                  "$ref": "#/components/responses/404"
                },
                "500": {
                  "$ref": "#/components/responses/500"
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.user.r",
                    "sam.application.r",
                    "sam.computer.r",
                    "sam.license.r"
                  ]
                }
              ],
              "tags": [
                "Aggregation"
              ]
            }
          },
          "/api/sam/estate/v1/view/user-accounts/{id}/application-rights": {
            "get": {
              "description": "Returns a collection of application rights associated with the given user.",
              "summary": "Get user application rights",
              "operationId": "getUserApplicationRights",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "description": "The unique ID of the user account.",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "page_size",
                  "in": "query",
                  "description": "The maximum number of items in the response.",
                  "schema": {
                    "type": "integer",
                    "default": 100
                  }
                },
                {
                  "name": "page_number",
                  "in": "query",
                  "description": "The page number.",
                  "schema": {
                    "type": "integer",
                    "default": 1
                  }
                },
                {
                  "name": "filter",
                  "in": "query",
                  "description": "Filter the collection of applications. Format of the query string parameter:\n\n```\n<filter name> <operator>  -<value>\n```\n\nFilter name | Description | Data type | Example\n:--- | --- | --- | ---\napplicationName | The name of an application  | String | ?filter=applicationName -eq \"Snow Update Service\"\napplicationId | The ID of an application  | String | ?filter=applicationId -eq \"32aeda0a-80dc-475a-907f-2d250a3a8614\"\n\nFor more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).",
                  "required": false,
                  "schema": {
                    "type": "string",
                    "example": "applicationName -eq \"Snow Update Service\""
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/FilteredResponseWithLinksOfUserApplicationRights"
                      }
                    }
                  }
                },
                "400": {
                  "$ref": "#/components/responses/400"
                },
                "403": {
                  "$ref": "#/components/responses/403"
                },
                "404": {
                  "$ref": "#/components/responses/404"
                },
                "500": {
                  "$ref": "#/components/responses/500"
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.user.r",
                    "sam.application.r"
                  ]
                }
              ],
              "tags": [
                "Aggregation"
              ]
            }
          }
        },
        "components": {
          "schemas": {
            "Link": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "href": {
                  "description": "The associated relative URL.",
                  "type": "string",
                  "example": "api/sam/estate/v1/...",
                  "nullable": true
                },
                "rel": {
                  "description": "Specifies the relationship between the current document and the linked document/resource.",
                  "type": "string",
                  "example": "self",
                  "nullable": true
                },
                "method": {
                  "description": "The method to access related resources.",
                  "type": "string",
                  "example": "GET",
                  "nullable": true
                }
              },
              "required": [
                "href",
                "rel",
                "method"
              ]
            },
            "ErrorContent": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "code": {
                  "type": "integer",
                  "description": "The HTTP status code.",
                  "format": "int32"
                },
                "message": {
                  "type": "string",
                  "description": "The error message.",
                  "nullable": true
                }
              },
              "required": [
                "code",
                "message"
              ]
            },
            "ErrorResponse": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "error": {
                  "description": "The error details.",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorContent"
                    }
                  ]
                }
              },
              "required": [
                "error"
              ]
            },
            "Pagination": {
              "type": "object",
              "description": "The pagination details.",
              "additionalProperties": false,
              "properties": {
                "page_size": {
                  "type": "integer",
                  "description": "The page size you requested.",
                  "format": "int32",
                  "example": 100
                },
                "page_number": {
                  "type": "integer",
                  "description": "The page number you requested.",
                  "format": "int32",
                  "example": 1
                },
                "total_pages": {
                  "type": "integer",
                  "description": "The total number of pages.",
                  "format": "int32",
                  "nullable": true,
                  "example": 1
                },
                "total_items": {
                  "type": "integer",
                  "description": "The total number of items.",
                  "format": "int32",
                  "nullable": true,
                  "example": 1
                }
              },
              "required": [
                "page_size",
                "page_number"
              ]
            },
            "FilteredResponseWithLinksOfUserApplications": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "pagination": {
                  "$ref": "#/components/schemas/Pagination"
                },
                "items": {
                  "type": "array",
                  "description": "A collection of filtered user application rights.",
                  "items": {
                    "$ref": "#/components/schemas/Application"
                  }
                },
                "_links": {
                  "type": "array",
                  "description": "A collection of links to related resources.",
                  "items": {
                    "$ref": "#/components/schemas/Link"
                  }
                }
              },
              "required": [
                "pagination",
                "items",
                "_links"
              ]
            },
            "Application": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "applicationId": {
                  "type": "string",
                  "example": "32aeda0a-80dc-475a-907f-2d250a3a8614",
                  "format": "guid",
                  "nullable": false,
                  "description": "The unique ID of the application."
                },
                "applicationName": {
                  "type": "string",
                  "example": "Snow Update Service",
                  "nullable": false,
                  "description": "The application name."
                },
                "isNoLicenseRequired": {
                  "type": "boolean",
                  "nullable": false,
                  "description": "```true``` if this application does not require a license; otherwise, ```false```."
                },
                "metrics": {
                  "type": "array",
                  "nullable": true,
                  "description": "A collection of metrics associated with a given application.",
                  "items": {
                    "$ref": "#/components/schemas/ApplicationMetric"
                  }
                },
                "usage": {
                  "type": "array",
                  "nullable": true,
                  "description": "A collection of users associated with a given application.",
                  "items": {
                    "$ref": "#/components/schemas/ComputerUsage"
                  }
                },
                "entitlementState": {
                  "type": "string",
                  "example": "Not covered",
                  "nullable": true,
                  "description": "The user's entitlement state for a given application."
                }
              },
              "required": [
                "applicationId",
                "applicationName"
              ]
            },
            "Computer": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "id": {
                  "type": "string",
                  "description": "The unique ID of the computer.",
                  "example": "15764003-3c61-4d5f-9839-a63271240519",
                  "format": "guid"
                },
                "hostName": {
                  "type": "string",
                  "description": "The host name of the computer.",
                  "example": "COMPUTER_1",
                  "nullable": true
                },
                "mostFrequentUser": {
                  "type": "string",
                  "description": "The unique ID of the most frequent user of the computer.",
                  "example": "b7edf6ea-f28a-4621-912f-ff145dedcc7a",
                  "format": "guid",
                  "nullable": true
                },
                "mostRecentUser": {
                  "type": "string",
                  "description": "The unique ID of the most recent user of the computer.",
                  "example": "00d5c098-965a-4f83-8903-9713a5eaa610",
                  "format": "guid",
                  "nullable": true
                },
                "manufacturer": {
                  "type": "string",
                  "description": "The manufacturer of the computer.",
                  "example": "Dell Inc.",
                  "nullable": true
                },
                "isPortable": {
                  "type": "boolean",
                  "description": "```true``` if the computer is portable; otherwise, ```false```.",
                  "nullable": true
                },
                "isVirtual": {
                  "type": "boolean",
                  "description": "```true``` if the computer is virtual; otherwise, ```false```.",
                  "nullable": true
                },
                "isServer": {
                  "type": "boolean",
                  "description": "```true``` if the computer is a server; otherwise, ```false```.",
                  "nullable": true
                },
                "model": {
                  "type": "string",
                  "description": "The model of the computer.",
                  "example": "Latitude 7400",
                  "nullable": true
                },
                "operatingSystem": {
                  "type": "string",
                  "description": "The operating system of the computer.",
                  "example": "Microsoft Windows 10 Enterprise",
                  "nullable": true
                },
                "vendor": {
                  "type": "string",
                  "description": "The vendor of the computer.",
                  "example": "Joe's Computers",
                  "nullable": true
                },
                "domain": {
                  "type": "string",
                  "description": "The domain of the computer.",
                  "example": "Domain 1",
                  "nullable": true
                },
                "ipAddress": {
                  "type": "string",
                  "description": "The IP address of the computer.",
                  "example": "208.80.154.224",
                  "nullable": true
                },
                "isVdi": {
                  "type": "boolean",
                  "description": "```true``` if the computer uses virtual desktop infrastructure; otherwise, ```false```.",
                  "nullable": true
                },
                "lastScanDate": {
                  "type": "string",
                  "description": "The date and time that the computer was last scanned.",
                  "format": "date-time"
                },
                "status": {
                  "type": "string",
                  "description": "The status of the computer.",
                  "example": "Active",
                  "nullable": true
                },
                "organizationId": {
                  "type": "string",
                  "description": "The unique ID of the organization to which the computer belongs.",
                  "example": "b0b6c393-9d65-4642-9805-779d2fa24a23",
                  "format": "guid",
                  "nullable": true
                },
                "_links": {
                  "type": "array",
                  "description": "A collection of links to related resources.",
                  "items": {
                    "$ref": "#/components/schemas/Link"
                  },
                  "nullable": false
                }
              },
              "required": [
                "id",
                "_links"
              ]
            },
            "ComputerUsage": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "userId": {
                  "type": "string",
                  "example": "32aeda0a-80dc-475a-907f-2d250a3a8614",
                  "format": "guid",
                  "description": "The unique ID of the user.",
                  "nullable": false
                },
                "computerId": {
                  "type": "string",
                  "example": "32aeda0a-1234-475a-6789-2d250a3a8614",
                  "format": "guid",
                  "description": "The unique ID of the computer.",
                  "nullable": false
                },
                "userName": {
                  "type": "string",
                  "description": "The name of the application user.",
                  "nullable": true,
                  "example": "John Doe"
                },
                "usedCount": {
                  "type": "integer",
                  "description": "The number of runs that the user has used the application.",
                  "format": "int32",
                  "nullable": false,
                  "example": 5
                },
                "usedMinutes": {
                  "type": "integer",
                  "description": "The number of minutes the user has used the application. This can be added to usedDays to get the total usage time.",
                  "format": "int64",
                  "nullable": false,
                  "example": 959
                },
                "usedDays": {
                  "type": "integer",
                  "description": "The number of days the user has used the application. This can be added to usedMinutes to get the total usage time.",
                  "format": "int32",
                  "nullable": false,
                  "example": 28
                },
                "lastUsed": {
                  "type": "string",
                  "format": "date-time",
                  "example": "2021-09-18T13:48:00.000Z",
                  "nullable": false,
                  "description": "The date and time the application was last used by the user on the computer."
                }
              },
              "required": [
                "userId",
                "computerId",
                "run",
                "totalTime",
                "lastUsed"
              ]
            },
            "ApplicationMetric": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "id": {
                  "type": "string",
                  "format": "guid",
                  "description": "The unique ID of the metric.",
                  "nullable": false,
                  "example": "32aeda0a-80dc-475a-907f-2d250a3a8614"
                },
                "name": {
                  "type": "string",
                  "description": "The name of the metric.",
                  "nullable": true,
                  "example": "test metric"
                },
                "isDefault": {
                  "type": "boolean",
                  "description": "```true``` if the metric is the default metric; otherwise, ```false```.",
                  "nullable": true
                },
                "licenseComplianceData": {
                  "$ref": "#/components/schemas/LicenseComplianceData"
                }
              },
              "required": [
                "id",
                "licenseComplianceData"
              ]
            },
            "LicenseComplianceData": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "requiredLicenses": {
                  "type": "integer",
                  "description": "The number of licenses required for the application.",
                  "format": "int32",
                  "nullable": false,
                  "example": 5
                },
                "initialRequirement": {
                  "type": "integer",
                  "description": "The number of licenses initially required for the application.",
                  "format": "int32",
                  "nullable": false,
                  "example": 8
                },
                "includedInBundle": {
                  "type": "integer",
                  "description": "The number of licenses included in the application bundle (if present) for the application.",
                  "format": "int32",
                  "nullable": false,
                  "example": 1
                },
                "outsideMetricPeriod": {
                  "type": "integer",
                  "description": "The number of licenses assigned to the application that are outside of the application's metering period.",
                  "format": "int32",
                  "nullable": false,
                  "example": 2
                },
                "_links": {
                  "type": "array",
                  "description": "A collection of links to related resources.",
                  "items": {
                    "$ref": "#/components/schemas/Link"
                  }
                }
              },
              "required": [
                "requiredLicenses",
                "initialRequirement",
                "includedInBundle",
                "outsideMetricPeriod",
                "_links"
              ]
            },
            "FilteredResponseWithLinksOfUserApplicationRights": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "pagination": {
                  "$ref": "#/components/schemas/Pagination"
                },
                "items": {
                  "type": "array",
                  "description": "A collection of filtered user application rights.",
                  "items": {
                    "$ref": "#/components/schemas/ApplicationRight"
                  }
                },
                "_links": {
                  "type": "array",
                  "description": "A collection of links to related resources.",
                  "items": {
                    "$ref": "#/components/schemas/Link"
                  }
                }
              },
              "required": [
                "pagination",
                "items",
                "_links"
              ]
            },
            "ApplicationRight": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "applicationId": {
                  "type": "string",
                  "example": "32aeda0a-80dc-475a-907f-2d250a3a8614",
                  "format": "guid",
                  "nullable": false,
                  "description": "The unique ID of the application."
                },
                "applicationName": {
                  "type": "string",
                  "example": "Snow Update Service",
                  "nullable": false,
                  "description": "The application name."
                },
                "_links": {
                  "type": "array",
                  "description": "A collection of links to related resources.",
                  "items": {
                    "$ref": "#/components/schemas/Link"
                  }
                }
              },
              "required": [
                "applicationName",
                "_links"
              ]
            },
            "FilteredResponseWithLinksOfUserDevices": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "pagination": {
                  "$ref": "#/components/schemas/Pagination"
                },
                "items": {
                  "type": "array",
                  "description": "A collection of filtered user devices.",
                  "items": {
                    "$ref": "#/components/schemas/UserDevice"
                  }
                },
                "_links": {
                  "type": "array",
                  "description": "A collection of links to related resources.",
                  "items": {
                    "$ref": "#/components/schemas/Link"
                  }
                }
              },
              "required": [
                "pagination",
                "items",
                "_links"
              ]
            },
            "UserDevice": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "id": {
                  "type": "string",
                  "example": "32aeda0a-80dc-475a-907f-2d250a3a8614",
                  "format": "guid",
                  "description": "The unique ID of the device."
                },
                "name": {
                  "type": "string",
                  "description": "The name of the device.",
                  "example": "MAC-02DQ5RXQ6LZ"
                },
                "organizationName": {
                  "type": "string",
                  "description": "The organization associated with the device.",
                  "example": "Flexera"
                },
                "firstDiscovered": {
                  "type": "string",
                  "format": "date",
                  "description": "The date the device was first discovered.",
                  "example": "2023-05-26"
                },
                "signInCount": {
                  "type": "integer",
                  "description": "The number of times the device has been signed in to.",
                  "example": 1
                },
                "lastSignIn": {
                  "type": "string",
                  "format": "date-time",
                  "description": "The date and time of the last sign-in.",
                  "example": "2023-05-26T14:30:00Z"
                },
                "lastUsed": {
                  "type": "string",
                  "format": "date-time",
                  "description": "The date and time the device was last used.",
                  "example": "2023-05-26T15:00:00Z"
                },
                "type": {
                  "type": "string",
                  "x-enumDescriptions": {
                    "Computer": "A computer device such as a desktop or laptop computer.",
                    "MobileDevice": "A mobile device such as a mobile phone."
                  },
                  "enum": [
                    "Computer",
                    "MobileDevice"
                  ],
                  "description": "The type of device.",
                  "example": "Computer"
                },
                "_links": {
                  "type": "array",
                  "description": "A collection of links to related resources.",
                  "items": {
                    "$ref": "#/components/schemas/Link"
                  }
                }
              },
              "required": [
                "id",
                "_links"
              ]
            },
            "UserOverview": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "applications": {
                  "type": "integer",
                  "description": "The total number of applications associated with the user.",
                  "format": "int32",
                  "nullable": false,
                  "example": 15
                },
                "computers": {
                  "type": "integer",
                  "description": "The total number of computers associated with the user.",
                  "format": "int32",
                  "nullable": false,
                  "example": 10
                },
                "mobileDevices": {
                  "type": "integer",
                  "description": "The total number of devices associated with the user.",
                  "format": "int32",
                  "nullable": false,
                  "example": 5
                },
                "lastSignIn": {
                  "type": "string",
                  "format": "date-time",
                  "description": "The date and time the user last signed into a computer or mobile device.",
                  "example": "2023-05-26T14:30:00Z"
                },
                "_links": {
                  "type": "array",
                  "description": "A collection of links to related resources.",
                  "items": {
                    "$ref": "#/components/schemas/Link"
                  }
                }
              },
              "required": [
                "applications",
                "computers",
                "mobileDevices",
                "lastSignIn",
                "_links"
              ]
            },
            "UserAccountDetail": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "id": {
                  "type": "string",
                  "example": "d983ee47-92c9-47ad-9975-ec85d2a479a1",
                  "format": "guid",
                  "description": "The unique ID of the user."
                },
                "userName": {
                  "type": "string",
                  "example": "ssmith",
                  "nullable": true,
                  "description": "The login name for the user."
                },
                "status": {
                  "type": "string",
                  "example": "Active",
                  "nullable": true,
                  "description": "The current status of the user."
                },
                "email": {
                  "type": "string",
                  "example": "ssmith@example.com",
                  "nullable": true,
                  "description": "The user's email address."
                },
                "fullName": {
                  "type": "string",
                  "example": "Sammy Smith",
                  "nullable": true,
                  "description": "The user's full name."
                },
                "phoneNumber": {
                  "type": "string",
                  "example": "789-654-1236",
                  "nullable": true,
                  "description": "The user's phone number."
                },
                "mobilePhoneNumber": {
                  "type": "string",
                  "example": "789-626-2366",
                  "nullable": true,
                  "description": "The user’s mobile phone number."
                },
                "location": {
                  "type": "string",
                  "example": "Austin",
                  "nullable": true,
                  "description": "The user's location."
                },
                "roomNumber": {
                  "type": "string",
                  "example": "5716",
                  "nullable": true,
                  "description": "The user's room number."
                },
                "quarantineDate": {
                  "type": "string",
                  "format": "date-time",
                  "nullable": true,
                  "description": "The date and time at which this user was marked as quarantined."
                },
                "lastLogon": {
                  "type": "string",
                  "format": "date-time",
                  "nullable": true,
                  "description": "The date and time this user last logged in."
                },
                "lastUpdate": {
                  "type": "string",
                  "format": "date-time",
                  "nullable": true,
                  "description": "The date and time this user was last updated."
                },
                "updatedDate": {
                  "type": "string",
                  "format": "date-time",
                  "nullable": true,
                  "description": "The date and time this user was last updated."
                },
                "updatedBy": {
                  "type": "string",
                  "example": "Data Update Job",
                  "nullable": true,
                  "description": "The name of the entity that last updated the user."
                },
                "meteringHistoryPeriod": {
                  "type": "string",
                  "example": "9/14/2023 - 9/15/2023",
                  "nullable": true,
                  "description": "The period of time for which user metering data is available."
                },
                "managerEmail": {
                  "type": "string",
                  "example": "bob@flexera.com",
                  "nullable": true,
                  "description": "The email address of the manager associated with the user."
                },
                "organizationId": {
                  "type": "string",
                  "example": "d983ee30-92c8-47ad-9976-ec85d2a479a2",
                  "nullable": true,
                  "description": "The unique ID of the organization the user belongs to."
                },
                "organizationName": {
                  "type": "string",
                  "example": "Flexera",
                  "nullable": true,
                  "description": "The organization name associated with the user."
                },
                "organizationalUnit": {
                  "type": "string",
                  "example": "Laurel_MI",
                  "nullable": true,
                  "description": "The organizational unit associated with the user."
                },
                "userPrincipalName": {
                  "type": "string",
                  "example": "ssmith@flexera.com",
                  "nullable": true,
                  "description": "The user's principal name."
                },
                "orgAd": {
                  "type": "string",
                  "example": "CN=John Doe,OU=Users,OU=Sales,DC=Flexera,DC=com",
                  "nullable": true,
                  "description": "The qualified path for the user object in the Active Directory instance."
                },
                "samAccountName": {
                  "type": "string",
                  "example": "thebagel\\\\ssmith",
                  "nullable": true,
                  "description": "The SAM account name associated with this user."
                },
                "lastUsedComputer": {
                  "$ref": "#/components/schemas/Computer"
                },
                "autoQuarantineManagement": {
                  "type": "boolean",
                  "example": true,
                  "description": "```true``` if this user is subject to automatic quarantine management; otherwise, ```false```."
                },
                "autoEditing": {
                  "type": "boolean",
                  "example": true,
                  "description": "```true``` if this user is subject to automatic editing; otherwise, ```false```."
                },
                "_links": {
                  "type": "array",
                  "description": "A collection of links to related resources.",
                  "items": {
                    "$ref": "#/components/schemas/Link"
                  }
                }
              },
              "required": [
                "_links",
                "id"
              ]
            }
          },
          "securitySchemes": {
            "BearerAuth": {
              "type": "http",
              "scheme": "bearer",
              "bearerFormat": "JWT"
            }
          },
          "responses": {
            "400": {
              "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  },
                  "example": {
                    "error": {
                      "code": 400,
                      "message": "Invoice ID field needs to be a string."
                    }
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden: The operation you requested is forbidden and cannot be completed. This could be because you don't have the required permissions to use the requested endpoint, or the requested endpoint requires purchasing additional features. The recommended action is to abort.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  },
                  "example": {
                    "error": {
                      "code": 403,
                      "message": "You do not have permission to access this resource."
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  },
                  "example": {
                    "error": {
                      "code": 404,
                      "message": "Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found."
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error: Your request failed due to an internal error.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  },
                  "example": {
                    "error": {
                      "code": 500,
                      "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          {
            "name": "Aggregation"
          }
        ]
      },
      "bundle": {
        "openapi": "3.0.3",
        "info": {
          "title": "SAM: Users view",
          "description": "API for interacting with aggregated user entity data.",
          "version": "1.0.0",
          "contact": {
            "name": "Flexera",
            "url": "https://www.flexera.com"
          }
        },
        "servers": [
          {
            "url": "https://{region}.snowsoftware.io",
            "variables": {
              "region": {
                "enum": [
                  "westeurope",
                  "australiasoutheast",
                  "eastus2",
                  "uksouth"
                ],
                "default": "westeurope"
              }
            }
          }
        ],
        "paths": {
          "/api/sam/estate/v1/view/user-accounts/{id}/overview": {
            "get": {
              "description": "Returns the number of computers, mobile devices, and applications associated with the given user along with the user's last sign-in date.",
              "summary": "Get user overview",
              "operationId": "getUserOverview",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "description": "The unique ID of the user.",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/UserOverview"
                      }
                    }
                  }
                },
                "400": {
                  "$ref": "#/components/responses/400"
                },
                "403": {
                  "$ref": "#/components/responses/403"
                },
                "404": {
                  "$ref": "#/components/responses/404"
                },
                "500": {
                  "$ref": "#/components/responses/500"
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.user.r",
                    "sam.computer.r",
                    "sam.application.r",
                    "sam.mobiledevice.r"
                  ]
                }
              ],
              "tags": [
                "Aggregation"
              ]
            }
          },
          "/api/sam/estate/v1/view/user-accounts/{id}/details": {
            "get": {
              "description": "Returns the details of a user account.",
              "summary": "Get user details",
              "operationId": "getUserDetails",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "description": "The unique ID of the user.",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/UserAccountDetail"
                      }
                    }
                  }
                },
                "400": {
                  "$ref": "#/components/responses/400"
                },
                "403": {
                  "$ref": "#/components/responses/403"
                },
                "404": {
                  "$ref": "#/components/responses/404"
                },
                "500": {
                  "$ref": "#/components/responses/500"
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.user.r",
                    "sam.application.r",
                    "sam.computer.r",
                    "sam.orgtree.r"
                  ]
                }
              ],
              "tags": [
                "Aggregation"
              ]
            }
          },
          "/api/sam/estate/v1/view/user-accounts/{id}/devices": {
            "get": {
              "description": "Returns a collection of devices associated with a user.",
              "summary": "Get user devices",
              "operationId": "getUserDevices",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "description": "The unique ID of the user.",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "page_size",
                  "in": "query",
                  "description": "The maximum number of items in the response.",
                  "schema": {
                    "type": "integer",
                    "default": 100
                  }
                },
                {
                  "name": "page_number",
                  "in": "query",
                  "description": "The page number.",
                  "schema": {
                    "type": "integer",
                    "default": 1
                  }
                },
                {
                  "name": "filter",
                  "in": "query",
                  "description": "Filter the collection of devices. Format of the query string parameter:\n\n```\n<filter name> <operator>  -<value>\n```\n\nFilter name | Description | Data type | Example\n:--- | --- | --- | ---\nid | The unique ID for this device | Guid | ?filter=id -eq \"123e4567-e89b-12d3-a456-426614174000\"\nlastScanDate | The date and time that the device was last scanned | String | ?filter=lastScanDate -eq \"2023-01-20T01:00:00Z\"\nlastSignIn | The date and time of the last sign-in | String | ?filter=lastSignIn -lt \"2023-05-26T14:30:00Z\"\nname | The name of the device | String | ?filter=name -eq \"MAC-02DQ5RXQ6LZ\"\norganizationName | The organization associated with the device | String | ?filter=organizationName -eq \"Flexera\"\nsignInCount | The number of times the device has been signed in to | Integer | ?filter=signInCount -gt 1\ntype | The type of device | String | ?filter=type -eq \"Computer\"\n\nFor more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).",
                  "required": false,
                  "schema": {
                    "type": "string",
                    "example": "status -eq \"active\""
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/FilteredResponseWithLinksOfUserDevices"
                      }
                    }
                  }
                },
                "400": {
                  "$ref": "#/components/responses/400"
                },
                "403": {
                  "$ref": "#/components/responses/403"
                },
                "404": {
                  "$ref": "#/components/responses/404"
                },
                "500": {
                  "$ref": "#/components/responses/500"
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.user.r",
                    "sam.computer.r",
                    "sam.mobiledevice.r",
                    "sam.orgtree.r"
                  ]
                }
              ],
              "tags": [
                "Aggregation"
              ]
            }
          },
          "/api/sam/estate/v1/view/user-accounts/{id}/applications": {
            "get": {
              "description": "Returns a collection of applications used by the given user.",
              "summary": "Get user applications",
              "operationId": "getUserApplications",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "description": "The unique ID of the user.",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "page_size",
                  "in": "query",
                  "description": "The maximum number of items in the response.",
                  "schema": {
                    "type": "integer",
                    "default": 100
                  }
                },
                {
                  "name": "page_number",
                  "in": "query",
                  "description": "The page number.",
                  "schema": {
                    "type": "integer",
                    "default": 1
                  }
                },
                {
                  "name": "filter",
                  "in": "query",
                  "description": "Filter the collection of applications. Format of the query string parameter:\n\n```\n<filter name> <operator>  -<value>\n```\n\nFilter name | Description | Data type | Example\n:--- | --- | --- | ---\napplicationId | The unique ID of the application | Guid |  ?filter=applicationId -eq \"25e6329f-2414-4ad4-8790-00bc0a81133b\"\napplicationName | The name of the application  | String | ?filter=applicationName -eq \"Snow Update Service\"\nentitlementState | The user's entitlement state for the application  | String | ?filter=entitlementState -eq \"Not covered\"\nisNoLicenseRequired | Whether the application does not require licenses | Boolean | ?filter=isNoLicenseRequired -eq true\n\nFor more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).",
                  "required": false,
                  "schema": {
                    "type": "string",
                    "example": "applicationName -eq \"Snow Update Service\""
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/FilteredResponseWithLinksOfUserApplications"
                      }
                    }
                  }
                },
                "400": {
                  "$ref": "#/components/responses/400"
                },
                "403": {
                  "$ref": "#/components/responses/403"
                },
                "404": {
                  "$ref": "#/components/responses/404"
                },
                "500": {
                  "$ref": "#/components/responses/500"
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.user.r",
                    "sam.application.r",
                    "sam.computer.r",
                    "sam.license.r"
                  ]
                }
              ],
              "tags": [
                "Aggregation"
              ]
            }
          },
          "/api/sam/estate/v1/view/user-accounts/{id}/application-rights": {
            "get": {
              "description": "Returns a collection of application rights associated with the given user.",
              "summary": "Get user application rights",
              "operationId": "getUserApplicationRights",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "description": "The unique ID of the user account.",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "page_size",
                  "in": "query",
                  "description": "The maximum number of items in the response.",
                  "schema": {
                    "type": "integer",
                    "default": 100
                  }
                },
                {
                  "name": "page_number",
                  "in": "query",
                  "description": "The page number.",
                  "schema": {
                    "type": "integer",
                    "default": 1
                  }
                },
                {
                  "name": "filter",
                  "in": "query",
                  "description": "Filter the collection of applications. Format of the query string parameter:\n\n```\n<filter name> <operator>  -<value>\n```\n\nFilter name | Description | Data type | Example\n:--- | --- | --- | ---\napplicationName | The name of an application  | String | ?filter=applicationName -eq \"Snow Update Service\"\napplicationId | The ID of an application  | String | ?filter=applicationId -eq \"32aeda0a-80dc-475a-907f-2d250a3a8614\"\n\nFor more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).",
                  "required": false,
                  "schema": {
                    "type": "string",
                    "example": "applicationName -eq \"Snow Update Service\""
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/FilteredResponseWithLinksOfUserApplicationRights"
                      }
                    }
                  }
                },
                "400": {
                  "$ref": "#/components/responses/400"
                },
                "403": {
                  "$ref": "#/components/responses/403"
                },
                "404": {
                  "$ref": "#/components/responses/404"
                },
                "500": {
                  "$ref": "#/components/responses/500"
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.user.r",
                    "sam.application.r"
                  ]
                }
              ],
              "tags": [
                "Aggregation"
              ]
            }
          }
        },
        "components": {
          "schemas": {
            "Link": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "href": {
                  "description": "The associated relative URL.",
                  "type": "string",
                  "example": "api/sam/estate/v1/...",
                  "nullable": true
                },
                "rel": {
                  "description": "Specifies the relationship between the current document and the linked document/resource.",
                  "type": "string",
                  "example": "self",
                  "nullable": true
                },
                "method": {
                  "description": "The method to access related resources.",
                  "type": "string",
                  "example": "GET",
                  "nullable": true
                }
              },
              "required": [
                "href",
                "rel",
                "method"
              ]
            },
            "ErrorContent": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "code": {
                  "type": "integer",
                  "description": "The HTTP status code.",
                  "format": "int32"
                },
                "message": {
                  "type": "string",
                  "description": "The error message.",
                  "nullable": true
                }
              },
              "required": [
                "code",
                "message"
              ]
            },
            "ErrorResponse": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "error": {
                  "description": "The error details.",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorContent"
                    }
                  ]
                }
              },
              "required": [
                "error"
              ]
            },
            "Pagination": {
              "type": "object",
              "description": "The pagination details.",
              "additionalProperties": false,
              "properties": {
                "page_size": {
                  "type": "integer",
                  "description": "The page size you requested.",
                  "format": "int32",
                  "example": 100
                },
                "page_number": {
                  "type": "integer",
                  "description": "The page number you requested.",
                  "format": "int32",
                  "example": 1
                },
                "total_pages": {
                  "type": "integer",
                  "description": "The total number of pages.",
                  "format": "int32",
                  "nullable": true,
                  "example": 1
                },
                "total_items": {
                  "type": "integer",
                  "description": "The total number of items.",
                  "format": "int32",
                  "nullable": true,
                  "example": 1
                }
              },
              "required": [
                "page_size",
                "page_number"
              ]
            },
            "FilteredResponseWithLinksOfUserApplications": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "pagination": {
                  "$ref": "#/components/schemas/Pagination"
                },
                "items": {
                  "type": "array",
                  "description": "A collection of filtered user application rights.",
                  "items": {
                    "$ref": "#/components/schemas/Application"
                  }
                },
                "_links": {
                  "type": "array",
                  "description": "A collection of links to related resources.",
                  "items": {
                    "$ref": "#/components/schemas/Link"
                  }
                }
              },
              "required": [
                "pagination",
                "items",
                "_links"
              ]
            },
            "Application": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "applicationId": {
                  "type": "string",
                  "example": "32aeda0a-80dc-475a-907f-2d250a3a8614",
                  "format": "guid",
                  "nullable": false,
                  "description": "The unique ID of the application."
                },
                "applicationName": {
                  "type": "string",
                  "example": "Snow Update Service",
                  "nullable": false,
                  "description": "The application name."
                },
                "isNoLicenseRequired": {
                  "type": "boolean",
                  "nullable": false,
                  "description": "```true``` if this application does not require a license; otherwise, ```false```."
                },
                "metrics": {
                  "type": "array",
                  "nullable": true,
                  "description": "A collection of metrics associated with a given application.",
                  "items": {
                    "$ref": "#/components/schemas/ApplicationMetric"
                  }
                },
                "usage": {
                  "type": "array",
                  "nullable": true,
                  "description": "A collection of users associated with a given application.",
                  "items": {
                    "$ref": "#/components/schemas/ComputerUsage"
                  }
                },
                "entitlementState": {
                  "type": "string",
                  "example": "Not covered",
                  "nullable": true,
                  "description": "The user's entitlement state for a given application."
                }
              },
              "required": [
                "applicationId",
                "applicationName"
              ]
            },
            "Computer": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "id": {
                  "type": "string",
                  "description": "The unique ID of the computer.",
                  "example": "15764003-3c61-4d5f-9839-a63271240519",
                  "format": "guid"
                },
                "hostName": {
                  "type": "string",
                  "description": "The host name of the computer.",
                  "example": "COMPUTER_1",
                  "nullable": true
                },
                "mostFrequentUser": {
                  "type": "string",
                  "description": "The unique ID of the most frequent user of the computer.",
                  "example": "b7edf6ea-f28a-4621-912f-ff145dedcc7a",
                  "format": "guid",
                  "nullable": true
                },
                "mostRecentUser": {
                  "type": "string",
                  "description": "The unique ID of the most recent user of the computer.",
                  "example": "00d5c098-965a-4f83-8903-9713a5eaa610",
                  "format": "guid",
                  "nullable": true
                },
                "manufacturer": {
                  "type": "string",
                  "description": "The manufacturer of the computer.",
                  "example": "Dell Inc.",
                  "nullable": true
                },
                "isPortable": {
                  "type": "boolean",
                  "description": "```true``` if the computer is portable; otherwise, ```false```.",
                  "nullable": true
                },
                "isVirtual": {
                  "type": "boolean",
                  "description": "```true``` if the computer is virtual; otherwise, ```false```.",
                  "nullable": true
                },
                "isServer": {
                  "type": "boolean",
                  "description": "```true``` if the computer is a server; otherwise, ```false```.",
                  "nullable": true
                },
                "model": {
                  "type": "string",
                  "description": "The model of the computer.",
                  "example": "Latitude 7400",
                  "nullable": true
                },
                "operatingSystem": {
                  "type": "string",
                  "description": "The operating system of the computer.",
                  "example": "Microsoft Windows 10 Enterprise",
                  "nullable": true
                },
                "vendor": {
                  "type": "string",
                  "description": "The vendor of the computer.",
                  "example": "Joe's Computers",
                  "nullable": true
                },
                "domain": {
                  "type": "string",
                  "description": "The domain of the computer.",
                  "example": "Domain 1",
                  "nullable": true
                },
                "ipAddress": {
                  "type": "string",
                  "description": "The IP address of the computer.",
                  "example": "208.80.154.224",
                  "nullable": true
                },
                "isVdi": {
                  "type": "boolean",
                  "description": "```true``` if the computer uses virtual desktop infrastructure; otherwise, ```false```.",
                  "nullable": true
                },
                "lastScanDate": {
                  "type": "string",
                  "description": "The date and time that the computer was last scanned.",
                  "format": "date-time"
                },
                "status": {
                  "type": "string",
                  "description": "The status of the computer.",
                  "example": "Active",
                  "nullable": true
                },
                "organizationId": {
                  "type": "string",
                  "description": "The unique ID of the organization to which the computer belongs.",
                  "example": "b0b6c393-9d65-4642-9805-779d2fa24a23",
                  "format": "guid",
                  "nullable": true
                },
                "_links": {
                  "type": "array",
                  "description": "A collection of links to related resources.",
                  "items": {
                    "$ref": "#/components/schemas/Link"
                  },
                  "nullable": false
                }
              },
              "required": [
                "id",
                "_links"
              ]
            },
            "ComputerUsage": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "userId": {
                  "type": "string",
                  "example": "32aeda0a-80dc-475a-907f-2d250a3a8614",
                  "format": "guid",
                  "description": "The unique ID of the user.",
                  "nullable": false
                },
                "computerId": {
                  "type": "string",
                  "example": "32aeda0a-1234-475a-6789-2d250a3a8614",
                  "format": "guid",
                  "description": "The unique ID of the computer.",
                  "nullable": false
                },
                "userName": {
                  "type": "string",
                  "description": "The name of the application user.",
                  "nullable": true,
                  "example": "John Doe"
                },
                "usedCount": {
                  "type": "integer",
                  "description": "The number of runs that the user has used the application.",
                  "format": "int32",
                  "nullable": false,
                  "example": 5
                },
                "usedMinutes": {
                  "type": "integer",
                  "description": "The number of minutes the user has used the application. This can be added to usedDays to get the total usage time.",
                  "format": "int64",
                  "nullable": false,
                  "example": 959
                },
                "usedDays": {
                  "type": "integer",
                  "description": "The number of days the user has used the application. This can be added to usedMinutes to get the total usage time.",
                  "format": "int32",
                  "nullable": false,
                  "example": 28
                },
                "lastUsed": {
                  "type": "string",
                  "format": "date-time",
                  "example": "2021-09-18T13:48:00.000Z",
                  "nullable": false,
                  "description": "The date and time the application was last used by the user on the computer."
                }
              },
              "required": [
                "userId",
                "computerId",
                "run",
                "totalTime",
                "lastUsed"
              ]
            },
            "ApplicationMetric": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "id": {
                  "type": "string",
                  "format": "guid",
                  "description": "The unique ID of the metric.",
                  "nullable": false,
                  "example": "32aeda0a-80dc-475a-907f-2d250a3a8614"
                },
                "name": {
                  "type": "string",
                  "description": "The name of the metric.",
                  "nullable": true,
                  "example": "test metric"
                },
                "isDefault": {
                  "type": "boolean",
                  "description": "```true``` if the metric is the default metric; otherwise, ```false```.",
                  "nullable": true
                },
                "licenseComplianceData": {
                  "$ref": "#/components/schemas/LicenseComplianceData"
                }
              },
              "required": [
                "id",
                "licenseComplianceData"
              ]
            },
            "LicenseComplianceData": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "requiredLicenses": {
                  "type": "integer",
                  "description": "The number of licenses required for the application.",
                  "format": "int32",
                  "nullable": false,
                  "example": 5
                },
                "initialRequirement": {
                  "type": "integer",
                  "description": "The number of licenses initially required for the application.",
                  "format": "int32",
                  "nullable": false,
                  "example": 8
                },
                "includedInBundle": {
                  "type": "integer",
                  "description": "The number of licenses included in the application bundle (if present) for the application.",
                  "format": "int32",
                  "nullable": false,
                  "example": 1
                },
                "outsideMetricPeriod": {
                  "type": "integer",
                  "description": "The number of licenses assigned to the application that are outside of the application's metering period.",
                  "format": "int32",
                  "nullable": false,
                  "example": 2
                },
                "_links": {
                  "type": "array",
                  "description": "A collection of links to related resources.",
                  "items": {
                    "$ref": "#/components/schemas/Link"
                  }
                }
              },
              "required": [
                "requiredLicenses",
                "initialRequirement",
                "includedInBundle",
                "outsideMetricPeriod",
                "_links"
              ]
            },
            "FilteredResponseWithLinksOfUserApplicationRights": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "pagination": {
                  "$ref": "#/components/schemas/Pagination"
                },
                "items": {
                  "type": "array",
                  "description": "A collection of filtered user application rights.",
                  "items": {
                    "$ref": "#/components/schemas/ApplicationRight"
                  }
                },
                "_links": {
                  "type": "array",
                  "description": "A collection of links to related resources.",
                  "items": {
                    "$ref": "#/components/schemas/Link"
                  }
                }
              },
              "required": [
                "pagination",
                "items",
                "_links"
              ]
            },
            "ApplicationRight": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "applicationId": {
                  "type": "string",
                  "example": "32aeda0a-80dc-475a-907f-2d250a3a8614",
                  "format": "guid",
                  "nullable": false,
                  "description": "The unique ID of the application."
                },
                "applicationName": {
                  "type": "string",
                  "example": "Snow Update Service",
                  "nullable": false,
                  "description": "The application name."
                },
                "_links": {
                  "type": "array",
                  "description": "A collection of links to related resources.",
                  "items": {
                    "$ref": "#/components/schemas/Link"
                  }
                }
              },
              "required": [
                "applicationName",
                "_links"
              ]
            },
            "FilteredResponseWithLinksOfUserDevices": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "pagination": {
                  "$ref": "#/components/schemas/Pagination"
                },
                "items": {
                  "type": "array",
                  "description": "A collection of filtered user devices.",
                  "items": {
                    "$ref": "#/components/schemas/UserDevice"
                  }
                },
                "_links": {
                  "type": "array",
                  "description": "A collection of links to related resources.",
                  "items": {
                    "$ref": "#/components/schemas/Link"
                  }
                }
              },
              "required": [
                "pagination",
                "items",
                "_links"
              ]
            },
            "UserDevice": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "id": {
                  "type": "string",
                  "example": "32aeda0a-80dc-475a-907f-2d250a3a8614",
                  "format": "guid",
                  "description": "The unique ID of the device."
                },
                "name": {
                  "type": "string",
                  "description": "The name of the device.",
                  "example": "MAC-02DQ5RXQ6LZ"
                },
                "organizationName": {
                  "type": "string",
                  "description": "The organization associated with the device.",
                  "example": "Flexera"
                },
                "firstDiscovered": {
                  "type": "string",
                  "format": "date",
                  "description": "The date the device was first discovered.",
                  "example": "2023-05-26"
                },
                "signInCount": {
                  "type": "integer",
                  "description": "The number of times the device has been signed in to.",
                  "example": 1
                },
                "lastSignIn": {
                  "type": "string",
                  "format": "date-time",
                  "description": "The date and time of the last sign-in.",
                  "example": "2023-05-26T14:30:00Z"
                },
                "lastUsed": {
                  "type": "string",
                  "format": "date-time",
                  "description": "The date and time the device was last used.",
                  "example": "2023-05-26T15:00:00Z"
                },
                "type": {
                  "type": "string",
                  "x-enumDescriptions": {
                    "Computer": "A computer device such as a desktop or laptop computer.",
                    "MobileDevice": "A mobile device such as a mobile phone."
                  },
                  "enum": [
                    "Computer",
                    "MobileDevice"
                  ],
                  "description": "The type of device.",
                  "example": "Computer"
                },
                "_links": {
                  "type": "array",
                  "description": "A collection of links to related resources.",
                  "items": {
                    "$ref": "#/components/schemas/Link"
                  }
                }
              },
              "required": [
                "id",
                "_links"
              ]
            },
            "UserOverview": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "applications": {
                  "type": "integer",
                  "description": "The total number of applications associated with the user.",
                  "format": "int32",
                  "nullable": false,
                  "example": 15
                },
                "computers": {
                  "type": "integer",
                  "description": "The total number of computers associated with the user.",
                  "format": "int32",
                  "nullable": false,
                  "example": 10
                },
                "mobileDevices": {
                  "type": "integer",
                  "description": "The total number of devices associated with the user.",
                  "format": "int32",
                  "nullable": false,
                  "example": 5
                },
                "lastSignIn": {
                  "type": "string",
                  "format": "date-time",
                  "description": "The date and time the user last signed into a computer or mobile device.",
                  "example": "2023-05-26T14:30:00Z"
                },
                "_links": {
                  "type": "array",
                  "description": "A collection of links to related resources.",
                  "items": {
                    "$ref": "#/components/schemas/Link"
                  }
                }
              },
              "required": [
                "applications",
                "computers",
                "mobileDevices",
                "lastSignIn",
                "_links"
              ]
            },
            "UserAccountDetail": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "id": {
                  "type": "string",
                  "example": "d983ee47-92c9-47ad-9975-ec85d2a479a1",
                  "format": "guid",
                  "description": "The unique ID of the user."
                },
                "userName": {
                  "type": "string",
                  "example": "ssmith",
                  "nullable": true,
                  "description": "The login name for the user."
                },
                "status": {
                  "type": "string",
                  "example": "Active",
                  "nullable": true,
                  "description": "The current status of the user."
                },
                "email": {
                  "type": "string",
                  "example": "ssmith@example.com",
                  "nullable": true,
                  "description": "The user's email address."
                },
                "fullName": {
                  "type": "string",
                  "example": "Sammy Smith",
                  "nullable": true,
                  "description": "The user's full name."
                },
                "phoneNumber": {
                  "type": "string",
                  "example": "789-654-1236",
                  "nullable": true,
                  "description": "The user's phone number."
                },
                "mobilePhoneNumber": {
                  "type": "string",
                  "example": "789-626-2366",
                  "nullable": true,
                  "description": "The user’s mobile phone number."
                },
                "location": {
                  "type": "string",
                  "example": "Austin",
                  "nullable": true,
                  "description": "The user's location."
                },
                "roomNumber": {
                  "type": "string",
                  "example": "5716",
                  "nullable": true,
                  "description": "The user's room number."
                },
                "quarantineDate": {
                  "type": "string",
                  "format": "date-time",
                  "nullable": true,
                  "description": "The date and time at which this user was marked as quarantined."
                },
                "lastLogon": {
                  "type": "string",
                  "format": "date-time",
                  "nullable": true,
                  "description": "The date and time this user last logged in."
                },
                "lastUpdate": {
                  "type": "string",
                  "format": "date-time",
                  "nullable": true,
                  "description": "The date and time this user was last updated."
                },
                "updatedDate": {
                  "type": "string",
                  "format": "date-time",
                  "nullable": true,
                  "description": "The date and time this user was last updated."
                },
                "updatedBy": {
                  "type": "string",
                  "example": "Data Update Job",
                  "nullable": true,
                  "description": "The name of the entity that last updated the user."
                },
                "meteringHistoryPeriod": {
                  "type": "string",
                  "example": "9/14/2023 - 9/15/2023",
                  "nullable": true,
                  "description": "The period of time for which user metering data is available."
                },
                "managerEmail": {
                  "type": "string",
                  "example": "bob@flexera.com",
                  "nullable": true,
                  "description": "The email address of the manager associated with the user."
                },
                "organizationId": {
                  "type": "string",
                  "example": "d983ee30-92c8-47ad-9976-ec85d2a479a2",
                  "nullable": true,
                  "description": "The unique ID of the organization the user belongs to."
                },
                "organizationName": {
                  "type": "string",
                  "example": "Flexera",
                  "nullable": true,
                  "description": "The organization name associated with the user."
                },
                "organizationalUnit": {
                  "type": "string",
                  "example": "Laurel_MI",
                  "nullable": true,
                  "description": "The organizational unit associated with the user."
                },
                "userPrincipalName": {
                  "type": "string",
                  "example": "ssmith@flexera.com",
                  "nullable": true,
                  "description": "The user's principal name."
                },
                "orgAd": {
                  "type": "string",
                  "example": "CN=John Doe,OU=Users,OU=Sales,DC=Flexera,DC=com",
                  "nullable": true,
                  "description": "The qualified path for the user object in the Active Directory instance."
                },
                "samAccountName": {
                  "type": "string",
                  "example": "thebagel\\\\ssmith",
                  "nullable": true,
                  "description": "The SAM account name associated with this user."
                },
                "lastUsedComputer": {
                  "$ref": "#/components/schemas/Computer"
                },
                "autoQuarantineManagement": {
                  "type": "boolean",
                  "example": true,
                  "description": "```true``` if this user is subject to automatic quarantine management; otherwise, ```false```."
                },
                "autoEditing": {
                  "type": "boolean",
                  "example": true,
                  "description": "```true``` if this user is subject to automatic editing; otherwise, ```false```."
                },
                "_links": {
                  "type": "array",
                  "description": "A collection of links to related resources.",
                  "items": {
                    "$ref": "#/components/schemas/Link"
                  }
                }
              },
              "required": [
                "_links",
                "id"
              ]
            }
          },
          "securitySchemes": {
            "BearerAuth": {
              "type": "http",
              "scheme": "bearer",
              "bearerFormat": "JWT"
            }
          },
          "responses": {
            "400": {
              "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  },
                  "example": {
                    "error": {
                      "code": 400,
                      "message": "Invoice ID field needs to be a string."
                    }
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden: The operation you requested is forbidden and cannot be completed. This could be because you don't have the required permissions to use the requested endpoint, or the requested endpoint requires purchasing additional features. The recommended action is to abort.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  },
                  "example": {
                    "error": {
                      "code": 403,
                      "message": "You do not have permission to access this resource."
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  },
                  "example": {
                    "error": {
                      "code": 404,
                      "message": "Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found."
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error: Your request failed due to an internal error.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  },
                  "example": {
                    "error": {
                      "code": 500,
                      "message": "The service encountered an unexpected condition that prevented it from fulfilling the request."
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          {
            "name": "Aggregation"
          }
        ]
      }
    },
    "sam_api_customfields": {
      "converted": {
        "openapi": "3.0.0",
        "info": {
          "title": "Product name: Custom Fields API",
          "description": "API for interacting with custom fields.",
          "contact": {
            "name": "Snow Software, Inc.",
            "url": "https://www.snowsoftware.com"
          },
          "version": "0.0.0"
        },
        "servers": [
          {
            "url": "https://{region}.snowsoftware.io",
            "variables": {
              "region": {
                "enum": [
                  "westeurope",
                  "australiasoutheast",
                  "eastus2",
                  "uksouth"
                ],
                "default": "westeurope"
              }
            }
          }
        ],
        "paths": {
          "/api/custom-fields/v1/custom-fields-asset-types/{id}": {
            "get": {
              "tags": [
                "Asset types"
              ],
              "summary": "Get asset type",
              "description": "Returns the details of a given asset type.",
              "operationId": "getAssetType",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the asset type.",
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/GetAssetTypeItemResponseV1"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "403": {
                  "description": "Forbidden: The operation you requested is forbidden and cannot be completed. This could be because you don't have the required permissions to use the requested endpoint, or the requested endpoint requires purchasing additional features. The recommended action is to abort.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.customfields.customfield.r"
                  ]
                }
              ]
            }
          },
          "/api/custom-fields/v1/custom-fields-asset-types": {
            "get": {
              "tags": [
                "Asset types"
              ],
              "summary": "Get asset types",
              "description": "Returns a collection of asset types.",
              "operationId": "getAssetTypes",
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/GetAssetTypeCollectionResponseV1"
                      }
                    }
                  }
                },
                "403": {
                  "description": "Forbidden: The operation you requested is forbidden and cannot be completed. This could be because you don't have the required permissions to use the requested endpoint, or the requested endpoint requires purchasing additional features. The recommended action is to abort.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.customfields.customfield.r"
                  ]
                }
              ]
            }
          },
          "/api/custom-fields/v1/custom-fields": {
            "get": {
              "tags": [
                "Custom fields"
              ],
              "summary": "Get custom fields",
              "description": "Returns a collection of customfields.",
              "operationId": "getCustomFields",
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/GetCustomFieldCollectionResponseV1"
                      }
                    }
                  }
                },
                "403": {
                  "description": "Forbidden: The operation you requested is forbidden and cannot be completed. This could be because you don't have the required permissions to use the requested endpoint, or the requested endpoint requires purchasing additional features. The recommended action is to abort.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.customfields.customfield.r"
                  ]
                }
              ]
            },
            "post": {
              "tags": [
                "Custom fields"
              ],
              "summary": "Add custom field",
              "description": "Creates a custom field.",
              "operationId": "addCustomField",
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/PostCustomFieldRequestV1"
                    }
                  }
                }
              },
              "responses": {
                "201": {
                  "description": "Created: Your request created something new. Usually, this is a call that used the POST method and will allow a GET method to retrieve it later.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/PostCustomFieldResponseV1"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "403": {
                  "description": "Forbidden: The operation you requested is forbidden and cannot be completed. This could be because you don't have the required permissions to use the requested endpoint, or the requested endpoint requires purchasing additional features. The recommended action is to abort.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.customfields.customfield.c"
                  ]
                }
              ]
            }
          },
          "/api/custom-fields/v1/custom-fields/{id}": {
            "get": {
              "tags": [
                "Custom fields"
              ],
              "summary": "Get custom field",
              "description": "Returns the details of a given customfield.",
              "operationId": "getCustomField",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the custom field.",
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/GetCustomFieldItemResponseV1"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "403": {
                  "description": "Forbidden: The operation you requested is forbidden and cannot be completed. This could be because you don't have the required permissions to use the requested endpoint, or the requested endpoint requires purchasing additional features. The recommended action is to abort.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.customfields.customfield.r"
                  ]
                }
              ]
            },
            "put": {
              "tags": [
                "Custom fields"
              ],
              "summary": "Replace custom field",
              "description": "Replaces a custom field.",
              "operationId": "replaceCustomField",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the custom field.",
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/PutCustomFieldResponseV1"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "403": {
                  "description": "Forbidden: The operation you requested is forbidden and cannot be completed. This could be because you don't have the required permissions to use the requested endpoint, or the requested endpoint requires purchasing additional features. The recommended action is to abort.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.customfields.customfield.crud"
                  ]
                }
              ]
            },
            "delete": {
              "tags": [
                "Custom fields"
              ],
              "summary": "Delete custom field",
              "description": "Removes the given custom field.",
              "operationId": "deleteCustomField",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the custom field.",
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "204": {
                  "description": "No Content: Your request succeeded, but the response message was empty."
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "403": {
                  "description": "Forbidden: The operation you requested is forbidden and cannot be completed. This could be because you don't have the required permissions to use the requested endpoint, or the requested endpoint requires purchasing additional features. The recommended action is to abort.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.customfields.customfield.crud"
                  ]
                }
              ]
            }
          },
          "/api/custom-fields/v1/custom-fields-values": {
            "get": {
              "tags": [
                "Custom field values"
              ],
              "summary": "Get custom field values",
              "description": "Returns a collection of customfield values.",
              "operationId": "getCustomFieldValues",
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/GetValuesResponse"
                      }
                    }
                  }
                },
                "403": {
                  "description": "Forbidden: The operation you requested is forbidden and cannot be completed. This could be because you don't have the required permissions to use the requested endpoint, or the requested endpoint requires purchasing additional features. The recommended action is to abort.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.customfields.customfield.r"
                  ]
                }
              ]
            },
            "post": {
              "tags": [
                "Custom field values"
              ],
              "summary": "Add custom field value",
              "description": "Creates a custom field value.",
              "operationId": "addCustomFieldValue",
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/PostValueRequestV1"
                    }
                  }
                }
              },
              "responses": {
                "201": {
                  "description": "Created: Your request created something new. Usually, this is a call that used the POST method and will allow a GET method to retrieve it later.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/PostValueResponseV1"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "403": {
                  "description": "Forbidden: The operation you requested is forbidden and cannot be completed. This could be because you don't have the required permissions to use the requested endpoint, or the requested endpoint requires purchasing additional features. The recommended action is to abort.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.customfields.customfield.c"
                  ]
                }
              ]
            }
          },
          "/api/custom-fields/v1/custom-fields-values/{id}": {
            "get": {
              "tags": [
                "Custom field values"
              ],
              "summary": "Get custom field value",
              "description": "Returns the details of a given customfield value.",
              "operationId": "getCustomFieldValue",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the custom field value.",
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/GetValueResponseV1"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "403": {
                  "description": "Forbidden: The operation you requested is forbidden and cannot be completed. This could be because you don't have the required permissions to use the requested endpoint, or the requested endpoint requires purchasing additional features. The recommended action is to abort.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.customfields.customfield.r"
                  ]
                }
              ]
            },
            "put": {
              "tags": [
                "Custom field values"
              ],
              "summary": "Replace custom field value",
              "description": "Replaces a custom field value.",
              "operationId": "replaceCustomFieldValue",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the custom field value.",
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/PutValueResponseV1"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "403": {
                  "description": "Forbidden: The operation you requested is forbidden and cannot be completed. This could be because you don't have the required permissions to use the requested endpoint, or the requested endpoint requires purchasing additional features. The recommended action is to abort.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.customfields.customfield.crud"
                  ]
                }
              ]
            },
            "delete": {
              "tags": [
                "Custom field values"
              ],
              "summary": "Delete custom field value",
              "description": "Removes the given custom field value.",
              "operationId": "deleteCustomFieldValue",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the custom field value.",
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "204": {
                  "description": "No Content: Your request succeeded, but the response message was empty."
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "403": {
                  "description": "Forbidden: The operation you requested is forbidden and cannot be completed. This could be because you don't have the required permissions to use the requested endpoint, or the requested endpoint requires purchasing additional features. The recommended action is to abort.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.customfields.customfield.crud"
                  ]
                }
              ]
            }
          },
          "/api/custom-fields/v1/custom-fields-data-types": {
            "get": {
              "tags": [
                "Data types"
              ],
              "summary": "Get data types",
              "description": "Returns a collection of data types.",
              "operationId": "getDataTypes",
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/GetDataTypeCollectionResponseV1"
                      }
                    }
                  }
                },
                "403": {
                  "description": "Forbidden: The operation you requested is forbidden and cannot be completed. This could be because you don't have the required permissions to use the requested endpoint, or the requested endpoint requires purchasing additional features. The recommended action is to abort.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.customfields.customfield.r"
                  ]
                }
              ]
            }
          },
          "/api/custom-fields/v1/custom-fields-data-types/{id}": {
            "get": {
              "tags": [
                "Data types"
              ],
              "summary": "Get data type",
              "description": "Returns the details of a given data type.",
              "operationId": "getDataType",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the data type.",
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/GetDataTypeItemResponseV1"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "403": {
                  "description": "Forbidden: The operation you requested is forbidden and cannot be completed. This could be because you don't have the required permissions to use the requested endpoint, or the requested endpoint requires purchasing additional features. The recommended action is to abort.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.customfields.customfield.r"
                  ]
                }
              ]
            }
          }
        },
        "components": {
          "schemas": {
            "Link": {
              "type": "object",
              "description": "Represents a hypermedia link referenced from a IResource, according to HATEOAS.",
              "additionalProperties": false,
              "properties": {
                "href": {
                  "type": "string",
                  "description": "The associated relative URL.",
                  "nullable": true,
                  "example": "/api/custom-fields/v1/custom-fields"
                },
                "rel": {
                  "type": "string",
                  "description": "Specifies the relationship between the current document and the linked document/resource.",
                  "nullable": true,
                  "example": "self"
                },
                "method": {
                  "type": "string",
                  "description": "The method to access related resources.",
                  "nullable": true,
                  "example": "GET"
                }
              }
            },
            "GetAssetTypeResponse": {
              "type": "object",
              "description": "Response containing single asset type.",
              "additionalProperties": false,
              "required": [
                "id"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "description": "The unique ID of the asset type.",
                  "format": "guid",
                  "minLength": 1,
                  "example": "a8411272-aa0d-42f3-823f-0fb1ceee16c0"
                },
                "name": {
                  "type": "string",
                  "description": "Asset type name.",
                  "nullable": true,
                  "example": "A name"
                }
              }
            },
            "GetAssetTypeItemResponseV1": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/GetAssetTypeResponse"
                },
                {
                  "type": "object",
                  "description": "Represents response after querying asset type.",
                  "additionalProperties": false,
                  "properties": {
                    "_links": {
                      "type": "array",
                      "description": "A collection of links to related resources.",
                      "items": {
                        "$ref": "#/components/schemas/Link"
                      }
                    }
                  }
                }
              ]
            },
            "Error": {
              "type": "object",
              "description": "The error details.",
              "additionalProperties": false,
              "required": [
                "code"
              ],
              "properties": {
                "code": {
                  "type": "integer",
                  "description": "The HTTP status code.",
                  "format": "int32"
                },
                "message": {
                  "type": "string",
                  "description": "The error message.",
                  "nullable": true
                }
              }
            },
            "ErrorResponseOfError": {
              "type": "object",
              "description": "The error response.",
              "additionalProperties": false,
              "required": [
                "error"
              ],
              "properties": {
                "error": {
                  "description": "The error.",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    }
                  ]
                }
              }
            },
            "ErrorResponse": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ErrorResponseOfError"
                },
                {
                  "type": "object",
                  "description": "The error response.",
                  "additionalProperties": false
                }
              ]
            },
            "Pagination": {
              "type": "object",
              "description": "The pagination details.",
              "additionalProperties": false,
              "required": [
                "page_size",
                "page_number"
              ],
              "properties": {
                "page_size": {
                  "type": "integer",
                  "description": "The page size you requested.",
                  "format": "int32",
                  "example": 25
                },
                "page_number": {
                  "type": "integer",
                  "description": "The page number you requested.",
                  "format": "int32",
                  "example": 1
                },
                "total_pages": {
                  "type": "integer",
                  "description": "The total number of pages.",
                  "format": "int32",
                  "nullable": true,
                  "example": 5
                },
                "total_items": {
                  "type": "integer",
                  "description": "The total number of items.",
                  "format": "int32",
                  "nullable": true,
                  "example": 100
                }
              }
            },
            "FilteredResponseOfGetAssetTypeResponse": {
              "type": "object",
              "description": "Filtered response.",
              "additionalProperties": false,
              "required": [
                "items",
                "pagination"
              ],
              "properties": {
                "items": {
                  "type": "array",
                  "description": "A collection of items.",
                  "items": {
                    "$ref": "#/components/schemas/GetAssetTypeResponse"
                  }
                },
                "pagination": {
                  "description": "The pagination details.",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  ]
                }
              }
            },
            "FilteredHateoasResponseOfGetAssetTypeResponse": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/FilteredResponseOfGetAssetTypeResponse"
                },
                {
                  "type": "object",
                  "description": "Extends FilteredResponse`1.",
                  "additionalProperties": false,
                  "properties": {
                    "_links": {
                      "type": "array",
                      "description": "A collection of links to related resources.",
                      "items": {
                        "$ref": "#/components/schemas/Link"
                      }
                    }
                  }
                }
              ]
            },
            "GetAssetTypeCollectionResponseV1": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/FilteredHateoasResponseOfGetAssetTypeResponse"
                },
                {
                  "type": "object",
                  "description": "Represents asset type collection.",
                  "additionalProperties": false
                }
              ]
            },
            "GetDataTypeResponse": {
              "type": "object",
              "description": "Response containing single data type.",
              "additionalProperties": false,
              "required": [
                "id"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "description": "The unique ID of the data type.",
                  "format": "guid",
                  "minLength": 1,
                  "example": "ab3263e4-a4dc-483e-ab4b-3ddd298f558e"
                },
                "name": {
                  "type": "string",
                  "description": "Data type name.",
                  "nullable": true,
                  "example": "A name"
                }
              }
            },
            "GetCustomFieldResponse": {
              "type": "object",
              "description": "Represents response after querying custom fields.",
              "additionalProperties": false,
              "required": [
                "id"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "description": "The unique ID of the custom field.",
                  "format": "guid",
                  "minLength": 1,
                  "example": "a8411272-aa0d-42f3-823f-0fb1ceee16c0"
                },
                "name": {
                  "type": "string",
                  "description": "Custom field name.",
                  "nullable": true,
                  "example": "A name"
                },
                "description": {
                  "type": "string",
                  "description": "Custom field description.",
                  "nullable": true,
                  "example": "A long description."
                },
                "isRequired": {
                  "type": "boolean",
                  "description": "```true``` if required; otherwise, ```false```.",
                  "example": false
                },
                "defaultValue": {
                  "type": "string",
                  "description": "Custom field default value.",
                  "nullable": true,
                  "example": "A default value"
                },
                "isMultipleChoice": {
                  "type": "boolean",
                  "description": "```true``` if it has multiple possible values; otherwise, ```false```.",
                  "example": false
                },
                "multipleChoice": {
                  "type": "array",
                  "description": "Custom field possible values.",
                  "nullable": true,
                  "example": [
                    "Value 1",
                    "Value 2"
                  ],
                  "items": {
                    "type": "string"
                  }
                },
                "assetTypes": {
                  "type": "array",
                  "description": "Custom field asset types.",
                  "nullable": true,
                  "items": {
                    "$ref": "#/components/schemas/GetAssetTypeResponse"
                  }
                },
                "dataType": {
                  "description": "Custom field data type.",
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/GetDataTypeResponse"
                    }
                  ]
                }
              }
            },
            "FilteredResponseOfGetCustomFieldResponse": {
              "type": "object",
              "description": "Filtered response.",
              "additionalProperties": false,
              "required": [
                "items",
                "pagination"
              ],
              "properties": {
                "items": {
                  "type": "array",
                  "description": "A collection of items.",
                  "items": {
                    "$ref": "#/components/schemas/GetCustomFieldResponse"
                  }
                },
                "pagination": {
                  "description": "The pagination details.",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  ]
                }
              }
            },
            "FilteredHateoasResponseOfGetCustomFieldResponse": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/FilteredResponseOfGetCustomFieldResponse"
                },
                {
                  "type": "object",
                  "description": "Extends FilteredResponse`1.",
                  "additionalProperties": false,
                  "properties": {
                    "_links": {
                      "type": "array",
                      "description": "A collection of links to related resources.",
                      "items": {
                        "$ref": "#/components/schemas/Link"
                      }
                    }
                  }
                }
              ]
            },
            "GetCustomFieldCollectionResponseV1": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/FilteredHateoasResponseOfGetCustomFieldResponse"
                },
                {
                  "type": "object",
                  "description": "Represents custom field collection.",
                  "additionalProperties": false
                }
              ]
            },
            "GetCustomFieldItemResponseV1": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/GetCustomFieldResponse"
                },
                {
                  "type": "object",
                  "description": "Represents response after querying custom field.",
                  "additionalProperties": false,
                  "properties": {
                    "_links": {
                      "type": "array",
                      "description": "A collection of links to related resources.",
                      "items": {
                        "$ref": "#/components/schemas/Link"
                      }
                    }
                  }
                }
              ]
            },
            "PostCustomFieldRequestV1": {
              "type": "object",
              "description": "Request to create custom field.",
              "additionalProperties": false,
              "required": [
                "name",
                "dataTypeId",
                "assetTypesIds"
              ],
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Custom field name.",
                  "minLength": 1,
                  "example": "Field 1"
                },
                "description": {
                  "type": "string",
                  "description": "Custom field description.",
                  "example": "Some long description."
                },
                "dataTypeId": {
                  "type": "string",
                  "description": "The unique ID of the data type.",
                  "format": "guid",
                  "minLength": 1,
                  "example": "ab3263e4-a4dc-483e-ab4b-3ddd298f558e"
                },
                "assetTypesIds": {
                  "type": "array",
                  "description": "Collection of asset type ids.",
                  "example": [
                    "34469e92-5132-4269-8392-ef0b7652833f"
                  ],
                  "items": {
                    "type": "string",
                    "format": "guid"
                  }
                },
                "isRequired": {
                  "type": "boolean",
                  "description": "```true``` if required; otherwise, ```false```.",
                  "example": true
                },
                "defaultValue": {
                  "type": "string",
                  "description": "Default value of custom field.",
                  "nullable": true,
                  "example": "A value"
                },
                "multipleChoice": {
                  "type": "array",
                  "description": "Collection of choices.",
                  "example": [
                    "Choice 1",
                    "Choice 2"
                  ],
                  "items": {
                    "type": "string"
                  }
                }
              }
            },
            "PostCustomFieldResponseV1": {
              "type": "object",
              "description": "Response containing id of created custom field.",
              "additionalProperties": false,
              "required": [
                "id"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "description": "The unique ID of the custom field.",
                  "format": "guid",
                  "minLength": 1,
                  "example": "ab3263e4-a4dc-483e-ab4b-3ddd298f558e"
                }
              }
            },
            "PutCustomFieldResponseV1": {
              "type": "object",
              "description": "Represents response after updating custom field.",
              "additionalProperties": false,
              "required": [
                "id"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "description": "The unique ID of the custom field.",
                  "format": "guid",
                  "minLength": 1,
                  "example": "a8411272-aa0d-42f3-823f-0fb1ceee16c0"
                }
              }
            },
            "GetValueResponse": {
              "type": "object",
              "description": "Represents response after querying custom field values.",
              "additionalProperties": false,
              "required": [
                "id"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "description": "The unique ID of the custom field's value.",
                  "format": "guid",
                  "minLength": 1,
                  "example": "ab3263e4-a4dc-483e-ab4b-3ddd298f558e"
                },
                "customFieldId": {
                  "type": "string",
                  "description": "The unique ID of the custom field.",
                  "format": "guid",
                  "example": "ab3263e4-a4dc-483e-ab4b-3ddd298f558e"
                },
                "customFieldName": {
                  "type": "string",
                  "description": "Custom field name.",
                  "nullable": true,
                  "example": "Some name"
                },
                "assetId": {
                  "type": "string",
                  "description": "The unique ID of the custom field's asset.",
                  "format": "guid",
                  "example": "ab3263e4-a4dc-483e-ab4b-3ddd298f558e"
                },
                "assetType": {
                  "description": "Custom field value's asset type.",
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/GetAssetTypeResponse"
                    }
                  ]
                },
                "value": {
                  "type": "string",
                  "description": "Custom field's value.",
                  "nullable": true,
                  "example": "A value"
                }
              }
            },
            "FilteredResponseOfGetValueResponse": {
              "type": "object",
              "description": "Filtered response.",
              "additionalProperties": false,
              "required": [
                "items",
                "pagination"
              ],
              "properties": {
                "items": {
                  "type": "array",
                  "description": "A collection of items.",
                  "items": {
                    "$ref": "#/components/schemas/GetValueResponse"
                  }
                },
                "pagination": {
                  "description": "The pagination details.",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  ]
                }
              }
            },
            "GetValuesResponse": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/FilteredResponseOfGetValueResponse"
                },
                {
                  "type": "object",
                  "description": "Represents custom field values collection.",
                  "additionalProperties": false
                }
              ]
            },
            "GetValueResponseV1": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/GetValueResponse"
                },
                {
                  "type": "object",
                  "description": "Represents response after querying custom field. Includes Link collection to related resources.",
                  "additionalProperties": false,
                  "properties": {
                    "_links": {
                      "type": "array",
                      "description": "A collection of links to related resources.",
                      "items": {
                        "$ref": "#/components/schemas/Link"
                      }
                    }
                  }
                }
              ]
            },
            "PostValueRequestV1": {
              "type": "object",
              "description": "Request to create custom field value.",
              "additionalProperties": false,
              "required": [
                "customFieldId",
                "assetId",
                "assetTypeId",
                "value"
              ],
              "properties": {
                "customFieldId": {
                  "type": "string",
                  "description": "The unique ID of the custom field.",
                  "format": "guid",
                  "minLength": 1,
                  "example": "ab3263e4-a4dc-483e-ab4b-3ddd298f558e"
                },
                "assetId": {
                  "type": "string",
                  "description": "The unique ID of the asset.",
                  "format": "guid",
                  "minLength": 1,
                  "example": "34469e92-5132-4269-8392-ef0b7652833f"
                },
                "assetTypeId": {
                  "type": "string",
                  "description": "The unique ID of the asset type.",
                  "format": "guid",
                  "minLength": 1,
                  "example": "efdd2bd1-4d22-42f9-b3cd-dffda7374ad9"
                },
                "value": {
                  "type": "string",
                  "description": "Custom field value.",
                  "minLength": 1,
                  "example": "A value"
                }
              }
            },
            "PostValueResponseV1": {
              "type": "object",
              "description": "Response containing id of created custom field value.",
              "additionalProperties": false,
              "required": [
                "id"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "description": "The unique ID of the custom field value.",
                  "format": "guid",
                  "minLength": 1,
                  "example": "ab3263e4-a4dc-483e-ab4b-3ddd298f558e"
                }
              }
            },
            "PutValueResponseV1": {
              "type": "object",
              "description": "Represents response after updating custom field's value.",
              "additionalProperties": false,
              "required": [
                "id"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "description": "The unique ID of the custom field's value.",
                  "format": "guid",
                  "minLength": 1,
                  "example": "a8411272-aa0d-42f3-823f-0fb1ceee16c0"
                }
              }
            },
            "FilteredResponseOfGetDataTypeResponse": {
              "type": "object",
              "description": "Filtered response.",
              "additionalProperties": false,
              "required": [
                "items",
                "pagination"
              ],
              "properties": {
                "items": {
                  "type": "array",
                  "description": "A collection of items.",
                  "items": {
                    "$ref": "#/components/schemas/GetDataTypeResponse"
                  }
                },
                "pagination": {
                  "description": "The pagination details.",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  ]
                }
              }
            },
            "FilteredHateoasResponseOfGetDataTypeResponse": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/FilteredResponseOfGetDataTypeResponse"
                },
                {
                  "type": "object",
                  "description": "Extends FilteredResponse`1.",
                  "additionalProperties": false,
                  "properties": {
                    "_links": {
                      "type": "array",
                      "description": "A collection of links to related resources.",
                      "items": {
                        "$ref": "#/components/schemas/Link"
                      }
                    }
                  }
                }
              ]
            },
            "GetDataTypeCollectionResponseV1": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/FilteredHateoasResponseOfGetDataTypeResponse"
                },
                {
                  "type": "object",
                  "description": "Represents data type collection.",
                  "additionalProperties": false
                }
              ]
            },
            "GetDataTypeItemResponseV1": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/GetDataTypeResponse"
                },
                {
                  "type": "object",
                  "description": "Represents response after querying data type.",
                  "additionalProperties": false,
                  "properties": {
                    "_links": {
                      "type": "array",
                      "description": "A collection of links to related resources.",
                      "items": {
                        "$ref": "#/components/schemas/Link"
                      }
                    }
                  }
                }
              ]
            }
          },
          "securitySchemes": {
            "BearerAuth": {
              "type": "http",
              "scheme": "bearer",
              "bearerFormat": "JWT"
            }
          }
        },
        "tags": [
          {
            "name": "Asset types"
          },
          {
            "name": "Custom field values"
          },
          {
            "name": "Custom fields"
          },
          {
            "name": "Data types"
          }
        ]
      },
      "bundle": {
        "openapi": "3.0.0",
        "info": {
          "title": "Product name: Custom Fields API",
          "description": "API for interacting with custom fields.",
          "contact": {
            "name": "Snow Software, Inc.",
            "url": "https://www.snowsoftware.com"
          },
          "version": "0.0.0"
        },
        "servers": [
          {
            "url": "https://{region}.snowsoftware.io",
            "variables": {
              "region": {
                "enum": [
                  "westeurope",
                  "australiasoutheast",
                  "eastus2",
                  "uksouth"
                ],
                "default": "westeurope"
              }
            }
          }
        ],
        "paths": {
          "/api/custom-fields/v1/custom-fields-asset-types/{id}": {
            "get": {
              "tags": [
                "Asset types"
              ],
              "summary": "Get asset type",
              "description": "Returns the details of a given asset type.",
              "operationId": "getAssetType",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the asset type.",
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/GetAssetTypeItemResponseV1"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "403": {
                  "description": "Forbidden: The operation you requested is forbidden and cannot be completed. This could be because you don't have the required permissions to use the requested endpoint, or the requested endpoint requires purchasing additional features. The recommended action is to abort.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.customfields.customfield.r"
                  ]
                }
              ]
            }
          },
          "/api/custom-fields/v1/custom-fields-asset-types": {
            "get": {
              "tags": [
                "Asset types"
              ],
              "summary": "Get asset types",
              "description": "Returns a collection of asset types.",
              "operationId": "getAssetTypes",
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/GetAssetTypeCollectionResponseV1"
                      }
                    }
                  }
                },
                "403": {
                  "description": "Forbidden: The operation you requested is forbidden and cannot be completed. This could be because you don't have the required permissions to use the requested endpoint, or the requested endpoint requires purchasing additional features. The recommended action is to abort.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.customfields.customfield.r"
                  ]
                }
              ]
            }
          },
          "/api/custom-fields/v1/custom-fields": {
            "get": {
              "tags": [
                "Custom fields"
              ],
              "summary": "Get custom fields",
              "description": "Returns a collection of customfields.",
              "operationId": "getCustomFields",
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/GetCustomFieldCollectionResponseV1"
                      }
                    }
                  }
                },
                "403": {
                  "description": "Forbidden: The operation you requested is forbidden and cannot be completed. This could be because you don't have the required permissions to use the requested endpoint, or the requested endpoint requires purchasing additional features. The recommended action is to abort.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.customfields.customfield.r"
                  ]
                }
              ]
            },
            "post": {
              "tags": [
                "Custom fields"
              ],
              "summary": "Add custom field",
              "description": "Creates a custom field.",
              "operationId": "addCustomField",
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/PostCustomFieldRequestV1"
                    }
                  }
                }
              },
              "responses": {
                "201": {
                  "description": "Created: Your request created something new. Usually, this is a call that used the POST method and will allow a GET method to retrieve it later.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/PostCustomFieldResponseV1"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "403": {
                  "description": "Forbidden: The operation you requested is forbidden and cannot be completed. This could be because you don't have the required permissions to use the requested endpoint, or the requested endpoint requires purchasing additional features. The recommended action is to abort.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.customfields.customfield.c"
                  ]
                }
              ]
            }
          },
          "/api/custom-fields/v1/custom-fields/{id}": {
            "get": {
              "tags": [
                "Custom fields"
              ],
              "summary": "Get custom field",
              "description": "Returns the details of a given customfield.",
              "operationId": "getCustomField",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the custom field.",
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/GetCustomFieldItemResponseV1"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "403": {
                  "description": "Forbidden: The operation you requested is forbidden and cannot be completed. This could be because you don't have the required permissions to use the requested endpoint, or the requested endpoint requires purchasing additional features. The recommended action is to abort.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.customfields.customfield.r"
                  ]
                }
              ]
            },
            "put": {
              "tags": [
                "Custom fields"
              ],
              "summary": "Replace custom field",
              "description": "Replaces a custom field.",
              "operationId": "replaceCustomField",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the custom field.",
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/PutCustomFieldResponseV1"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "403": {
                  "description": "Forbidden: The operation you requested is forbidden and cannot be completed. This could be because you don't have the required permissions to use the requested endpoint, or the requested endpoint requires purchasing additional features. The recommended action is to abort.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.customfields.customfield.crud"
                  ]
                }
              ]
            },
            "delete": {
              "tags": [
                "Custom fields"
              ],
              "summary": "Delete custom field",
              "description": "Removes the given custom field.",
              "operationId": "deleteCustomField",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the custom field.",
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "204": {
                  "description": "No Content: Your request succeeded, but the response message was empty."
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "403": {
                  "description": "Forbidden: The operation you requested is forbidden and cannot be completed. This could be because you don't have the required permissions to use the requested endpoint, or the requested endpoint requires purchasing additional features. The recommended action is to abort.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.customfields.customfield.crud"
                  ]
                }
              ]
            }
          },
          "/api/custom-fields/v1/custom-fields-values": {
            "get": {
              "tags": [
                "Custom field values"
              ],
              "summary": "Get custom field values",
              "description": "Returns a collection of customfield values.",
              "operationId": "getCustomFieldValues",
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/GetValuesResponse"
                      }
                    }
                  }
                },
                "403": {
                  "description": "Forbidden: The operation you requested is forbidden and cannot be completed. This could be because you don't have the required permissions to use the requested endpoint, or the requested endpoint requires purchasing additional features. The recommended action is to abort.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.customfields.customfield.r"
                  ]
                }
              ]
            },
            "post": {
              "tags": [
                "Custom field values"
              ],
              "summary": "Add custom field value",
              "description": "Creates a custom field value.",
              "operationId": "addCustomFieldValue",
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/PostValueRequestV1"
                    }
                  }
                }
              },
              "responses": {
                "201": {
                  "description": "Created: Your request created something new. Usually, this is a call that used the POST method and will allow a GET method to retrieve it later.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/PostValueResponseV1"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "403": {
                  "description": "Forbidden: The operation you requested is forbidden and cannot be completed. This could be because you don't have the required permissions to use the requested endpoint, or the requested endpoint requires purchasing additional features. The recommended action is to abort.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.customfields.customfield.c"
                  ]
                }
              ]
            }
          },
          "/api/custom-fields/v1/custom-fields-values/{id}": {
            "get": {
              "tags": [
                "Custom field values"
              ],
              "summary": "Get custom field value",
              "description": "Returns the details of a given customfield value.",
              "operationId": "getCustomFieldValue",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the custom field value.",
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/GetValueResponseV1"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "403": {
                  "description": "Forbidden: The operation you requested is forbidden and cannot be completed. This could be because you don't have the required permissions to use the requested endpoint, or the requested endpoint requires purchasing additional features. The recommended action is to abort.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.customfields.customfield.r"
                  ]
                }
              ]
            },
            "put": {
              "tags": [
                "Custom field values"
              ],
              "summary": "Replace custom field value",
              "description": "Replaces a custom field value.",
              "operationId": "replaceCustomFieldValue",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the custom field value.",
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/PutValueResponseV1"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "403": {
                  "description": "Forbidden: The operation you requested is forbidden and cannot be completed. This could be because you don't have the required permissions to use the requested endpoint, or the requested endpoint requires purchasing additional features. The recommended action is to abort.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.customfields.customfield.crud"
                  ]
                }
              ]
            },
            "delete": {
              "tags": [
                "Custom field values"
              ],
              "summary": "Delete custom field value",
              "description": "Removes the given custom field value.",
              "operationId": "deleteCustomFieldValue",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the custom field value.",
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "204": {
                  "description": "No Content: Your request succeeded, but the response message was empty."
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "403": {
                  "description": "Forbidden: The operation you requested is forbidden and cannot be completed. This could be because you don't have the required permissions to use the requested endpoint, or the requested endpoint requires purchasing additional features. The recommended action is to abort.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.customfields.customfield.crud"
                  ]
                }
              ]
            }
          },
          "/api/custom-fields/v1/custom-fields-data-types": {
            "get": {
              "tags": [
                "Data types"
              ],
              "summary": "Get data types",
              "description": "Returns a collection of data types.",
              "operationId": "getDataTypes",
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/GetDataTypeCollectionResponseV1"
                      }
                    }
                  }
                },
                "403": {
                  "description": "Forbidden: The operation you requested is forbidden and cannot be completed. This could be because you don't have the required permissions to use the requested endpoint, or the requested endpoint requires purchasing additional features. The recommended action is to abort.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.customfields.customfield.r"
                  ]
                }
              ]
            }
          },
          "/api/custom-fields/v1/custom-fields-data-types/{id}": {
            "get": {
              "tags": [
                "Data types"
              ],
              "summary": "Get data type",
              "description": "Returns the details of a given data type.",
              "operationId": "getDataType",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "The unique ID of the data type.",
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "OK: Your request succeeded.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/GetDataTypeItemResponseV1"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "403": {
                  "description": "Forbidden: The operation you requested is forbidden and cannot be completed. This could be because you don't have the required permissions to use the requested endpoint, or the requested endpoint requires purchasing additional features. The recommended action is to abort.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal Server Error: Your request failed due to an internal error.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponse"
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "BearerAuth": [
                    "sam.customfields.customfield.r"
                  ]
                }
              ]
            }
          }
        },
        "components": {
          "schemas": {
            "Link": {
              "type": "object",
              "description": "Represents a hypermedia link referenced from a IResource, according to HATEOAS.",
              "additionalProperties": false,
              "properties": {
                "href": {
                  "type": "string",
                  "description": "The associated relative URL.",
                  "nullable": true,
                  "example": "/api/custom-fields/v1/custom-fields"
                },
                "rel": {
                  "type": "string",
                  "description": "Specifies the relationship between the current document and the linked document/resource.",
                  "nullable": true,
                  "example": "self"
                },
                "method": {
                  "type": "string",
                  "description": "The method to access related resources.",
                  "nullable": true,
                  "example": "GET"
                }
              }
            },
            "GetAssetTypeResponse": {
              "type": "object",
              "description": "Response containing single asset type.",
              "additionalProperties": false,
              "required": [
                "id"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "description": "The unique ID of the asset type.",
                  "format": "guid",
                  "minLength": 1,
                  "example": "a8411272-aa0d-42f3-823f-0fb1ceee16c0"
                },
                "name": {
                  "type": "string",
                  "description": "Asset type name.",
                  "nullable": true,
                  "example": "A name"
                }
              }
            },
            "GetAssetTypeItemResponseV1": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/GetAssetTypeResponse"
                },
                {
                  "type": "object",
                  "description": "Represents response after querying asset type.",
                  "additionalProperties": false,
                  "properties": {
                    "_links": {
                      "type": "array",
                      "description": "A collection of links to related resources.",
                      "items": {
                        "$ref": "#/components/schemas/Link"
                      }
                    }
                  }
                }
              ]
            },
            "Error": {
              "type": "object",
              "description": "The error details.",
              "additionalProperties": false,
              "required": [
                "code"
              ],
              "properties": {
                "code": {
                  "type": "integer",
                  "description": "The HTTP status code.",
                  "format": "int32"
                },
                "message": {
                  "type": "string",
                  "description": "The error message.",
                  "nullable": true
                }
              }
            },
            "ErrorResponseOfError": {
              "type": "object",
              "description": "The error response.",
              "additionalProperties": false,
              "required": [
                "error"
              ],
              "properties": {
                "error": {
                  "description": "The error.",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    }
                  ]
                }
              }
            },
            "ErrorResponse": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ErrorResponseOfError"
                },
                {
                  "type": "object",
                  "description": "The error response.",
                  "additionalProperties": false
                }
              ]
            },
            "Pagination": {
              "type": "object",
              "description": "The pagination details.",
              "additionalProperties": false,
              "required": [
                "page_size",
                "page_number"
              ],
              "properties": {
                "page_size": {
                  "type": "integer",
                  "description": "The page size you requested.",
                  "format": "int32",
                  "example": 25
                },
                "page_number": {
                  "type": "integer",
                  "description": "The page number you requested.",
                  "format": "int32",
                  "example": 1
                },
                "total_pages": {
                  "type": "integer",
                  "description": "The total number of pages.",
                  "format": "int32",
                  "nullable": true,
                  "example": 5
                },
                "total_items": {
                  "type": "integer",
                  "description": "The total number of items.",
                  "format": "int32",
                  "nullable": true,
                  "example": 100
                }
              }
            },
            "FilteredResponseOfGetAssetTypeResponse": {
              "type": "object",
              "description": "Filtered response.",
              "additionalProperties": false,
              "required": [
                "items",
                "pagination"
              ],
              "properties": {
                "items": {
                  "type": "array",
                  "description": "A collection of items.",
                  "items": {
                    "$ref": "#/components/schemas/GetAssetTypeResponse"
                  }
                },
                "pagination": {
                  "description": "The pagination details.",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  ]
                }
              }
            },
            "FilteredHateoasResponseOfGetAssetTypeResponse": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/FilteredResponseOfGetAssetTypeResponse"
                },
                {
                  "type": "object",
                  "description": "Extends FilteredResponse`1.",
                  "additionalProperties": false,
                  "properties": {
                    "_links": {
                      "type": "array",
                      "description": "A collection of links to related resources.",
                      "items": {
                        "$ref": "#/components/schemas/Link"
                      }
                    }
                  }
                }
              ]
            },
            "GetAssetTypeCollectionResponseV1": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/FilteredHateoasResponseOfGetAssetTypeResponse"
                },
                {
                  "type": "object",
                  "description": "Represents asset type collection.",
                  "additionalProperties": false
                }
              ]
            },
            "GetDataTypeResponse": {
              "type": "object",
              "description": "Response containing single data type.",
              "additionalProperties": false,
              "required": [
                "id"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "description": "The unique ID of the data type.",
                  "format": "guid",
                  "minLength": 1,
                  "example": "ab3263e4-a4dc-483e-ab4b-3ddd298f558e"
                },
                "name": {
                  "type": "string",
                  "description": "Data type name.",
                  "nullable": true,
                  "example": "A name"
                }
              }
            },
            "GetCustomFieldResponse": {
              "type": "object",
              "description": "Represents response after querying custom fields.",
              "additionalProperties": false,
              "required": [
                "id"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "description": "The unique ID of the custom field.",
                  "format": "guid",
                  "minLength": 1,
                  "example": "a8411272-aa0d-42f3-823f-0fb1ceee16c0"
                },
                "name": {
                  "type": "string",
                  "description": "Custom field name.",
                  "nullable": true,
                  "example": "A name"
                },
                "description": {
                  "type": "string",
                  "description": "Custom field description.",
                  "nullable": true,
                  "example": "A long description."
                },
                "isRequired": {
                  "type": "boolean",
                  "description": "```true``` if required; otherwise, ```false```.",
                  "example": false
                },
                "defaultValue": {
                  "type": "string",
                  "description": "Custom field default value.",
                  "nullable": true,
                  "example": "A default value"
                },
                "isMultipleChoice": {
                  "type": "boolean",
                  "description": "```true``` if it has multiple possible values; otherwise, ```false```.",
                  "example": false
                },
                "multipleChoice": {
                  "type": "array",
                  "description": "Custom field possible values.",
                  "nullable": true,
                  "example": [
                    "Value 1",
                    "Value 2"
                  ],
                  "items": {
                    "type": "string"
                  }
                },
                "assetTypes": {
                  "type": "array",
                  "description": "Custom field asset types.",
                  "nullable": true,
                  "items": {
                    "$ref": "#/components/schemas/GetAssetTypeResponse"
                  }
                },
                "dataType": {
                  "description": "Custom field data type.",
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/GetDataTypeResponse"
                    }
                  ]
                }
              }
            },
            "FilteredResponseOfGetCustomFieldResponse": {
              "type": "object",
              "description": "Filtered response.",
              "additionalProperties": false,
              "required": [
                "items",
                "pagination"
              ],
              "properties": {
                "items": {
                  "type": "array",
                  "description": "A collection of items.",
                  "items": {
                    "$ref": "#/components/schemas/GetCustomFieldResponse"
                  }
                },
                "pagination": {
                  "description": "The pagination details.",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  ]
                }
              }
            },
            "FilteredHateoasResponseOfGetCustomFieldResponse": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/FilteredResponseOfGetCustomFieldResponse"
                },
                {
                  "type": "object",
                  "description": "Extends FilteredResponse`1.",
                  "additionalProperties": false,
                  "properties": {
                    "_links": {
                      "type": "array",
                      "description": "A collection of links to related resources.",
                      "items": {
                        "$ref": "#/components/schemas/Link"
                      }
                    }
                  }
                }
              ]
            },
            "GetCustomFieldCollectionResponseV1": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/FilteredHateoasResponseOfGetCustomFieldResponse"
                },
                {
                  "type": "object",
                  "description": "Represents custom field collection.",
                  "additionalProperties": false
                }
              ]
            },
            "GetCustomFieldItemResponseV1": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/GetCustomFieldResponse"
                },
                {
                  "type": "object",
                  "description": "Represents response after querying custom field.",
                  "additionalProperties": false,
                  "properties": {
                    "_links": {
                      "type": "array",
                      "description": "A collection of links to related resources.",
                      "items": {
                        "$ref": "#/components/schemas/Link"
                      }
                    }
                  }
                }
              ]
            },
            "PostCustomFieldRequestV1": {
              "type": "object",
              "description": "Request to create custom field.",
              "additionalProperties": false,
              "required": [
                "name",
                "dataTypeId",
                "assetTypesIds"
              ],
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Custom field name.",
                  "minLength": 1,
                  "example": "Field 1"
                },
                "description": {
                  "type": "string",
                  "description": "Custom field description.",
                  "example": "Some long description."
                },
                "dataTypeId": {
                  "type": "string",
                  "description": "The unique ID of the data type.",
                  "format": "guid",
                  "minLength": 1,
                  "example": "ab3263e4-a4dc-483e-ab4b-3ddd298f558e"
                },
                "assetTypesIds": {
                  "type": "array",
                  "description": "Collection of asset type ids.",
                  "example": [
                    "34469e92-5132-4269-8392-ef0b7652833f"
                  ],
                  "items": {
                    "type": "string",
                    "format": "guid"
                  }
                },
                "isRequired": {
                  "type": "boolean",
                  "description": "```true``` if required; otherwise, ```false```.",
                  "example": true
                },
                "defaultValue": {
                  "type": "string",
                  "description": "Default value of custom field.",
                  "nullable": true,
                  "example": "A value"
                },
                "multipleChoice": {
                  "type": "array",
                  "description": "Collection of choices.",
                  "example": [
                    "Choice 1",
                    "Choice 2"
                  ],
                  "items": {
                    "type": "string"
                  }
                }
              }
            },
            "PostCustomFieldResponseV1": {
              "type": "object",
              "description": "Response containing id of created custom field.",
              "additionalProperties": false,
              "required": [
                "id"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "description": "The unique ID of the custom field.",
                  "format": "guid",
                  "minLength": 1,
                  "example": "ab3263e4-a4dc-483e-ab4b-3ddd298f558e"
                }
              }
            },
            "PutCustomFieldResponseV1": {
              "type": "object",
              "description": "Represents response after updating custom field.",
              "additionalProperties": false,
              "required": [
                "id"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "description": "The unique ID of the custom field.",
                  "format": "guid",
                  "minLength": 1,
                  "example": "a8411272-aa0d-42f3-823f-0fb1ceee16c0"
                }
              }
            },
            "GetValueResponse": {
              "type": "object",
              "description": "Represents response after querying custom field values.",
              "additionalProperties": false,
              "required": [
                "id"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "description": "The unique ID of the custom field's value.",
                  "format": "guid",
                  "minLength": 1,
                  "example": "ab3263e4-a4dc-483e-ab4b-3ddd298f558e"
                },
                "customFieldId": {
                  "type": "string",
                  "description": "The unique ID of the custom field.",
                  "format": "guid",
                  "example": "ab3263e4-a4dc-483e-ab4b-3ddd298f558e"
                },
                "customFieldName": {
                  "type": "string",
                  "description": "Custom field name.",
                  "nullable": true,
                  "example": "Some name"
                },
                "assetId": {
                  "type": "string",
                  "description": "The unique ID of the custom field's asset.",
                  "format": "guid",
                  "example": "ab3263e4-a4dc-483e-ab4b-3ddd298f558e"
                },
                "assetType": {
                  "description": "Custom field value's asset type.",
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/GetAssetTypeResponse"
                    }
                  ]
                },
                "value": {
                  "type": "string",
                  "description": "Custom field's value.",
                  "nullable": true,
                  "example": "A value"
                }
              }
            },
            "FilteredResponseOfGetValueResponse": {
              "type": "object",
              "description": "Filtered response.",
              "additionalProperties": false,
              "required": [
                "items",
                "pagination"
              ],
              "properties": {
                "items": {
                  "type": "array",
                  "description": "A collection of items.",
                  "items": {
                    "$ref": "#/components/schemas/GetValueResponse"
                  }
                },
                "pagination": {
                  "description": "The pagination details.",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  ]
                }
              }
            },
            "GetValuesResponse": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/FilteredResponseOfGetValueResponse"
                },
                {
                  "type": "object",
                  "description": "Represents custom field values collection.",
                  "additionalProperties": false
                }
              ]
            },
            "GetValueResponseV1": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/GetValueResponse"
                },
                {
                  "type": "object",
                  "description": "Represents response after querying custom field. Includes Link collection to related resources.",
                  "additionalProperties": false,
                  "properties": {
                    "_links": {
                      "type": "array",
                      "description": "A collection of links to related resources.",
                      "items": {
                        "$ref": "#/components/schemas/Link"
                      }
                    }
                  }
                }
              ]
            },
            "PostValueRequestV1": {
              "type": "object",
              "description": "Request to create custom field value.",
              "additionalProperties": false,
              "required": [
                "customFieldId",
                "assetId",
                "assetTypeId",
                "value"
              ],
              "properties": {
                "customFieldId": {
                  "type": "string",
                  "description": "The unique ID of the custom field.",
                  "format": "guid",
                  "minLength": 1,
                  "example": "ab3263e4-a4dc-483e-ab4b-3ddd298f558e"
                },
                "assetId": {
                  "type": "string",
                  "description": "The unique ID of the asset.",
                  "format": "guid",
                  "minLength": 1,
                  "example": "34469e92-5132-4269-8392-ef0b7652833f"
                },
                "assetTypeId": {
                  "type": "string",
                  "description": "The unique ID of the asset type.",
                  "format": "guid",
                  "minLength": 1,
                  "example": "efdd2bd1-4d22-42f9-b3cd-dffda7374ad9"
                },
                "value": {
                  "type": "string",
                  "description": "Custom field value.",
                  "minLength": 1,
                  "example": "A value"
                }
              }
            },
            "PostValueResponseV1": {
              "type": "object",
              "description": "Response containing id of created custom field value.",
              "additionalProperties": false,
              "required": [
                "id"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "description": "The unique ID of the custom field value.",
                  "format": "guid",
                  "minLength": 1,
                  "example": "ab3263e4-a4dc-483e-ab4b-3ddd298f558e"
                }
              }
            },
            "PutValueResponseV1": {
              "type": "object",
              "description": "Represents response after updating custom field's value.",
              "additionalProperties": false,
              "required": [
                "id"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "description": "The unique ID of the custom field's value.",
                  "format": "guid",
                  "minLength": 1,
                  "example": "a8411272-aa0d-42f3-823f-0fb1ceee16c0"
                }
              }
            },
            "FilteredResponseOfGetDataTypeResponse": {
              "type": "object",
              "description": "Filtered response.",
              "additionalProperties": false,
              "required": [
                "items",
                "pagination"
              ],
              "properties": {
                "items": {
                  "type": "array",
                  "description": "A collection of items.",
                  "items": {
                    "$ref": "#/components/schemas/GetDataTypeResponse"
                  }
                },
                "pagination": {
                  "description": "The pagination details.",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  ]
                }
              }
            },
            "FilteredHateoasResponseOfGetDataTypeResponse": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/FilteredResponseOfGetDataTypeResponse"
                },
                {
                  "type": "object",
                  "description": "Extends FilteredResponse`1.",
                  "additionalProperties": false,
                  "properties": {
                    "_links": {
                      "type": "array",
                      "description": "A collection of links to related resources.",
                      "items": {
                        "$ref": "#/components/schemas/Link"
                      }
                    }
                  }
                }
              ]
            },
            "GetDataTypeCollectionResponseV1": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/FilteredHateoasResponseOfGetDataTypeResponse"
                },
                {
                  "type": "object",
                  "description": "Represents data type collection.",
                  "additionalProperties": false
                }
              ]
            },
            "GetDataTypeItemResponseV1": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/GetDataTypeResponse"
                },
                {
                  "type": "object",
                  "description": "Represents response after querying data type.",
                  "additionalProperties": false,
                  "properties": {
                    "_links": {
                      "type": "array",
                      "description": "A collection of links to related resources.",
                      "items": {
                        "$ref": "#/components/schemas/Link"
                      }
                    }
                  }
                }
              ]
            }
          },
          "securitySchemes": {
            "BearerAuth": {
              "type": "http",
              "scheme": "bearer",
              "bearerFormat": "JWT"
            }
          }
        },
        "tags": [
          {
            "name": "Asset types"
          },
          {
            "name": "Custom field values"
          },
          {
            "name": "Custom fields"
          },
          {
            "name": "Data types"
          }
        ]
      }
    }
  },
  "docusaurus-theme-classic": {},
  "docusaurus-theme-redoc": {},
  "@easyops-cn/docusaurus-search-local": {},
  "docusaurus-bootstrap-plugin": {},
  "docusaurus-mdx-fallback-plugin": {}
}